{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Desktop/Admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/user/Desktop/Admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/user/Desktop/Admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isPlatformBrowser } from '@angular/common';\nimport { Directive, Renderer2, ElementRef, Output, Input, EventEmitter, NgZone, Inject, PLATFORM_ID, Optional, NgModule } from '@angular/core';\nimport { Subject, Observable, merge, EMPTY, fromEvent } from 'rxjs';\nimport { map, mergeMap, takeUntil, filter, pairwise, take, share, auditTime, switchMap, startWith, tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @hidden\n * @type {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar IS_TOUCH_DEVICE = function () {\n  // In case we're in Node.js environment.\n  if (typeof window === 'undefined') {\n    return false;\n  } else {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n  }\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} value1\n * @param {?} value2\n * @param {?=} precision\n * @return {?}\n */\n\n\nfunction isNumberCloseTo(value1, value2) {\n  var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n\n  /** @type {?} */\n  var diff = Math.abs(value1 - value2);\n  return diff < precision;\n}\n/**\n * @param {?} startingRect\n * @param {?} edges\n * @param {?} clientX\n * @param {?} clientY\n * @return {?}\n */\n\n\nfunction getNewBoundingRectangle(startingRect, edges, clientX, clientY) {\n  /** @type {?} */\n  var newBoundingRect = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n  return newBoundingRect;\n}\n/**\n * @param {?} element\n * @param {?} ghostElementPositioning\n * @return {?}\n */\n\n\nfunction getElementRect(element, ghostElementPositioning) {\n  /** @type {?} */\n  var translateX = 0;\n  /** @type {?} */\n\n  var translateY = 0;\n  /** @type {?} */\n\n  var style = element.nativeElement.style;\n  /** @type {?} */\n\n  var transformProperties = ['transform', '-ms-transform', '-moz-transform', '-o-transform'];\n  /** @type {?} */\n\n  var transform = transformProperties.map(function (property) {\n    return style[property];\n  }).find(function (value) {\n    return !!value;\n  });\n\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/, '$1');\n    translateY = transform.replace(/.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom: element.nativeElement.offsetHeight + element.nativeElement.offsetTop - translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right: element.nativeElement.offsetWidth + element.nativeElement.offsetLeft - translateX\n    };\n  } else {\n    /** @type {?} */\n    var boundingRect = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction isWithinBoundingY(_ref) {\n  var clientY = _ref.clientY,\n      rect = _ref.rect;\n  return clientY >= rect.top && clientY <= rect.bottom;\n}\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction isWithinBoundingX(_ref2) {\n  var clientX = _ref2.clientX,\n      rect = _ref2.rect;\n  return clientX >= rect.left && clientX <= rect.right;\n}\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction getResizeEdges(_ref3) {\n  var clientX = _ref3.clientX,\n      clientY = _ref3.clientY,\n      elm = _ref3.elm,\n      allowedEdges = _ref3.allowedEdges,\n      cursorPrecision = _ref3.cursorPrecision;\n\n  /** @type {?} */\n  var elmPosition = elm.nativeElement.getBoundingClientRect();\n  /** @type {?} */\n\n  var edges = {};\n\n  if (allowedEdges.left && isNumberCloseTo(clientX, elmPosition.left, cursorPrecision) && isWithinBoundingY({\n    clientY: clientY,\n    rect: elmPosition\n  })) {\n    edges.left = true;\n  }\n\n  if (allowedEdges.right && isNumberCloseTo(clientX, elmPosition.right, cursorPrecision) && isWithinBoundingY({\n    clientY: clientY,\n    rect: elmPosition\n  })) {\n    edges.right = true;\n  }\n\n  if (allowedEdges.top && isNumberCloseTo(clientY, elmPosition.top, cursorPrecision) && isWithinBoundingX({\n    clientX: clientX,\n    rect: elmPosition\n  })) {\n    edges.top = true;\n  }\n\n  if (allowedEdges.bottom && isNumberCloseTo(clientY, elmPosition.bottom, cursorPrecision) && isWithinBoundingX({\n    clientX: clientX,\n    rect: elmPosition\n  })) {\n    edges.bottom = true;\n  }\n\n  return edges;\n}\n/** @type {?} */\n\n\nvar DEFAULT_RESIZE_CURSORS = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize'\n});\n/**\n * @param {?} edges\n * @param {?} cursors\n * @return {?}\n */\n\nfunction getResizeCursor(edges, cursors) {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n/**\n * @param {?} __0\n * @return {?}\n */\n\n\nfunction getEdgesDiff(_ref4) {\n  var edges = _ref4.edges,\n      initialRectangle = _ref4.initialRectangle,\n      newRectangle = _ref4.newRectangle;\n\n  /** @type {?} */\n  var edgesDiff = {};\n  Object.keys(edges).forEach(function (edge) {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n/** @type {?} */\n\n\nvar RESIZE_ACTIVE_CLASS = 'resize-active';\n/** @type {?} */\n\nvar RESIZE_LEFT_HOVER_CLASS = 'resize-left-hover';\n/** @type {?} */\n\nvar RESIZE_RIGHT_HOVER_CLASS = 'resize-right-hover';\n/** @type {?} */\n\nvar RESIZE_TOP_HOVER_CLASS = 'resize-top-hover';\n/** @type {?} */\n\nvar RESIZE_BOTTOM_HOVER_CLASS = 'resize-bottom-hover';\n/** @type {?} */\n\nvar RESIZE_GHOST_ELEMENT_CLASS = 'resize-ghost-element';\n/** @type {?} */\n\nvar MOUSE_MOVE_THROTTLE_MS = 50;\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * <div\n *   mwlResizable\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n *   [enableGhostResize]=\"true\">\n * </div>\n * ```\n * Or in case they are sibling elements:\n * ```html\n * <div mwlResizable #resizableElement=\"mwlResizable\"></div>\n * <div mwlResizeHandle [resizableContainer]=\"resizableElement\" [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * ```\n */\n\nvar ResizableDirective = /*#__PURE__*/function () {\n  /**\n   * @hidden\n   * @param {?} platformId\n   * @param {?} renderer\n   * @param {?} elm\n   * @param {?} zone\n   */\n  function ResizableDirective(platformId, renderer, elm, zone) {\n    _classCallCheck(this, ResizableDirective);\n\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.elm = elm;\n    this.zone = zone;\n    /**\n     * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n     * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n     */\n\n    this.resizeEdges = {};\n    /**\n     * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n     */\n\n    this.enableGhostResize = false;\n    /**\n     * A snap grid that resize events will be locked to.\n     *\n     * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n     */\n\n    this.resizeSnapGrid = {};\n    /**\n     * The mouse cursors that will be set on the resize edges\n     */\n\n    this.resizeCursors = DEFAULT_RESIZE_CURSORS;\n    /**\n     * Mouse over thickness to active cursor.\n     * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n     */\n\n    this.resizeCursorPrecision = 3;\n    /**\n     * Define the positioning of the ghost element (can be fixed or absolute)\n     */\n\n    this.ghostElementPositioning = 'fixed';\n    /**\n     * Allow elements to be resized to negative dimensions\n     */\n\n    this.allowNegativeResizes = false;\n    /**\n     * The mouse move throttle in milliseconds, default: 50 ms\n     */\n\n    this.mouseMoveThrottleMS = MOUSE_MOVE_THROTTLE_MS;\n    /**\n     * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n     */\n\n    this.resizeStart = new EventEmitter();\n    /**\n     * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n     */\n\n    this.resizing = new EventEmitter();\n    /**\n     * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n     */\n\n    this.resizeEnd = new EventEmitter();\n    /**\n     * @hidden\n     */\n\n    this.mouseup = new Subject();\n    /**\n     * @hidden\n     */\n\n    this.mousedown = new Subject();\n    /**\n     * @hidden\n     */\n\n    this.mousemove = new Subject();\n    this.destroy$ = new Subject();\n    this.resizeEdges$ = new Subject();\n    this.pointerEventListeners = PointerEventListeners.getInstance(renderer, zone);\n  }\n  /**\n   * @hidden\n   * @return {?}\n   */\n\n\n  _createClass(ResizableDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      /** @type {?} */\n      var mousedown$ = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n      /** @type {?} */\n\n      var mousemove$ = merge(this.pointerEventListeners.pointerMove, this.mousemove).pipe(tap(function (_ref5) {\n        var event = _ref5.event;\n\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {// just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }), share());\n      /** @type {?} */\n\n      var mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n      /** @type {?} */\n\n      var currentResize;\n      /** @type {?} */\n\n      var removeGhostElement = function removeGhostElement() {\n        if (currentResize && currentResize.clonedNode) {\n          _this.elm.nativeElement.parentElement.removeChild(currentResize.clonedNode);\n\n          _this.renderer.setStyle(_this.elm.nativeElement, 'visibility', 'inherit');\n        }\n      };\n      /** @type {?} */\n\n\n      var getResizeCursors = function getResizeCursors() {\n        return Object.assign({}, DEFAULT_RESIZE_CURSORS, _this.resizeCursors);\n      };\n\n      this.resizeEdges$.pipe(startWith(this.resizeEdges), map(function () {\n        return _this.resizeEdges && Object.keys(_this.resizeEdges).some(function (edge) {\n          return !!_this.resizeEdges[edge];\n        });\n      }), switchMap(function (legacyResizeEdgesEnabled) {\n        return legacyResizeEdgesEnabled ? mousemove$ : EMPTY;\n      }), auditTime(this.mouseMoveThrottleMS), takeUntil(this.destroy$)).subscribe(function (_ref6) {\n        var clientX = _ref6.clientX,\n            clientY = _ref6.clientY;\n\n        /** @type {?} */\n        var resizeEdges = getResizeEdges({\n          clientX: clientX,\n          clientY: clientY,\n          elm: _this.elm,\n          allowedEdges: _this.resizeEdges,\n          cursorPrecision: _this.resizeCursorPrecision\n        });\n        /** @type {?} */\n\n        var resizeCursors = getResizeCursors();\n\n        if (!currentResize) {\n          /** @type {?} */\n          var cursor = getResizeCursor(resizeEdges, resizeCursors);\n\n          _this.renderer.setStyle(_this.elm.nativeElement, 'cursor', cursor);\n        }\n\n        _this.setElementClass(_this.elm, RESIZE_LEFT_HOVER_CLASS, resizeEdges.left === true);\n\n        _this.setElementClass(_this.elm, RESIZE_RIGHT_HOVER_CLASS, resizeEdges.right === true);\n\n        _this.setElementClass(_this.elm, RESIZE_TOP_HOVER_CLASS, resizeEdges.top === true);\n\n        _this.setElementClass(_this.elm, RESIZE_BOTTOM_HOVER_CLASS, resizeEdges.bottom === true);\n      });\n      /** @type {?} */\n\n      var mousedrag = mousedown$.pipe(mergeMap(function (startCoords) {\n        /**\n         * @param {?} moveCoords\n         * @return {?}\n         */\n        function getDiff(moveCoords) {\n          return {\n            clientX: moveCoords.clientX - startCoords.clientX,\n            clientY: moveCoords.clientY - startCoords.clientY\n          };\n        }\n        /** @type {?} */\n\n\n        var getSnapGrid = function getSnapGrid() {\n          /** @type {?} */\n          var snapGrid = {\n            x: 1,\n            y: 1\n          };\n\n          if (currentResize) {\n            if (_this.resizeSnapGrid.left && currentResize.edges.left) {\n              snapGrid.x = +_this.resizeSnapGrid.left;\n            } else if (_this.resizeSnapGrid.right && currentResize.edges.right) {\n              snapGrid.x = +_this.resizeSnapGrid.right;\n            }\n\n            if (_this.resizeSnapGrid.top && currentResize.edges.top) {\n              snapGrid.y = +_this.resizeSnapGrid.top;\n            } else if (_this.resizeSnapGrid.bottom && currentResize.edges.bottom) {\n              snapGrid.y = +_this.resizeSnapGrid.bottom;\n            }\n          }\n\n          return snapGrid;\n        };\n        /**\n         * @param {?} coords\n         * @param {?} snapGrid\n         * @return {?}\n         */\n\n\n        function getGrid(coords, snapGrid) {\n          return {\n            x: Math.ceil(coords.clientX / snapGrid.x),\n            y: Math.ceil(coords.clientY / snapGrid.y)\n          };\n        }\n\n        return (\n          /** @type {?} */\n          merge(mousemove$.pipe(take(1)).pipe(map(function (coords) {\n            return [, coords];\n          })), mousemove$.pipe(pairwise())).pipe(map(function (_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n                previousCoords = _ref8[0],\n                newCoords = _ref8[1];\n\n            return [previousCoords ? getDiff(previousCoords) : previousCoords, getDiff(newCoords)];\n          })).pipe(filter(function (_ref9) {\n            var _ref10 = _slicedToArray(_ref9, 2),\n                previousCoords = _ref10[0],\n                newCoords = _ref10[1];\n\n            if (!previousCoords) {\n              return true;\n            }\n            /** @type {?} */\n\n\n            var snapGrid = getSnapGrid();\n            /** @type {?} */\n\n            var previousGrid = getGrid(previousCoords, snapGrid);\n            /** @type {?} */\n\n            var newGrid = getGrid(newCoords, snapGrid);\n            return previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y;\n          })).pipe(map(function (_ref11) {\n            var _ref12 = _slicedToArray(_ref11, 2),\n                newCoords = _ref12[1];\n\n            /** @type {?} */\n            var snapGrid = getSnapGrid();\n            return {\n              clientX: Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n              clientY: Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n            };\n          })).pipe(takeUntil(merge(mouseup$, mousedown$)))\n        );\n      })).pipe(filter(function () {\n        return !!currentResize;\n      }));\n      mousedrag.pipe(map(function (_ref13) {\n        var clientX = _ref13.clientX,\n            clientY = _ref13.clientY;\n        return getNewBoundingRectangle(\n        /** @type {?} */\n        currentResize.startingRect,\n        /** @type {?} */\n        currentResize.edges, clientX, clientY);\n      })).pipe(filter(function (newBoundingRect) {\n        return _this.allowNegativeResizes || !!(newBoundingRect.height && newBoundingRect.width && newBoundingRect.height > 0 && newBoundingRect.width > 0);\n      })).pipe(filter(function (newBoundingRect) {\n        return _this.validateResize ? _this.validateResize({\n          rectangle: newBoundingRect,\n          edges: getEdgesDiff({\n            edges:\n            /** @type {?} */\n            currentResize.edges,\n            initialRectangle:\n            /** @type {?} */\n            currentResize.startingRect,\n            newRectangle: newBoundingRect\n          })\n        }) : true;\n      }), takeUntil(this.destroy$)).subscribe(function (newBoundingRect) {\n        if (currentResize && currentResize.clonedNode) {\n          _this.renderer.setStyle(currentResize.clonedNode, 'height', \"\".concat(newBoundingRect.height, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'width', \"\".concat(newBoundingRect.width, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'top', \"\".concat(newBoundingRect.top, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'left', \"\".concat(newBoundingRect.left, \"px\"));\n        }\n\n        if (_this.resizing.observers.length > 0) {\n          _this.zone.run(function () {\n            _this.resizing.emit({\n              edges: getEdgesDiff({\n                edges:\n                /** @type {?} */\n                currentResize.edges,\n                initialRectangle:\n                /** @type {?} */\n                currentResize.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n\n        /** @type {?} */\n        currentResize.currentRect = newBoundingRect;\n      });\n      mousedown$.pipe(map(function (_ref14) {\n        var clientX = _ref14.clientX,\n            clientY = _ref14.clientY,\n            edges = _ref14.edges;\n        return edges || getResizeEdges({\n          clientX: clientX,\n          clientY: clientY,\n          elm: _this.elm,\n          allowedEdges: _this.resizeEdges,\n          cursorPrecision: _this.resizeCursorPrecision\n        });\n      })).pipe(filter(function (edges) {\n        return Object.keys(edges).length > 0;\n      }), takeUntil(this.destroy$)).subscribe(function (edges) {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        /** @type {?} */\n\n\n        var startingRect = getElementRect(_this.elm, _this.ghostElementPositioning);\n        currentResize = {\n          edges: edges,\n          startingRect: startingRect,\n          currentRect: startingRect\n        };\n        /** @type {?} */\n\n        var resizeCursors = getResizeCursors();\n        /** @type {?} */\n\n        var cursor = getResizeCursor(currentResize.edges, resizeCursors);\n\n        _this.renderer.setStyle(document.body, 'cursor', cursor);\n\n        _this.setElementClass(_this.elm, RESIZE_ACTIVE_CLASS, true);\n\n        if (_this.enableGhostResize) {\n          currentResize.clonedNode = _this.elm.nativeElement.cloneNode(true);\n\n          _this.elm.nativeElement.parentElement.appendChild(currentResize.clonedNode);\n\n          _this.renderer.setStyle(_this.elm.nativeElement, 'visibility', 'hidden');\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'position', _this.ghostElementPositioning);\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'left', \"\".concat(currentResize.startingRect.left, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'top', \"\".concat(currentResize.startingRect.top, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'height', \"\".concat(currentResize.startingRect.height, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'width', \"\".concat(currentResize.startingRect.width, \"px\"));\n\n          _this.renderer.setStyle(currentResize.clonedNode, 'cursor', getResizeCursor(currentResize.edges, resizeCursors));\n\n          _this.renderer.addClass(currentResize.clonedNode, RESIZE_GHOST_ELEMENT_CLASS);\n\n          /** @type {?} */\n          currentResize.clonedNode.scrollTop =\n          /** @type {?} */\n          currentResize.startingRect.scrollTop;\n\n          /** @type {?} */\n          currentResize.clonedNode.scrollLeft =\n          /** @type {?} */\n          currentResize.startingRect.scrollLeft;\n        }\n\n        if (_this.resizeStart.observers.length > 0) {\n          _this.zone.run(function () {\n            _this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges: edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n      mouseup$.pipe(takeUntil(this.destroy$)).subscribe(function () {\n        if (currentResize) {\n          _this.renderer.removeClass(_this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n\n          _this.renderer.setStyle(document.body, 'cursor', '');\n\n          _this.renderer.setStyle(_this.elm.nativeElement, 'cursor', '');\n\n          if (_this.resizeEnd.observers.length > 0) {\n            _this.zone.run(function () {\n              _this.resizeEnd.emit({\n                edges: getEdgesDiff({\n                  edges:\n                  /** @type {?} */\n                  currentResize.edges,\n                  initialRectangle:\n                  /** @type {?} */\n                  currentResize.startingRect,\n                  newRectangle:\n                  /** @type {?} */\n                  currentResize.currentRect\n                }),\n                rectangle:\n                /** @type {?} */\n                currentResize.currentRect\n              });\n            });\n          }\n\n          removeGhostElement();\n          currentResize = null;\n        }\n      });\n    }\n    /**\n     * @hidden\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.resizeEdges) {\n        this.resizeEdges$.next(this.resizeEdges);\n      }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // browser check for angular universal, because it doesn't know what document is\n      if (isPlatformBrowser(this.platformId)) {\n        this.renderer.setStyle(document.body, 'cursor', '');\n      }\n\n      this.mousedown.complete();\n      this.mouseup.complete();\n      this.mousemove.complete();\n      this.resizeEdges$.complete();\n      this.destroy$.next();\n    }\n    /**\n     * @private\n     * @param {?} elm\n     * @param {?} name\n     * @param {?} add\n     * @return {?}\n     */\n\n  }, {\n    key: \"setElementClass\",\n    value: function setElementClass(elm, name, add) {\n      if (add) {\n        this.renderer.addClass(elm.nativeElement, name);\n      } else {\n        this.renderer.removeClass(elm.nativeElement, name);\n      }\n    }\n  }]);\n\n  return ResizableDirective;\n}();\n\nResizableDirective.Éµfac = function ResizableDirective_Factory(t) {\n  return new (t || ResizableDirective)(Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nResizableDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: ResizableDirective,\n  selectors: [[\"\", \"mwlResizable\", \"\"]],\n  inputs: {\n    resizeEdges: \"resizeEdges\",\n    enableGhostResize: \"enableGhostResize\",\n    resizeSnapGrid: \"resizeSnapGrid\",\n    resizeCursors: \"resizeCursors\",\n    resizeCursorPrecision: \"resizeCursorPrecision\",\n    ghostElementPositioning: \"ghostElementPositioning\",\n    allowNegativeResizes: \"allowNegativeResizes\",\n    mouseMoveThrottleMS: \"mouseMoveThrottleMS\",\n    validateResize: \"validateResize\"\n  },\n  outputs: {\n    resizeStart: \"resizeStart\",\n    resizing: \"resizing\",\n    resizeEnd: \"resizeEnd\"\n  },\n  exportAs: [\"mwlResizable\"],\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n/** @nocollapse */\n\nResizableDirective.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nResizableDirective.propDecorators = {\n  validateResize: [{\n    type: Input\n  }],\n  resizeEdges: [{\n    type: Input\n  }],\n  enableGhostResize: [{\n    type: Input\n  }],\n  resizeSnapGrid: [{\n    type: Input\n  }],\n  resizeCursors: [{\n    type: Input\n  }],\n  resizeCursorPrecision: [{\n    type: Input\n  }],\n  ghostElementPositioning: [{\n    type: Input\n  }],\n  allowNegativeResizes: [{\n    type: Input\n  }],\n  mouseMoveThrottleMS: [{\n    type: Input\n  }],\n  resizeStart: [{\n    type: Output\n  }],\n  resizing: [{\n    type: Output\n  }],\n  resizeEnd: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(ResizableDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[mwlResizable]',\n      exportAs: 'mwlResizable'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: Éµngcc0.Renderer2\n    }, {\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    resizeEdges: [{\n      type: Input\n    }],\n    enableGhostResize: [{\n      type: Input\n    }],\n    resizeSnapGrid: [{\n      type: Input\n    }],\n    resizeCursors: [{\n      type: Input\n    }],\n    resizeCursorPrecision: [{\n      type: Input\n    }],\n    ghostElementPositioning: [{\n      type: Input\n    }],\n    allowNegativeResizes: [{\n      type: Input\n    }],\n    mouseMoveThrottleMS: [{\n      type: Input\n    }],\n    resizeStart: [{\n      type: Output\n    }],\n    resizing: [{\n      type: Output\n    }],\n    resizeEnd: [{\n      type: Output\n    }],\n    validateResize: [{\n      type: Input\n    }]\n  });\n})();\n\nvar PointerEventListeners = /*#__PURE__*/function () {\n  /**\n   * @param {?} renderer\n   * @param {?} zone\n   */\n  function PointerEventListeners(renderer, zone) {\n    _classCallCheck(this, PointerEventListeners);\n\n    this.pointerDown = new Observable(function (observer) {\n      /** @type {?} */\n      var unsubscribeMouseDown;\n      /** @type {?} */\n\n      var unsubscribeTouchStart;\n      zone.runOutsideAngular(function () {\n        unsubscribeMouseDown = renderer.listen('document', 'mousedown', function (event) {\n          observer.next({\n            clientX: event.clientX,\n            clientY: event.clientY,\n            event: event\n          });\n        });\n\n        if (IS_TOUCH_DEVICE) {\n          unsubscribeTouchStart = renderer.listen('document', 'touchstart', function (event) {\n            observer.next({\n              clientX: event.touches[0].clientX,\n              clientY: event.touches[0].clientY,\n              event: event\n            });\n          });\n        }\n      });\n      return function () {\n        unsubscribeMouseDown();\n\n        if (IS_TOUCH_DEVICE) {\n          /** @type {?} */\n          unsubscribeTouchStart();\n        }\n      };\n    }).pipe(share());\n    this.pointerMove = new Observable(function (observer) {\n      /** @type {?} */\n      var unsubscribeMouseMove;\n      /** @type {?} */\n\n      var unsubscribeTouchMove;\n      zone.runOutsideAngular(function () {\n        unsubscribeMouseMove = renderer.listen('document', 'mousemove', function (event) {\n          observer.next({\n            clientX: event.clientX,\n            clientY: event.clientY,\n            event: event\n          });\n        });\n\n        if (IS_TOUCH_DEVICE) {\n          unsubscribeTouchMove = renderer.listen('document', 'touchmove', function (event) {\n            observer.next({\n              clientX: event.targetTouches[0].clientX,\n              clientY: event.targetTouches[0].clientY,\n              event: event\n            });\n          });\n        }\n      });\n      return function () {\n        unsubscribeMouseMove();\n\n        if (IS_TOUCH_DEVICE) {\n          /** @type {?} */\n          unsubscribeTouchMove();\n        }\n      };\n    }).pipe(share());\n    this.pointerUp = new Observable(function (observer) {\n      /** @type {?} */\n      var unsubscribeMouseUp;\n      /** @type {?} */\n\n      var unsubscribeTouchEnd;\n      /** @type {?} */\n\n      var unsubscribeTouchCancel;\n      zone.runOutsideAngular(function () {\n        unsubscribeMouseUp = renderer.listen('document', 'mouseup', function (event) {\n          observer.next({\n            clientX: event.clientX,\n            clientY: event.clientY,\n            event: event\n          });\n        });\n\n        if (IS_TOUCH_DEVICE) {\n          unsubscribeTouchEnd = renderer.listen('document', 'touchend', function (event) {\n            observer.next({\n              clientX: event.changedTouches[0].clientX,\n              clientY: event.changedTouches[0].clientY,\n              event: event\n            });\n          });\n          unsubscribeTouchCancel = renderer.listen('document', 'touchcancel', function (event) {\n            observer.next({\n              clientX: event.changedTouches[0].clientX,\n              clientY: event.changedTouches[0].clientY,\n              event: event\n            });\n          });\n        }\n      });\n      return function () {\n        unsubscribeMouseUp();\n\n        if (IS_TOUCH_DEVICE) {\n          /** @type {?} */\n          unsubscribeTouchEnd();\n\n          /** @type {?} */\n          unsubscribeTouchCancel();\n        }\n      };\n    }).pipe(share());\n  }\n\n  _createClass(PointerEventListeners, null, [{\n    key: \"getInstance\",\n    value: // tslint:disable-line\n\n    /**\n     * @param {?} renderer\n     * @param {?} zone\n     * @return {?}\n     */\n    function getInstance(renderer, zone) {\n      if (!PointerEventListeners.instance) {\n        PointerEventListeners.instance = new PointerEventListeners(renderer, zone);\n      }\n\n      return PointerEventListeners.instance;\n    }\n  }]);\n\n  return PointerEventListeners;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * <div mwlResizable>\n *   <div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * </div>\n * ```\n * Or in case they are sibling elements:\n * ```html\n * <div mwlResizable #resizableElement=\"mwlResizable\"></div>\n * <div mwlResizeHandle [resizableContainer]=\"resizableElement\" [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * ```\n */\n\n\nvar ResizeHandleDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} renderer\n   * @param {?} element\n   * @param {?} zone\n   * @param {?} resizableDirective\n   */\n  function ResizeHandleDirective(renderer, element, zone, resizableDirective) {\n    _classCallCheck(this, ResizeHandleDirective);\n\n    this.renderer = renderer;\n    this.element = element;\n    this.zone = zone;\n    this.resizableDirective = resizableDirective;\n    /**\n     * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n     */\n\n    this.resizeEdges = {};\n    this.eventListeners = {};\n    this.destroy$ = new Subject();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ResizeHandleDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this.zone.runOutsideAngular(function () {\n        _this2.listenOnTheHost('mousedown').subscribe(function (event) {\n          _this2.onMousedown(event, event.clientX, event.clientY);\n        });\n\n        _this2.listenOnTheHost('mouseup').subscribe(function (event) {\n          _this2.onMouseup(event.clientX, event.clientY);\n        });\n\n        if (IS_TOUCH_DEVICE) {\n          _this2.listenOnTheHost('touchstart').subscribe(function (event) {\n            _this2.onMousedown(event, event.touches[0].clientX, event.touches[0].clientY);\n          });\n\n          merge(_this2.listenOnTheHost('touchend'), _this2.listenOnTheHost('touchcancel')).subscribe(function (event) {\n            _this2.onMouseup(event.changedTouches[0].clientX, event.changedTouches[0].clientY);\n          });\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroy$.next();\n      this.unsubscribeEventListeners();\n    }\n    /**\n     * @hidden\n     * @param {?} event\n     * @param {?} clientX\n     * @param {?} clientY\n     * @return {?}\n     */\n\n  }, {\n    key: \"onMousedown\",\n    value: function onMousedown(event, clientX, clientY) {\n      var _this3 = this;\n\n      event.preventDefault();\n\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(this.element.nativeElement, 'touchmove', function (touchMoveEvent) {\n          _this3.onMousemove(touchMoveEvent, touchMoveEvent.targetTouches[0].clientX, touchMoveEvent.targetTouches[0].clientY);\n        });\n      }\n\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(this.element.nativeElement, 'mousemove', function (mouseMoveEvent) {\n          _this3.onMousemove(mouseMoveEvent, mouseMoveEvent.clientX, mouseMoveEvent.clientY);\n        });\n      }\n\n      this.resizable.mousedown.next({\n        clientX: clientX,\n        clientY: clientY,\n        edges: this.resizeEdges\n      });\n    }\n    /**\n     * @hidden\n     * @param {?} clientX\n     * @param {?} clientY\n     * @return {?}\n     */\n\n  }, {\n    key: \"onMouseup\",\n    value: function onMouseup(clientX, clientY) {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX: clientX,\n        clientY: clientY,\n        edges: this.resizeEdges\n      });\n    } // directive might be passed from DI or as an input\n\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"resizable\",\n    get: function get() {\n      return this.resizableDirective || this.resizableContainer;\n    }\n    /**\n     * @private\n     * @param {?} event\n     * @param {?} clientX\n     * @param {?} clientY\n     * @return {?}\n     */\n\n  }, {\n    key: \"onMousemove\",\n    value: function onMousemove(event, clientX, clientY) {\n      this.resizable.mousemove.next({\n        clientX: clientX,\n        clientY: clientY,\n        edges: this.resizeEdges,\n        event: event\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"unsubscribeEventListeners\",\n    value: function unsubscribeEventListeners() {\n      var _this4 = this;\n\n      Object.keys(this.eventListeners).forEach(function (type) {\n        /** @type {?} */\n        _this4.eventListeners[type]();\n\n        delete _this4.eventListeners[type];\n      });\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} eventName\n     * @return {?}\n     */\n\n  }, {\n    key: \"listenOnTheHost\",\n    value: function listenOnTheHost(eventName) {\n      return fromEvent(this.element.nativeElement, eventName).pipe(takeUntil(this.destroy$));\n    }\n  }]);\n\n  return ResizeHandleDirective;\n}();\n\nResizeHandleDirective.Éµfac = function ResizeHandleDirective_Factory(t) {\n  return new (t || ResizeHandleDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(ResizableDirective, 8));\n};\n\nResizeHandleDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: ResizeHandleDirective,\n  selectors: [[\"\", \"mwlResizeHandle\", \"\"]],\n  inputs: {\n    resizeEdges: \"resizeEdges\",\n    resizableContainer: \"resizableContainer\"\n  }\n});\n/** @nocollapse */\n\nResizeHandleDirective.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: ResizableDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nResizeHandleDirective.propDecorators = {\n  resizeEdges: [{\n    type: Input\n  }],\n  resizableContainer: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(ResizeHandleDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[mwlResizeHandle]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.Renderer2\n    }, {\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }, {\n      type: ResizableDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    resizeEdges: [{\n      type: Input\n    }],\n    resizableContainer: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ResizableModule = function ResizableModule() {\n  _classCallCheck(this, ResizableModule);\n};\n\nResizableModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: ResizableModule\n});\nResizableModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function ResizableModule_Factory(t) {\n    return new (t || ResizableModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(ResizableModule, {\n    declarations: [ResizableDirective, ResizeHandleDirective],\n    exports: [ResizableDirective, ResizeHandleDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(ResizableModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ResizableDirective, ResizeHandleDirective],\n      exports: [ResizableDirective, ResizeHandleDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ResizableDirective, ResizeHandleDirective, ResizableModule };","map":{"version":3,"sources":["angular-resizable-element/is-touch-device.ts","angular-resizable-element/resizable.directive.ts","angular-resizable-element/resize-handle.directive.ts","angular-resizable-element/resizable.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAGA,OAAa,KAAA,MAAb,MAAwC,eAAxC;;AAAA,IAAa,eAAe,GAAa,YAAA;AACzC;AACE,MACE,OADe,MACf,KADoB,WAAtB,EAAmC;AACjC,WAAO,KAAP;AACD,GAFD,MAEO;AACL,WACE,kBAAkB,MAAlB,IACA,SAAS,CAAC,cAAV,GAA2B,CAD3B,IAEA,SAAS,CAAC,gBAAV,GAA6B,CAH/B;AAKD;AACF,CAXuC,EAAxC;AAYC;AAAI;AAAkC;AAAqG;;ACf5I;AAAI;AAED;AACQ;AAGT;AACM;;;AA0CN,SAHO,eAGP,CAFA,MAEA,EADA,MACA,EAEqB;AAAA,MAFrB,SAEqB,uEAFD,CAEC;;AAAK;AAAoB,MAAxC,IACC,GADc,IACP,CADY,GAAL,CAAS,MAAM,GAAG,MAAlB,CAAyB;AAC9C,SAAO,IAAI,GAAG,SAAd;AACD;AACD;AACG;AAA2B;AACd;AADP;AAAuB;AAI3B;;;AAJL,SAAS,uBAAT,CACE,YADF,EAEE,KAFF,EAGE,OAHF,EAIE,OAJF,EAIiB;AACd;AAEM,MADD,eAAe,GAEnB;AADA,IAAA,GAAG,EAAE,YACsB,CADT,GAClB;AACI,IAAA,MADE,EAAE,YAAY,CAAC,MAArB;AACA,IAAA,IAAI,EAAE,YAAY,CAAC,IADnB;AAKE,IAAA,KAAK,EAHA,YAAY,CAAC;AAFpB,GADK;;AAOW,MADd,KAAK,CAAC,GACQ,EAAe;AAA/B,IAAA,eAAe,CAAC,GAAhB,IAAuB,OAAvB;AACD;;AACD,MAAI,KACoB,CADd,MAAV,EAAkB;AAChB,IAAA,eAAe,CAAC,MAAhB,IAA0B,OAA1B;AACD;;AAEgB,MADb,KACsB,CADhB,IACO,EAAgB;AAA/B,IAAA,eAAe,CAAC,IAAhB,IAAwB,OAAxB;AACD;;AACD,MAAI,KAAK,CAAC,KAAV,EAAiB;AACf,IAAA,eAAe,CAAC,KAAhB,IAAgC,OAAhC;AACD;;AACwC,EAAA,eAA1B,CAAC,MAAyB,GAAyB,eAA1B,CAAC,MAAyB,GAClD,eADiD,CAAC,GAAzB;AACzC,EAAA,eAAe,CAAC,KAAhB,GAAwB,eAAe,CAAM,KAArB,GAAwB,eAAe,CAAC,IAAhE;AAEA,SAAO,eAAP;AACD;AACD;AACG;AAAH;AAAuB;AAEO;;;AAF9B,SAAS,cAAT,CACE,OADF,EAEE,uBAFF,EAIgB;AAAI;AAAnB,MAAK,UAAU,GAAG,CAAlB;AACmB;;AAAC,MAAf,UAAU,GAAG,CAAE;AACrB;;AAA2C,MAAnC,KAAK,GAAG,OAAO,CAAC,aAAR,CAAsB,KAAK;AAC3C;;AACI,MADI,mBAAmB,GAAG,CAC1B,WAD0B,EAEX,eAFW,EAG1B,gBAH0B,EAI1B,cAJ0B,CAC1B;AAKgB;;AAAmB,MAClC,SADY,GACA,mBAAmB,CAA/B,GAAY,CAAR,UAAA,QAAQ;AAAA,WACG,KADM,CAAS,QAAT,CAAT;AAAA,GAAA,EACR,IADQ,CACP,UAAA,KAAK;AAAA,WACc,CADT,CAAC,KAAN;AAAA,GADE,CADsB;;AAGrC,MAAI,SAAS,IAAI,SAAS,CAAC,QAAV,CAAmB,WAAnB,CAAjB,EAEI;AADF,IAAA,UAAU,GAAG,SAAS,CAAC,OAAV,CACX,+CADW,EAEX,IAFW,CAAb;AAIA,IAAA,UAAU,GAAG,SAAS,CAAC,OAAV,CACX,+CADW,EAEX,IAFW,CAAb;AAID;;AAED,MAAI,uBAAuB,KAAK,UAAhC,EAA4C;AAC1C,WAAO;AACL,MAAA,MAAM,EAAE,OACR,CADgB,aAAR,CAAkC,YADrC;AAEL,MAAA,KAAK,EAAE,OAAO,CAAC,aAAR,CAAsB,WAFxB;AAGL,MAAA,GAAG,EAAE,OAAO,CAAC,aAAR,CAAsB,SAAtB,GAAkC,UAHlC;AAIL,MAAA,MAAM,EACJ,OAAO,CAAC,aAAR,CAAsB,YAAtB,GACA,OAAO,CAAC,aAAR,CAAsB,SADtB,GAEA,UAPG;AAQoC,MAAA,IAArC,EAAE,OAAO,CAAC,aAAR,CAAsB,UAAtB,GAAmC,UARpC;AASL,MAAA,KAAK,EACH,OAAO,CAAC,aAAR,CAAsB,WAAtB,GACA,OAAO,CAAC,aAAR,CAAsB,UADtB,GAEA;AAZG,KAAP;AAcD,GAfD,MAgBQ;AAAV;AAAyB,QAAf,YAAY,GAAsB,OAAO,CAAC,aAAR,CAAsB,qBAAtB,EAAnB;AAEC,WAAO;AAC3B,MAAA,MADM,EAAE,YACY,CADC,MAAM;AAC3B,MAAA,KAAK,EAAE,YACc,CADD,KADO;AAE3B,MAAA,GAAG,EAAE,YAAY,CAAC,GAAb,GAAmB,UAFG;AAG3B,MAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,UAHH;AAI3B,MAAA,IAAI,EAAE,YAAY,CAAC,IAAb,GAAoB,UAJC;AAK3B,MAAA,KAAK,EAAE,YAAY,CAAM,KAAlB,GAAqB,UALD;AAM3B,MAAA,SAAS,EAAE,OAAO,CAAC,aAAR,CAAsB,SANN;AAO3B,MAAA,UAAU,EAAE,OAAO,CAAc,aAArB,CAAsB;AAPP,KAAP;AASvB;AACF;AAED;AAAG;AAAkB;AACd;;;AADP,SAAS,iBAAT,OAMC;AAAA,MALQ,OAKR,QALQ,OAKR;AAAA,MAJC,IAID,QAJC,IAID;AAC0C,SAAlC,OACR,IADmB,IAAI,CAAC,GAAhB,IAAuB,OAAO,IAAI,IAAI,CAAC,MAAL;AAC1C;AAED;AAAG;AAAkB;AACd;;;AADP,SAAS,iBAAT,QAMC;AAAA,MALQ,OAKR,SALQ,OAKR;AAAA,MAJK,IAIL,SAJK,IAIL;AACC,SAAO,OACR,IADmB,IAAI,CAAC,IAAhB,IAAwB,OAAO,IAAI,IAAI,CAAC,KAA/C;AACD;AAED;AAAG;AAAkB;AACX;;;AADV,SAAS,cAAT,QAYC;AAAA,MAXC,OAWD,SAXC,OAWD;AAAA,MAVC,OAUD,SAVC,OAUD;AAAA,MATC,GASD,SATC,GASD;AAAA,MARC,YAQD,SARC,YAQD;AAAA,MAPC,eAOD,SAPC,eAOD;;AACiC;AAAkB,MAA5C,WAAW,GAAwD,GAAtC,CAAC,aAAqC,CAAvB,qBAAuB,EAAvB;AAC3B;;AAGR,MAHT,KAAK,GAAY,EAGR;;AADf,MACE,YAAY,CAAK,IAAjB,IACyC,eAA1B,CAAC,OAAD,EAAU,WAAW,CAAC,IAAtB,EAA4B,eAA5B,CADf,IAEA,iBAAiB,CAAC;AAElB,IAAA,OAF2B,EAE3B,OAFkB;AAAW,IAAA,IAEhB,EAFsB;AAAjB,GAAD,CAHnB,EAIE;AACA,IAAA,KAIa,CAJP,IAAN,GAAa,IAAb;AACD;;AAED,MACE,YACuB,CADV,KAAb,IACA,eAAe,CAAC,OAAD,EAAU,WAAW,CAAC,KAAtB,EAA6B,eAA7B,CADf,IAEA,iBAAiB,CAAC;AAElB,IAAA,OAF2B,EAE3B,OAFkB;AAAW,IAAA,IAAI,EAAE;AAAjB,GAAD,CAHnB,EAIE;AACA,IAAA,KAIY,CAJD,KAAX,GAAc,IAAd;AACD;;AAED,MACE,YACyB,CADZ,GAAb,IACA,eAAe,CAAQ,OAAR,EAAU,WAAW,CAAC,GAAtB,EAA2B,eAA3B,CADf,IAEA,iBAAiB,CAAC;AAElB,IAAA,OAF2B,EAE3B,OAFkB;AAET,IAAA,IAFwB,EAAE;AAAjB,GAAD,CAHnB,EAIE;AACA,IAAA,KAAK,CAAC,GAAN,GAAY,IAAZ;AACD;;AAED,MACE,YAAY,CAAO,MAAnB,IACA,eAAe,CAAC,OAAD,EAAU,WAAW,CAAC,MAAtB,EAA8B,eAA9B,CADf,IAEA,iBAAiB,CAAC;AAElB,IAAA,OAF2B,EAE3B,OAFkB;AAAW,IAAA,IAAI,EAAa;AAA5B,GAAD,CAHnB,EAQA;AAHE,IAAA,KAIH,CAJS,MAAN,GAAe,IAAf;AACD;;AAED,SAAO,KAAP;AACD;AACD;;;AACgB,IASV,sBAAsB,GAAkB,MAAM,CAAC,MAAP,CAAc;AAC1D,EAAA,OAAO,EAAE,WADiD;AAE1D,EAAA,QAAQ,EAAE,WAFgD;AAG1D,EAAA,UAAU,EAAa,WAHmC;AAK/C,EAAA,WADA,EAAE,WAJ6C;AAK1D,EAAA,WAAW,EAAE,YAL6C;AAM1D,EAAA,WAAW,EAAE;AAN6C,CAAd,CAT9B;AAiBhB;AACG;AAAM;AAAe;AAAoC;;AAA5D,SAAS,eAAT,CAAyB,KAAzB,EAAuC,OAAvC,EAA6D;AAC3D,MAAI,KAAK,CAAC,IAAN,IAAc,KAAK,CAAC,GAAxB,EAA6B;AAC3B,WACc,OADA,CAAC,OAAf;AACD,GAFD,MAEO,IAAI,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,GAAzB,EAA8B;AACnC,WAAO,OAAO,CAAC,QAAf;AACD,GAFM,MAEA,IAAI,KAAK,CAAC,IAAN,IAAc,KAAK,CAAC,MAAxB,EAAgC;AACrC,WAAO,OAAO,CAAC,UAAf;AACoC,GAF/B,MAEA,IAAI,KACF,CADQ,KAAN,IAAe,KAAK,CAAC,MAAzB,EAAiC;AACtC,WAAO,OAAO,CAAC,WAAf;AACoC,GAF/B,MAGL,IADS,KAAK,CAAC,IAAN,IAAc,KAAK,CAAC,KAC7B,EADoC;AACpC,WAAO,OAAO,CAAY,WAA1B;AACoC,GADpC,MAEA,IADS,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,MAC5B,EADoC;AACpC,WAAO,OAAO,CAAC,WAAf;AACD,GADC,MACK;AACL,WAAO,EAAP;AACD;AACF;AAED;AAAG;AAAmB;AAEnB;;;AAFH,SAAS,YAAT,QAQC;AAAA,MAPC,KAOD,SAPC,KAOD;AAAA,MANC,gBAMD,SANC,gBAMD;AAAA,MALC,YAKD,SALC,YAKD;;AAC4B;AACf,MADN,SAAS,GAAU,EACb;AAAZ,EAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAA0B,OAA1B,CAA2B,UAAA,IAAI,EACE;AAAU,IAAA,SAAhC,CAAC,IAAD,CAAgC,GAAvB,CAAC,YAAY,CAAK,IAAL,CAAZ,IAAuB,CAAxB,KAA6B,gBAAgB,CAAK,IAAL,CAAhB,IAA0B,CAAvD,CAAuB;AAC1C,GAFD;AAGA,SAAO,SAAP;AACD;AACD;;;AACgB,IAAV,mBAAmB,GAAW,eAApB;AAChB;;AAAiB,IAAX,uBAAuB,GAAW,mBAAvB;AACjB;;AAAiB,IAAX,wBAAwB,GAAW,oBAAxB;AACjB;;AAAiB,IAAX,sBAAsB,GAAW,kBAAtB;AACjB;;AAAiB,IAAX,yBAAyB,GAAW,qBAAzB;AACjB;;AAAiB,IAAX,0BAA0B,GAAiC,sBAAhD;AACjB;;AACA,IAAa,sBAAsB,GAAW,EAA9C;AACA;AACG;AAC2D;AAC5D;AACQ;AACH;AACU;AACsD;AACvC;AACvB;AACH;AACkC;AAC9B;AACkD;AACsD;AAC5G;;IAMO,kB;AAAqB;AAAQ;AAAe;AAEnD;AAA2B;AAAsB;AAAuB;AAoG5E,8BAC+B,UAD/B,EAC+B,QAD/B,EAGS,GAHT,EACyC,IADzC,EAIsB;AAAA;;AAHS,SAAA,UAAA,GAAA,UAAA;AACrB,SAAQ,QAAR,GAAA,QAAA;AAEY,SADV,GACU,GADb,GACa;AAAZ,SAAA,IAAA,GAAA,IAAA;AACZ;AACM;AAlGK;AAAwB;;AAAxB,SAAA,WAAA,GAAqB,EAArB;AACX;AAEK;AAEA;;AAAM,SAAA,iBAAA,GAA6B,KAA7B;AACX;AAEK;AAEC;AAAW;AAEA;;AAAN,SAAA,cAAA,GAAwB,EAAxB;AACX;AAEK;AAEqC;;AAA/B,SAAa,aAAb,GAA+B,sBAA/B;AACX;AAEK;AACM;AAEA;;AAAA,SAAA,qBAAA,GAAgC,CAAhC;AACX;AAEK;AAEA;;AAAM,SAAA,uBAAA,GAAgD,OAAhD;AACX;AAEK;AAEA;;AAAM,SAAA,oBAAA,GAAgC,KAAhC;AACX;AAEK;AAEA;;AAAM,SAAA,mBAAA,GAA8B,sBAA9B;AACX;AAEK;AAEA;;AAAO,SAAA,WAAA,GAAc,IAAI,YAAJ,EAAd;AACZ;AAEK;AAEA;;AAAO,SAAA,QAAA,GAAW,IAAI,YAAJ,EAAX;AACZ;AAEK;AAEuB;;AAAhB,SAAA,SAAA,GAAY,IAAI,YAAJ,EAAZ;AACZ;AAEK;AAEA;;AAAI,SAAA,OAAA,GAAU,IAAI,OAAJ,EAAV;AAKT;AAEK;AAEoB;;AAAhB,SAAA,SAAA,GAAY,IAAI,OAAJ,EAAZ;AAKT;AAEK;AAEoB;;AAAhB,SAAA,SAAA,GAAY,IAAI,OAAJ,EAAZ;AASC,SAAA,QAAA,GAAW,IAAI,OAAJ,EAAX;AAEA,SAAY,YAAZ,GAAe,IAAI,OAAJ,EAAf;AAWN,SAAK,qBAAL,GAA6B,qBAAqB,CAAC,WAAtB,CAC3B,QAD2B,EAE3B,IAF2B,CAA7B;AAID;AACH;AAEC;AACE;AACa;;;;;WAAd,oBACQ;AAAA;;AAAU;AAAD,UAAT,UAAU,GAIX,KAA8C,CAAxC,KAAK,qBAAL,CAA2B,WAAa,EAAA,KAAK,SAAL,CAJpC;AAMC;;AAAI,UAAd,UAAU,GAAG,KAEjB,CADA,KAAK,qBAAL,CAAsC,WACtC,EAAA,KAAK,SAAL,CAFiB,CAGjB,IAHiB,CAIjB,GAAG,CAAC,iBAAU;AAAA,YAAP,KAAO,SAAP,KAAO;;AAEN,YADF,aACE,EADa;AACjB,cAAI;AAEH,YAAA,KADM,CAAC,cACP;AAAA,WAFD,CAEE,OAAO,CAAP,EAAU,CACtB;AACQ;AACG;AACF;AACF,OATE,CAJc,EAcjB,KAAK,EAdY,CAAC;AAiBN;;AAAM,UAAd,QAAQ,GAAG,KAAK,CAAC,KAAK,qBAAL,CAA2B,SAA5B,EAAuC,KAAK,OAA5C,CAAF;AACxB;;AACwB,UAAhB,aAAgB;AAMxB;;AACwB,UAClB,kBADsB,GACD,SAArB,kBAAqB,GAAA;AAArB,YAA6C,aAA5B,IAAI,aAAa,CAAC,UAAnC,EACyB;AAAvB,UAAA,KAAI,CAAC,GAAL,CAAS,aAAT,CAAuB,aAAvB,CAAqC,WAArC,CACE,aAAa,CAAC,UADhB;;AAGA,UAAA,KAA6C,CAAxC,QAAL,CAAc,QAAd,CAAuB,KAAI,CAAC,GAAL,CAAS,aAAhC,EAA+C,YAA/C,EAA6D,SAA7D;AACD;AAGG,OATc;AAQxB;;;AACwB,UAAd,gBAAgB,GAAG,SAAnB,gBAAmB,GAElB;AADL,eAC2B,MACjB,CAAA,MADiB,CACjB,EADiB,EAAtB,sBAAsB,EACtB,KAIF,CAJO,aADiB,CAD3B;AAOC,OARiB;;AAOpB,WAAiB,YAAjB,CACG,IADH,CAEI,SAAS,CAAC,KAAK,WAAN,CAFb,EAGI,GAAG,CAAC,YAEgB;AADlB,eACE,KAAI,CAAC,WAAL,IACA,MAAM,CAAC,IAAP,CAAY,KAAI,CAAC,WAAjB,EAA8B,IAA9B,CAAmC,UAAA,IAEtC;AAAA,iBAF8C,CAAC,CAAC,KAAI,CAAC,WAAL,CAAiB,IAAjB,CAEhD;AAAA,SAFG,CAFF;AAIA,OALC,CAHP,EASI,SAAS,CAAC,UAAA,wBAC6B;AAAA,eAArC,wBAAwB,GAAG,UAAH,GAAgB,KAAH;AAAA,OAD9B,CATb,EAYI,SAAS,CAAK,KAAC,mBAAN,CAZb,EAaI,SAEU,CAFA,KAAK,QAEL,CAfd,EAeG,SAfH,CAea,iBAAqB;AAAA,YAAlB,OAAkB,SAAlB,OAAkB;AAAA,YAAT,OAAS,SAAT,OAAS;;AACxB;AAAoC,YAApC,WAAW,GAAU,cAAc,CAAC;AACxC,UAAA,OAAO,EAAP,OADwC;AAExC,UAAA,OAAO,EAAP,OAFwC;AAGxC,UAAA,GAAG,EAAE,KACc,CADT,GAH8B;AAIxC,UAAA,YAAY,EAAE,KAAI,CAAC,WAJqB;AAKxC,UAAA,eAAe,EACf,KADqB,CAAC;AALkB,SAAD,CAAC;AAOpC;;AAAkC,YAAlC,aAAa,GAAG,gBAAgB,EAAE;;AACxC,YAAI,CAAC,aAAL,EAAoB;AACZ;AAAyB,cAAzB,MAAM,GAAG,eAAe,CAAC,WAAD,EAAc,aAAd,CAAC;;AAC/B,UAAA,KAA6C,CAAxC,QAAL,CAAsB,QAAtB,CAAgE,KAArC,CAAC,GAAoC,CAAhC,aAAhC,EAA+C,QAA/C,EAAyD,MAAzD;AACD;;AACD,QAAA,KAAI,CAAC,eAAL,CACE,KAAI,CAAI,GADV,EAEyB,uBAFzB,EAGE,WAAW,CAAC,IAAZ,KAAqB,IAHvB;;AAKA,QAAA,KAAI,CAAC,eAAL,CACE,KAAI,CAAC,GADP,EAEE,wBAFF,EAKA,WAFa,CAAC,KAEd,KAFwB,IAHxB;;AAKA,QAAA,KAAI,CAAC,eAAL,CACE,KAEW,CAFH,GADV,EAEE,sBAFF,EAGE,WAAW,CAAC,GAAZ,KAAoB,IAHtB;;AAKA,QAAA,KAAI,CAAC,eAAL,CACE,KAAI,CAAC,GADP,EAEE,yBAFF,EAKC,WAFY,CAAC,MAEb,KAFwB,IAHzB;AAKD,OAhDH;AAkDe;;AAAK,UAEhB,SAAS,GAFsB,UAAU,CAC1C,IADgC,CAE/B,QAAQ,CAAC,UAAA,WAAW,EAAA;AAC5B;AAAgB;AAAN;AAAgB;AAAhB,iBAAS,OAAT,CAAiB,UAAjB,EAAiE;AAC/D,iBACqB;AAAsB,YAAA,OAAlC,EAAE,UAAU,CAAC,OAAX,GACT,WADyC,CAAC,OAAvB;AACsB,YAAA,OAAlC,EAAE,UAAU,CAAC,OAAX,GAAqB,WAEjC,CAF6C;AADvB,WADrB;AAID;AAEK;;;AAAY,YAAZ,WAAW,GAAG,SAAd,WAAc,GAAA;AACZ;AAAqC,cAArC,QAAQ,GAAe;AAAE,YAAA,CAAC,EAAE,CAAL;AAEZ,YAAA,CAFqB,EAAE;AAAX,WAAc;;AAGzC,cADe,aACf,EADiB;AACjB,gBAA6C,KAArC,CAAC,cAAoC,CAArB,IAAqB,IAAb,aAAa,CAAC,KAAd,CAAwB,IAAxD,EAA0D;AACxD,cAAA,QAAQ,CAAC,CAAT,GAAa,CAAC,KAAI,CAAC,cAAL,CAAoB,IAAlC;AACD,aAFD,MAEO,IACL,KAAI,CAAC,cAAL,CAAoB,KAApB,IACA,aAAa,CAAC,KAAd,CAAyB,KAFpB,EAGL;AACA,cAAA,QAAQ,CAAC,CAAT,GAAa,CAAC,KAAI,CAAC,cAAL,CAAoB,KAAlC;AACD;;AAED,gBAA6C,KAArC,CAAe,cAAsB,CAArB,GAAqB,IAAd,aAAa,CAAC,KAAd,CAAuB,GAAtD,EAAwD;AACtD,cAAA,QAAQ,CAAC,CAAT,GAAa,CAAC,KAAI,CAAe,cAAnB,CAAoB,GAAlC;AACD,aAFD,MAEO,IACL,KAAI,CAAC,cAAL,CAAoB,MAApB,IACA,aAEA,CAFc,KAAd,CAAoB,MAFf,EAGL;AACyC,cAAA,QAAjC,CAAC,CAAgC,GAA5B,CAAC,KAAI,CAAC,cAAL,CAAoB,MAAO;AAC1C;AACF;;AAED,iBAAO,QAAP;AACD,SAxBiB;AAyB5B;AACe;AACK;AADV;AAAgB;;;AAAhB,iBAAS,OAAT,CACE,MADF,EAEE,QAFF,EAEsB;AAGN,iBAAO;AAAsB,YAAA,CAAxC,EAAE,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,OAAP,GACL,QAD8B,CAAC,CAApC,CAAgB;AACsB,YAAA,CAAxC,EAAE,IAAI,CAAC,IAAL,CAAU,MACb,CADoB,OAAP,GAAiB,QAAQ,CAAC,CAApC;AADgB,WAAP;AAGf;;AAED,eACiB;AAAC;AADV,UAAA,KACkC,CAAxC,UAAU,CAAC,IAAX,CAAgB,IAAI,CAAC,CAAD,CAApB,EAAyB,IAAzB,CAA8B,GACd,CADkB,UAAA,MAAM;AAAA,mBACb,GADoB,MACpB,CADa;AAAA,WACxB,CADhB,CAAwC,EACxC,UAAU,CAAC,IAAX,CAQK,QARmB,EAAxB,CADwC,CAAzB,CAQd,IARc,CASb,GAAG,CAAC,iBAA4B;AAAA;AAAA,gBAA1B,cAA0B;AAAA,gBAAV,SAAU;;AAC9B,mBAAO,CACL,cAAc,GAAG,OAAO,CAAC,cAAD,CAAV,GAA6B,cADtC,EAEL,OAAO,CAAC,SAAD,CAFF,CAAP;AAID,WALE,CATU,EAgBd,IAhBc,CAiBb,MAAM,CAAC,iBACgB;AAAA;AAAA,gBADd,cACc;AAAA,gBADE,SACF;;AAArB,gBAAI,CAAC,cAAL,EAAqB;AACnB,qBAAO,IAAP;AACD;AAEK;;;AAAoC,gBAApC,QAAQ,GAAe,WAAW,EAAE;AACpC;;AACJ,gBADI,YAAY,GAAe,OAAO,CACtC,cADsC,EAEtC,QAFsC,CACtC;AAGI;;AAAyC,gBAAzC,OAAO,GAAe,OAAO,CAAC,SAAD,EAAY,QAAZ,CAAY;AAE/C,mBACE,YAAY,CAAC,CAAb,KAA4D,OAAlC,CAAC,CAA3B,IAAgC,YAAY,CAAC,CAAb,KAAmB,OAAO,CAAE,CAD9D;AAGD,WAfK,CAjBO,EAkCd,IAlCc,CAmCb,GAAG,CAAC,kBAAc;AAAA;AAAA,gBAAV,SAAU;;AACV;AAAoC,gBAApC,QACC,GADsB,WAAW,EAAE;AAC1C,mBAEc;AADZ,cAAA,OACyC,EAAE,IAAI,CAAxC,KAAoC,CAA9B,SAAS,CAAC,OAAV,GAAoB,QAAQ,CAAC,CAAC,IAEzC,QAFqD,CAAC,CAA5C;AACZ,cAAA,OACyC,EAAE,IAAI,CAAxC,KAAoC,CAA9B,SAAS,CAAC,OAAV,GAAoB,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC;AAF5C,aAFd;AAMA,WARC,CAnCU,EA6CV,IA7CU,CA6CT,SACT,CAAC,KADuB,CAAC,QAAD,EAAW,UAAX,CACxB,CA9CkB;AADjB;AA+CD,OA3FO,CAFuB,EA+FhC,IA/FgC,CA+F3B,MAAM,CAAC;AAAA,eAAM,CAAC,CAAC,aAAR;AAAA,OAAD,CA/FqB,CAAf;AAiGpB,MAAA,SAAS,CACN,IADH,CAEI,GACE,CADE,kBAAqB;AAAA,YAAlB,OAAkB,UAAlB,OAAkB;AAAA,YAAT,OAAS,UAAT,OAAS;AACvB,eAAO,uBAAuB;AAC5B;AAAA,QAAA,aAAA,CAAe,YADa;AAG5B;AADa,QAAA,aAAb,CAAe,KAFa,EAG5B,OAH4B,EAI5B,OAJ4B,CAA9B;AAMD,OANC,CAHN,EAWG,IAXH,CAYI,MAAM,CAAC,UAAC,eAAD,EAAmC;AACxC,eACE,KACA,CADyB,oBAAzB,IACA,CAAC,EACC,eAAe,CAAC,MAAhB,IACA,eAAe,CAAC,KADhB,IAEA,eAAe,CAAC,MAAhB,GAA0B,CAF1B,IAGA,eAAe,CAAC,KAAhB,GAAyB,CAJ1B,CAFH;AASD,OAVK,CAZV,EAwBG,IAxBH,CAyBI,MAAM,CAAC,UAAmC,eAAnC,EACqB;AAA1B,eAAO,KAAI,CAAC,cAAL,GACH,KAAI,CAAC,cAAL,CAAoB;AACQ,UAAA,SAC1B,EAAA,eAFkB;AAElB,UAAA,KAAK,EAAE,YAAY,CAAC;AAClB,YAAA,KAAK;AAAE;AAAA,YAAA,aAAA,CAAe,KADJ;AAElB,YAAA,gBAAgB;AAAE;AAAA,YAAA,aAAA,CAAe,YAFf;AAGlB,YAAA,YAAY,EAAE;AAHI,WAAD;AAFD,SAApB,CADG,GASH,IATJ;AAUD,OAXK,CAzBV,EAqCI,SAAS,CAAC,KAAK,QAAN,CArCb,EAuCG,SAvCH,CAuCa,UAAC,eAAD,EAAmC;AAC5C,YAAI,aAAa,IAAI,aAAa,CAAC,UAAnC,EAA+C;AAC7C,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,QAFF,YAGK,eAAe,CAAC,MAHrB;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,OAFF,YAGK,eAAe,CAAC,KAHrB;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,KAFF,YAGK,eAAe,CAAC,GAHrB;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,MAFF,YAGK,eAAe,CAAC,IAHrB;AAKD;;AAED,YAAI,KAAI,CAAC,QAAL,CAAc,SAAd,CAAwB,MAAxB,GAAiC,CAArC,EAAwC;AACtC,UAAA,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,YAAA;AACZ,YAAA,KAAI,CAAC,QAAL,CAAc,IAAd,CAAmB;AACjB,cAAA,KAAK,EAAE,YAAY,CAAC;AAClB,gBAAA,KAAK;AAAE;AAAA,gBAAA,aAAA,CAAe,KADJ;AAElB,gBAAA,gBAAgB;AAAE;AAAA,gBAAA,aAAA,CAAe,YAFf;AAGlB,gBAAA,YAAY,EAAE;AAHI,eAAD,CADF;AAMjB,cAAA,SAAS,EAAE;AANM,aAAnB;AAQD,WATD;AAUD;;AACD;AAAA,QAAA,aAAA,CAAe,WAAf,GAA6B,eAA7B;AACD,OA5EH;AA8EA,MAAA,UAAU,CACP,IADH,CAEI,GAAG,CAAC,kBAA4B;AAAA,YAAzB,OAAyB,UAAzB,OAAyB;AAAA,YAAhB,OAAgB,UAAhB,OAAgB;AAAA,YAAP,KAAO,UAAP,KAAO;AAC9B,eACE,KAAK,IACL,cAAc,CAAC;AACb,UAAA,OAAO,EAAP,OADa;AAEb,UAAA,OAAO,EAAP,OAFa;AAGb,UAAA,GAAG,EAAE,KAAI,CAAC,GAHG;AAIb,UAAA,YAAY,EAAE,KAAI,CAAC,WAJN;AAKb,UAAA,eAAe,EAAE,KAAI,CAAC;AALT,SAAD,CAFhB;AAUD,OAXE,CAFP,EAeG,IAfH,CAgBI,MAAM,CAAC,UAAC,KAAD,EAAa;AAClB,eAAO,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,MAAnB,GAA4B,CAAnC;AACD,OAFK,CAhBV,EAmBI,SAAS,CAAC,KAAK,QAAN,CAnBb,EAqBG,SArBH,CAqBa,UAAC,KAAD,EAAa;AACtB,YAAI,aAAJ,EAAmB;AACjB,UAAA,kBAAkB;AACnB;AACT;;;AAA6B,YAAf,YAAY,GAAsB,cAAc,CACpD,KAAI,CAAC,GAD+C,EAEpD,KAAI,CAAC,uBAF+C,CAAjC;AAIrB,QAAA,aAAa,GAAG;AACd,UAAA,KAAK,EAAL,KADc;AAEd,UAAA,YAAY,EAAZ,YAFc;AAGd,UAAA,WAAW,EAAE;AAHC,SAAhB;AAKR;;AAA6B,YAAf,aAAa,GAAG,gBAAgB,EAAjB;AAC7B;;AAA6B,YAAf,MAAM,GAAG,eAAe,CAAC,aAAa,CAAC,KAAf,EAAsB,aAAtB,CAAT;;AACrB,QAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CAAuB,QAAQ,CAAC,IAAhC,EAAsC,QAAtC,EAAgD,MAAhD;;AACA,QAAA,KAAI,CAAC,eAAL,CAAqB,KAAI,CAAC,GAA1B,EAA+B,mBAA/B,EAAoD,IAApD;;AACA,YAAI,KAAI,CAAC,iBAAT,EAA4B;AAC1B,UAAA,aAAa,CAAC,UAAd,GAA2B,KAAI,CAAC,GAAL,CAAS,aAAT,CAAuB,SAAvB,CAAiC,IAAjC,CAA3B;;AACA,UAAA,KAAI,CAAC,GAAL,CAAS,aAAT,CAAuB,aAAvB,CAAqC,WAArC,CACE,aAAa,CAAC,UADhB;;AAGA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,KAAI,CAAC,GAAL,CAAS,aADX,EAEE,YAFF,EAGE,QAHF;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,UAFF,EAGE,KAAI,CAAC,uBAHP;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,MAFF,YAGK,aAAa,CAAC,YAAd,CAA2B,IAHhC;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,KAFF,YAGK,aAAa,CAAC,YAAd,CAA2B,GAHhC;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,QAFF,YAGK,aAAa,CAAC,YAAd,CAA2B,MAHhC;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,OAFF,YAGK,aAAa,CAAC,YAAd,CAA2B,KAHhC;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,QAFF,EAGE,eAAe,CAAC,aAAa,CAAC,KAAf,EAAsB,aAAtB,CAHjB;;AAKA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CACE,aAAa,CAAC,UADhB,EAEE,0BAFF;;AAIA;AAAA,UAAA,aAAa,CAAC,UAAd,CAA0B,SAA1B;AAAmC;AAAG,UAAA,aAAa,CAAC,YAAd,CACnC,SADH;;AAEA;AAAA,UAAA,aAAa,CAAC,UAAd,CAA0B,UAA1B;AAAoC;AAAG,UAAA,aAAa,CAAC,YAAd,CACpC,UADH;AAED;;AACD,YAAI,KAAI,CAAC,WAAL,CAAiB,SAAjB,CAA2B,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,UAAA,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,YAAA;AACZ,YAAA,KAAI,CAAC,WAAL,CAAiB,IAAjB,CAAsB;AACpB,cAAA,KAAK,EAAE,YAAY,CAAC;AAClB,gBAAA,KAAK,EAAL,KADkB;AAElB,gBAAA,gBAAgB,EAAE,YAFA;AAGlB,gBAAA,YAAY,EAAE;AAHI,eAAD,CADC;AAMpB,cAAA,SAAS,EAAE,uBAAuB,CAAC,YAAD,EAAe,EAAf,EAAmB,CAAnB,EAAsB,CAAtB;AANd,aAAtB;AAQD,WATD;AAUD;AACF,OAnGH;AAqGA,MAAA,QAAQ,CAAC,IAAT,CAAc,SAAS,CAAC,KAAK,QAAN,CAAvB,EAAwC,SAAxC,CAAkD,YAAA;AAChD,YAAI,aAAJ,EAAmB;AACjB,UAAA,KAAI,CAAC,QAAL,CAAc,WAAd,CAA0B,KAAI,CAAC,GAAL,CAAS,aAAnC,EAAkD,mBAAlD;;AACA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CAAuB,QAAQ,CAAC,IAAhC,EAAsC,QAAtC,EAAgD,EAAhD;;AACA,UAAA,KAAI,CAAC,QAAL,CAAc,QAAd,CAAuB,KAAI,CAAC,GAAL,CAAS,aAAhC,EAA+C,QAA/C,EAAyD,EAAzD;;AACA,cAAI,KAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,YAAA,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,YAAA;AACZ,cAAA,KAAI,CAAC,SAAL,CAAe,IAAf,CAAoB;AAClB,gBAAA,KAAK,EAAE,YAAY,CAAC;AAClB,kBAAA,KAAK;AAAE;AAAA,kBAAA,aAAA,CAAe,KADJ;AAElB,kBAAA,gBAAgB;AAAE;AAAA,kBAAA,aAAA,CAAe,YAFf;AAGlB,kBAAA,YAAY;AAAE;AAAA,kBAAA,aAAA,CAAe;AAHX,iBAAD,CADD;AAMlB,gBAAA,SAAS;AAAE;AAAA,gBAAA,aAAA,CAAe;AANR,eAApB;AAQD,aATD;AAUD;;AACD,UAAA,kBAAkB;AAClB,UAAA,aAAa,GAAG,IAAhB;AACD;AACF,OApBD;AAqBD;AACH;AAEC;AACE;AACoB;AAAmB;;;;WAAxC,qBAAY,OAAZ,EAAkC;AAChC,UAAI,OAAO,CAAC,WAAZ,EAAyB;AACvB,aAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,WAA5B;AACD;AACF;AACH;AAEC;AACE;AACa;;;;WAAd,uBAAW;AAAK;AAEd,UAAI,iBAAiB,CAAC,KAAK,UAAN,CAArB,EAAwC;AACtC,aAAK,QAAL,CAAc,QAAd,CAAuB,QAAQ,CAAC,IAAhC,EAAsC,QAAtC,EAAgD,EAAhD;AACD;;AACD,WAAK,SAAL,CAAe,QAAf;AACA,WAAK,OAAL,CAAa,QAAb;AACA,WAAK,SAAL,CAAe,QAAf;AACA,WAAK,YAAL,CAAkB,QAAlB;AACA,WAAK,QAAL,CAAc,IAAd;AACD;AACH;AACO;AAAgB;AAAsB;AAAuB;AACzD;AACI;;;;WAFL,yBAAgB,GAAhB,EAAiC,IAAjC,EAA+C,GAA/C,EAA2D;AACjE,UAAI,GAAJ,EAAS;AACP,aAAK,QAAL,CAAc,QAAd,CAAuB,GAAG,CAAC,aAA3B,EAA0C,IAA1C;AACD,OAFD,MAEO;AACL,aAAK,QAAL,CAAc,WAAd,CAA0B,GAAG,CAAC,aAA9B,EAA6C,IAA7C;AACD;AACF;;;;;;mCAriBF,0B,CAAS,C,EAAC;AAAA,SAAA,KAAA,CAAA,IACT,kBADS,EACC,MAAgB,CAAA,iBAAhB,CACV,WADU,CADD,EAEC,MAAA,CAAc,iBAAd,CACX,MAAA,CAAA,SADW,CAFD,EAGV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAHU,EAGV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,MAAA,CAHU,CAAA;AAGV,C;;AAwGI,kBAAO,CAAA,IAAP,GAAO,MAAW,CA5YrB,iBA4YU,CA5YV;AAAA,EAAA,IAAA,EAAS,kBAAT;AACA,EAAA,SAAU,EAAA,CAAA,CAAA,EAAA,EAAA,cAAA,EAMJ,EANI,CAAA,CADV;AAOM,EAAA,MAAA,EAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,iBAAA,EAAA,mBAAA;AAkSA,IAAA,cAAA,EAAA,gBAlSA;AAwSA,IAAA,aAAA,EAAA,eAxSA;AA6SA,IAAA,qBAAA,EAAA,uBA7SA;AAoTA,IAAA,uBAAA,EAKL,yBAzTK;AAyTA,IAAA,oBAML,EAAA,sBA/TK;AA+TA,IAAA,mBAAA,EAKL,qBApUK;AAoUA,IAAA,cAAA,EAAA;AApUA,GAPN;AAgVM,EAAA,OAAA,EAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAKA,IAAA,QAAA,EAAA,UALA;AAKA,IAAA,SAKL,EAAM;AAVD,GAhVN;AA0VO,EAAA,QAAA,EAAA,CAAA,cAAA,CA1VP;AA+VO,EAAA,QAAA,EAAA,CAAA,MAAA,CA1DJ,oBA0DI;AA/VP,CA4YU,CAAP;AAvGC;;AAAmB,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAA4C;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAuGhE,MAvGgE;AAuG1D,MAAA,IAAA,EAAA,CAAC,WAAD;AAvG0D,KAAA;AAAA,GAA5C,EAuGO;AAAA,IAAA,IAscL,EAl1BzB;AA4Y8B,GAvGP,EA+iBT;AAAA,IAAA,IAAA,EAn1BJ;AAm1BI,GA/iBS,EAnSvB;AAAA,IAAA,IAAA,EAKM;AALN,GAmSuB,CAAA;AAAA,CAAA;;AA7RrB,kBA+0BE,CAAA,cA/0BF,GA+0BwB;AA50B1B,EAAA,cA40ByC,EAAA,CAAA;AAAA,IAAA,IAAA,EA9iBxC;AA8iBwC,GAAA,CAAf;AACZ,EAAA,WAER,EAAA,CAAA;AAAA,IAAA,IACH,EA5iBF;AA2iBK,GAAA,CAHoB;AAKjB,EAAA,iBAAA,EAAsB,CAAA;AAAA,IAAA,IAAA,EAxiBzB;AAwiByB,GAAA,CALL;AAniBf,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAOV;AAPU,GAAA,CAmiBe;AA5hBf,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKL;AALK,GAAA,CA4hBe;AAQd,EAAA,qBAAiC,EAAA,CAC3C;AAAA,IAAA,IAAK,EA1hBN;AA0hBC,GAD2C,CARnB;AASL,EAAA,uBAC0B,EAAA,CAAA;AAAA,IAAA,IAAA,EAthB9C;AAshB8C,GAAA,CAVrB;AA5gBf,EAAA,oBAAA,EAAA,CAAA;AAuhBD,IAAA,IAAA,EAlhBT;AALU,GAAA,CA4gBe;AAWgB,EAAA,mBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EA7gBzC;AA6gByC,GAAA,CAXhB;AAlgBf,EAAA,WA8gBD,EAAA,CAAA;AAAA,IAAA,IAAA,EAzgBT;AAygBS,GAAA,CAZgB;AA7fd,EAAA,QA2gBD,EAAA,CAAA;AAAA,IAAA,IAAA,EAtgBV;AAsgBU,GAAA,CAde;AAxfd,EAAA,SAAA,EAAA,CAAA;AAugBJ,IAAA,IAAA,EAlgBP;AALW,GAAA;AAwfc,CA/0BxB;AA81B0B;;AAAY,CAAA,YAC9B;AAAA,EAAA,MACA,CAAA,iBADA,CAEkB,kBAFlB,EAEkB,CAAA;AAChB,IAAA,IAAS,EAAI,SADG;WAEd;AAAe,MAAA,QAAO,EAAA,gBAAtB;AACS,MAAA,QAAM,EAAO;AADtB,K;AAFc,GAAA,CAFlB,EAMS,YAAA;AACN,WAAE,CAAA;AAAA,MAAA,IAAA,EAAA,SAAA;AAEL,MAAA,UAAA,EAEF,CAAA;AAAmB,QAAA,IAAE,EAAA,MAArB;AACE,QAAA,IAAA,EAAA,CAAA,WAAA;AADF,OAAA;AAJO,KAAA,EAMH;AAAA,MAAA,IAAU,EACV,MAAA,CAAA;AADA,KANG,EAQe;AAAA,MAAA,IAAA,EAAA,MAAA,CAAA;AAAA,KARf,EAQe;AAChB,MAAA,IAAA,EAAA,MAAS,CAAI;AADG,KARf,CAAF;AASe,GAhBlB,EAgBkB;AAAA,IAAA,WAAA,EAAA,CAAA;AACH,MAAA,IAAM,EAAA;AADH,KAAA,CAAA;AACqB,IAAA,iBAAA,EAAA,CAAA;AAC1B,MAAA,IAAE,EAAK;AADmB,KAAA,CADrB;AAEc,IAAA,cAAO,EAAA,CAAA;AACjC,MAAA,IAAA,EAAK;AAD4B,KAAA,CAFrB;AAIb,IAAA,aAAE,EAAA,CAAA;AACJ,MAAA,IACD,EAAA;AAFK,KAAA,CAJW;AAOnB,IAAA,qBACA,EAAA,CAAA;AAEI,MAAA,IAAA,EAAA;AAFJ,KAAA,CARmB;AAWpB,IAAA,uBAAuB,EAAA,CAAA;AACnB,MAAA,IAAA,EAAA;AADmB,KAAA,CAXH;AAYC,IAAA,oBACnB,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,CAbkB;AAaO,IAAA,mBAC1B,EAAA,CAAA;AACD,MAAA,IAAA,EAEL;AAHM,KAAA,CAdmB;AAiBV,IAAA,WAEX,EAAA,CAAA;AAAc,MAAA,IAAI,EAAA;AAAlB,KAAA,CAnBqB;AAoBmB,IAAA,QAAA,EAAA,CAAA;;AAAA,KAAA,CApBnB;AAqBlB,IAAA,SAAA,EAAA,CAAA;AAAgC,MAAA,IAAA,EAAA;AAAhC,KAAA,CArBkB;kBAsBlB,EAAA,CAAA;AAA8C,MAAA,IAAA,EAAA;AAA9C,KAAA;AAtBkB,GAhBlB;AAngBG,CAkgB2B;;IA7Bf,qB;AAqB3B;AACO;AAA2B;AAC5B;AADJ,iCAAY,QAAZ,EAAiC,IAAjC,EAA6C;AAAA;;AAC3C,SAAK,WAAL,GAAmB,IAAI,UAAJ,CACjB,UAAC,QAAD,EAiE2B;AAAiB;AAhErB,UAAjB,oBAAiB;AAiEoB;;AAhEpB,UAAjB,qBAAiB;AAErB,MAAA,IAAI,CAAC,iBAAL,CAAuB,YAkEjB;AAjEJ,QAAA,oBAAoB,GAAG,QAAQ,CAAC,MAAT,CACrB,UADqB,EAErB,WAFqB,EAGrB,UAAC,KAAD,EAAkB;AAChB,UAAA,QAAQ,CAAC,IAAT,CAAc;AACZ,YAAA,OAAO,EAAE,KAAK,CAAC,OADH;AAoEQ,YAAA,OAlEb,EAAE,KAAK,CAAC,OAFH;AAGZ,YAAA,KAAK,EAAL;AAHY,WAAd;AAKD,SAToB,CAAvB;;AAYA,YAAI,eAAJ,EAAqB;AACnB,UAAA,qBAAqB,GAAG,QAAQ,CAAC,MAAT,CACtB,UADsB,EAEtB,YAFsB,EAGtB,UAAC,KAAD,EAAkB;AAChB,YAAA,QAAQ,CAAC,IAAT,CAAc;AACZ,cAAA,OAAO,EAAE,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,OADd;AAEZ,cAAA,OAAO,EAAE,KAAK,CAAC,OAAN,CAAc,CAAd,EAAwB,OAFrB;AAGZ,cAAA,KAoEN,EApEM;AAHY,aAAd;AAKD,WATqB,CAAxB;AAWD;AACF,OA1BD;AA4BA,aAAO,YAAA;AAgEU,QAAA,oBA/DK;;AACpB,YAAmB,eAAnB,EAAqB;AACnB;AAAA,UAAA,qBAAA;AACD;AACF,OALD;AAMD,KAvCgB,EAwCjB,IAxCiB,CAwGmB,KAhE1B,EAxCO,CAAnB;AA0CI,SAAC,WAAD,GAAe,IAAI,UAAJ,CACjB,UAAC,QAAD,EAA2C;AAiExB;AAhEI,UAAe,oBAAf;AAiEsB;;AAhEtB,UAAjB,oBAAiB;AAiEoB,MAAA,IA/DrC,CAAC,iBA+DoC,CA/DlB,YAAA;AACrB,QAAA,oBAAoB,GAgEb,QAhEwB,CAAC,MAgEzB,CA/DL,UA+DK,EA9DL,WA8DK,EA7DL,UAAC,KAAD,EAiEA;AAhEE,UAAA,QAAQ,CAAC,IAAT,CAiEA;AAhEE,YAAA,OAkEgB,EAlEP,KAAK,CAAC,OAgEjB;AA/DE,YAAA,OAAO,EAAE,KAAK,CAAC,OA+DjB;AAIkB,YAAA,KAlEX,EAkEW;AAJlB,WAjEA;AAKD,SAuDI,CAhEP;;AAYA,YAAmB,eAAnB,EA8DuC;AA7DrC,UAAA,oBAAoB,GAAG,QAAQ,CAAC,MAAT,CACrB,UADqB,EAErB,WAFqB,EAGrB,UAAC,KAAD,EA8DA;AA7DE,YAAA,QAAQ,CAAC,IAAT,CAAc;AACZ,cAAA,OAiER,EAjEiB,KAAK,CAAC,aAAN,CAAoB,CAApB,EAAuB,OADpB;AAEZ,cAAA,OAAO,EAAE,KAAK,CAAC,aAAN,CAAoB,CAApB,EAAuB,OAFpB;AAGZ,cAAA,KAAK,EAAL;AAHY,aAAd;AAMH,WAVsB,CAAvB;AAWD;AACF,OAqCwC;AA4B5C,aA/DU,YA+DG;AA9DR,QAAA,oBAAoB;;AACpB,YAAI,eAAJ,EAAqB;AACnB;AAAA,UAAA,oBAAA;AACD;AACF,OA0DJ;AAzDE,KAvCgB,EAwCjB,IAxCiB,CAwCZ,KAAK,EAxCO,CAAf;AA0CJ,SAAK,SAAL,GAAiB,IAAI,UAAJ,CACf,UAAC,QAAD,EAA2C;AACjD;AAA6B,UAAjB,kBAAiB;AAC7B;;AAA6B,UAAjB,mBAAiB;AAC7B;;AAA6B,UAAjB,sBAAiB;AAErB,MAAA,IAAI,CAAC,iBAAL,CAAuB,YAAA;AACrB,QAAA,kBAAkB,GAAG,QAAQ,CAAC,MAAT,CACnB,UADmB,EAEnB,SAFmB,EAGnB,UAAC,KAAD,EAAkB;AAChB,UAAA,QAAQ,CAAC,IAAT,CAAc;AACZ,YAAA,OAAO,EAAE,KC/5BS,CD+5BH,OADH;AAEZ,YAAA,OAAO,EAAE,KAAK,CAAC,OAFH;AAGZ,YAAA,KAAK,EAAL;AAHY,WAAd;AAKD,SATkB,CAArB;;ACv4BE,YDm5BE,eCn5BF,EDm5BmB;ACn5BnB,UAAA,mBDo5BmB,GAAG,QAAQ,CAAC,MAAT,CACpB,UADoB,EAEpB,UAFoB,EAGpB,UAAC,KAAD,ECt5BiB;ADu5Bf,YAAA,QAAQ,CAAC,IAAT,CAAc;AACZ,cAAA,OAAO,EAAE,KAAK,CAAC,cAAN,CAAqB,CAArB,EAAwB,OADrB;AAEZ,cAAA,OAAO,EAAE,KAAK,CAAC,cAAN,CAAqB,CAArB,EAAwB,OAFrB;AAGZ,cAAA,KAAK,EAAL;AAHY,aAAd;AAKD,WATmB,CCp5BtB;AALN,UAAA,sBDq6B4B,GCn6BhB,QDm6B2B,CAAC,MCn6B5B,CDo6BM,UCp6BN,EDq6BJ,aCr6BI,EDs6BJ,UAAC,KAAD,EAAkB;AAChB,YAAA,QC75BR,CD65BqB,IAAb,CC75BF;AD85BI,cAAA,OAAO,EAAE,KAAK,CAAC,cAAN,CAAqB,CAArB,EAAwB,OC95BrC;AD+5BI,cAAA,OAAO,EC75BjB,KAAK,CD65BoB,cC75BzB,CD65BwC,CC75BxC,ED65BkD,OC/5B5C;ADg6BI,cAAA,KAAK,EAAL;ACh6BJ,aD65BE;AAKD,WC56BG,CAFZ;ADg7BK;AACF,OAtCD;AAwCA,aCj6BoB,YAAC;AAAuB,QAAA,kBDk6BxB;;AAClB,YAAI,eAAJ,EAAqB;AACnB;AAAA,UAAA,mBAAA;;AC/5BF;ADg6BE,UAAA,sBCh6BF;AAGgB;AD+5BjB,OAND;AAOD,KArDc,EAsDf,IAtDe,CCz2BV,KD+5BK,EAtDK,CAAjB;AAuDD;;;;WA3FO;;AAtEiB;AAAQ;AAEhC;AAAuB;AAAmB;AAMpC,yBACL,QADK,EAEO,IAFP,EAEO;AAEZ,UAAI,CAAC,qBAAqB,CAAC,QAA3B,EAAqC;AACnC,QAAA,qBAAqB,CAAS,QAA9B,GAAiC,IAAI,qBAAJ,CAC/B,QAD+B,EAE3B,IAF2B,CAAjC;AAID;;AACD,aAAO,qBAAqB,CAAC,QAA7B;AACD;;;;;AAgJF;AC/5BS;AACA;AD85BkI;;AC/+B5I;AAAI;AAyFC;AAjFK;AACI;AAAG;AACb;AAAsB;AAEjB;AAmFN;AAnFuB;AACnB;AAAW;AACO;AA4FI;AAzF4D;;;IAkB5E,qB;AAwEa;AAxEmB;AAE7C;AAA0B;AAAuB;AA0ElC;AACH,iCA1DA,QA0DA,EAzDA,OAyDA,EAxDY,IAwDZ,EAvDY,kBAuDZ,EAEA;AAAA;;AA5DA,SAAQ,QAAR,GAAA,QAAA;AACA,SAAA,OAAA,GAAA,OAAA;AAgER,SA/DY,IA+DZ,GA/DQ,IA+DR;AA9DoB,SAAA,kBAAA,GAAA,kBAAA;AA+DW;AA5D/B;AAEiE;;AAgE1C,SAvFL,WAuFK,GAvFK,EAuFL;AACO,SAlFV,cAkFU,GA9E5B,EA8E4B;AA5ExB,SAAQ,QAAR,GAAW,IAAI,OAAJ,EAAX;AAOJ;AACN;AACO;AACF;;;;;WADH,oBAAQ;AAAA;;AACN,WAAK,IAAL,CAAU,iBAAV,CAA4B,YA4E7B;AA3EG,QAAA,MAAI,CAAC,eAAL,CAAiC,WAAjC,EAA8C,SAA9C,CAAwD,UAAA,KAAK,EAAA;AAC3D,UAAA,MAAI,CAAC,WAAL,CAAiB,KAAjB,EAAwB,KAAK,CAAQ,OAArC,EAAuC,KAAK,CAAC,OAA7C;AACD,SAFD;;AAIA,QAAA,MAAI,CAAC,eAAL,CAAiC,SAAjC,EAAqD,SAArD,CAAsD,UAAA,KAAK,EAAA;AACzD,UAAA,MAAI,CAAC,SAAL,CAAe,KAAK,CAAC,OAArB,EAA8B,KAAK,CAAC,OAApC;AACD,SAFD;;AAmFH,YA/EO,eA+EP,EA/EwB;AACnB,UAAA,MAAI,CAAC,eAAL,CAAiC,YAAjC,EAA+C,SAA/C,CAAyD,UAAA,KAAK,EAAA;AAC5D,YAAA,MAAI,CAAC,WAAL,CACE,KADF,EAEE,KAAK,CAAQ,OAAb,CAAc,CAAd,EAAiB,OAFnB,EAGE,KAAK,CAAC,OAAN,CAAc,CAAd,EAAiB,OAHnB;AAKD,WAND;;AAQA,UAAA,KAAK,CACH,MAAI,CAAC,eAAL,CAAiC,UAAjC,CADG,EAEH,MAAI,CAAC,eAAL,CAAiC,aAAjC,CAFG,CAAL,CAGE,SAHF,CAGY,UAAA,KAAK,EAAA;AA2ErB,YAAA,MA1EU,CAAU,SA0EpB,CAzEQ,KAAK,CAAC,cAAN,CAAqB,CAArB,EAA+B,OAyEvC,EAxEQ,KAAK,CAAC,cAAN,CAAqB,CAArB,EAAwB,OAwEhC;AAtEK,WARD;AASD;AACF,OA5BD;AAuGc;AAzElB;AACO;AACL;;;;WADW,uBAAA;AACT,WAAK,QAAL,CAAc,IAAd;AACA,WAAK,yBAAL;AACD;AACH;AA0EI;AAvED;AAEG;AAA0B;AAsEZ;AAAmB;;;;WAvErC,qBACgC,KADhC,EAEE,OAFF,EAGE,OAHF,EAwEoC;AAAA;;AAnElC,MAAA,KAAK,CAAC,cAAN;;AACA,UAAI,CAAC,KAAK,cAAL,CAAoB,SAAzB,EAAoC;AAClC,aAAK,cAAL,CAAoB,SAApB,GAAgC,KAAK,QAAL,CAAoB,MAApB,CAC9B,KAAK,OAAL,CAAa,aADiB,EAE9B,WAF8B,EAG9B,UAAC,cAAD,EAmE4C;AAlE1C,UAAA,MAAI,CAAY,WAAhB,CACE,cADF,EAEE,cAAc,CAAC,aAAf,CAA6B,CAA7B,EAAgC,OAFlC,EA/ET,cAkFyB,CAlFf,aAAV,CAkFwC,CAlFxC,EAkF2C,OAHlC;AAKD,SAT6B,CAAhC;AAWD;;AACD,UAAI,CArFP,KAqFa,cArFb,CAqF4B,SAAzB,EAAoC;AAClC,aAAK,cAAL,CAAoB,SAApB,GAAgC,KArHpC,QAqHoC,CAAc,MAAd,CArH3B,KAsHE,OAtHF,CACT,aAoHoC,EAE9B,WAF8B,EAG9B,UApHN,cAoHM,EAA2B;AACzB,UAAA,MAAI,CAAC,WAAL,CAnEL,cAmEK,EAnEG,cAqEa,CAAC,OAFjB,EAGE,cAAc,CAAC,OAHjB;AAKD,SAT6B,CAAhC;AAWD;;AACD,WAAK,SAAL,CAAe,SAAf,CAAyB,IAAzB,CAA8B;AAC5B,QAAA,OAAO,EAAP,OAD4B;AAE5B,QAAA,OAAO,EAAP,OAF4B;AAG5B,QAAA,KAAK,EAAE,KAAK;AAHgB,OAA9B;AAKD;AACH;AAEC;AACE;AACoB;AAA0B;AACnC;;;;WADZ,mBAAU,OAAV,EAA2B,OAA3B,EAA0C;AACxC,WAAK,yBAAL;AACA,WAAK,SAAL,CAAe,OAAf,CAAuB,IAAvB,CAA4B;AAC1B,QAAA,OAAO,EAAP,OAD0B;AAE1B,QAAA,OAAO,EAAP,OAF0B;AAG1B,QAAA,KC7I0B,ED6InB,KAAK;AAHc,OAA5B;ACzIH,K,CD+ID;;AAEC;AAAQ;AAAgB;AAAmB;;;;SAA1C,eAAqB;AACnB,aAAO,KAAK,kBAAL,IAA2B,KAAK,kBAAvC;AACD;AACH;AACO;AACP;AAAwB;AACV;AACK;AAEb;;;;WALI,qBACN,KADM,EAEN,OAFM,EAGN,OAHM,EAGS;AAEf,WAAK,SAAL,CAAe,SAAf,CAAyB,IAAzB,CAA8B;AAC5B,QAAA,OAAO,EAAP,OAD4B;AAE5B,QAAA,OAAO,EAAP,OAF4B;AAG5B,QAAA,KAAK,EAAE,KAAK,WAHgB;AAI5B,QAAA,KAAK,EAAL;AAJ4B,OAA9B;AAMD;AACH;AACO;AAAgB;AAAmB;;;;WAAhC,qCAAyB;AAAA;;AAC/B,MAAA,MAAM,CAAC,IAAP,CAAY,KAAK,cAAjB,EAAiC,OAAjC,CAAyC,UAAA,IAAI,EAAA;AAC3C;AAAC,QAAA,MAAD,CAAc,cAAd,CAA6B,IAA7B;;AACA,eAAO,MAAI,CAAC,cAAL,CAAoB,IAApB,CAAP;AACD,OAHD;AAID;AACH;AACO;AAAgB;AAAmB;AACpC;AAAmB;;;;WADf,yBAAiC,SAAjC,EAAkD;AACxD,aAAO,SAAS,CAAI,KAAK,OAAL,CAAa,aAAjB,EAAgC,SAAhC,CAAT,CAAoD,IAApD,CACL,SAAS,CAAC,KAAK,QAAN,CADJ,CAAP;AAGD;;;;;;sCApJF,6B,CAAU,C,EAAA;AAAA,SAAA,KACT,CAAA,IAAA,qBADS,EACC,MAAmB,CAAA,iBAAnB,CACX,MAAA,CAAA,SADW,CADD,EAEV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAFU,EAEV,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,MAAA,CAFU,EAEV,MAAA,CAAA,iBAAA,CAAA,kBAAA,EAAA,CAAA,CAFU,CAAA;AAEV,C;;;;;;;wBACI;;;AAAC;;AAAmB,qBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEzB;AAAA,IAAA,IAAA,EAlCE;AAkCF,GAFyB,EA/BvB;AAAA,IAAA,IAAA,EAAA;AAAA,GA+BuB,EA9BvB;AAAA,IAAA,IAAA,EAEA;AAFA,GA8BuB,EA3BvB;AAAA,IAAA,IAAA,EAIO,kBAJP;AAIyB,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EA6CtB;AA7CsB,KAAA;AAJzB,GA2BuB,CAAA;AAAA,CAAA;;AAsBH,qBAAA,CAAA,cAAA,GAAA;AACtB,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAnBG;AAmBH,GAAA,CADsB;AAlBT,EAAA,kBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAIV;AAJU,GAAA;AAkBS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAdR,C;AAAE;AAAI;AAElB;AAGiB;;;ICxCN,e;;;;8BAJZ,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,eAAY,CAAA,IAAZ,GAAe,MAAA,CAAA,gBAAA,CAAoB;AAAA,EAAA,OAAA,EAAA,SAAsB,uBAAtB,CACzB,CADyB,EACzB;AAAA,WAAA,KAAoB,CAAA,IAAA,eAApB,GAAA;AAA0C;AADjB,CAApB,CAAf;;CAED,YAAA;AAAA,GAAA,OAAA,SAAA,KAAA,WAAA,IAAA,SAAA,KAAA,MAAA,CAAA,kBAAA,CAAA,eAAA,EAAA;AAAA,IAAA,YAAA,EAAA,CAAA,kBAAA,EAAA,qBAAA,CAAA;AAAA,IAAA,OAAA,EAAA,CAAA,kBAAA,EAAA,qBAAA;AAAA,GAAA,CAAA;AAAA,C;;;;;;;;;;;;AACI,C;AAAE;AAAI;AACE;AAAqG;;AAAK;AAAI;AAAkC;AAAqG;;;AAAK,SAAA,kBAAA,EAAA,qBAAA,EAAA,eAAA","sourcesContent":["/**\n * @hidden\n */\nexport const IS_TOUCH_DEVICE: boolean = (() => {\n  // In case we're in Node.js environment.\n  if (typeof window === 'undefined') {\n    return false;\n  } else {\n    return (\n      'ontouchstart' in window ||\n      navigator.maxTouchPoints > 0 ||\n      navigator.msMaxTouchPoints > 0\n    );\n  }\n})();\n","import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subject, Observable, Observer, merge, EMPTY } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime,\n  switchMap,\n  startWith,\n  tap\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff < precision;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform'\n  ];\n  const transform = transformProperties\n    .map(property => style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$1'\n    );\n    translateY = transform.replace(\n      /.*translate3?d?\\((-?[0-9]*)px, (-?[0-9]*)px.*/,\n      '$2'\n    );\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY <= rect.bottom;\n}\n\nfunction isWithinBoundingX({\n  clientX,\n  rect\n}: {\n  clientX: number;\n  rect: ClientRect;\n}): boolean {\n  return clientX >= rect.left && clientX <= rect.right;\n}\n\nfunction getResizeEdges({\n  clientX,\n  clientY,\n  elm,\n  allowedEdges,\n  cursorPrecision\n}: {\n  clientX: number;\n  clientY: number;\n  elm: ElementRef;\n  allowedEdges: Edges;\n  cursorPrecision: number;\n}): Edges {\n  const elmPosition: ClientRect = elm.nativeElement.getBoundingClientRect();\n  const edges: Edges = {};\n\n  if (\n    allowedEdges.left &&\n    isNumberCloseTo(clientX, elmPosition.left, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.left = true;\n  }\n\n  if (\n    allowedEdges.right &&\n    isNumberCloseTo(clientX, elmPosition.right, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.right = true;\n  }\n\n  if (\n    allowedEdges.top &&\n    isNumberCloseTo(clientY, elmPosition.top, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.top = true;\n  }\n\n  if (\n    allowedEdges.bottom &&\n    isNumberCloseTo(clientY, elmPosition.bottom, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.bottom = true;\n  }\n\n  return edges;\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize'\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach(edge => {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * <div\n *   mwlResizable\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n *   [enableGhostResize]=\"true\">\n * </div>\n * ```\n * Or in case they are sibling elements:\n * ```html\n * <div mwlResizable #resizableElement=\"mwlResizable\"></div>\n * <div mwlResizeHandle [resizableContainer]=\"resizableElement\" [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizable]',\n  exportAs: 'mwlResizable'\n})\nexport class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * The mouse move throttle in milliseconds, default: 50 ms\n   */\n  @Input() mouseMoveThrottleMS: number = MOUSE_MOVE_THROTTLE_MS;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter<ResizeEvent>();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private destroy$ = new Subject<void>();\n\n  private resizeEdges$ = new Subject<Edges>();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    const mousedown$: Observable<{\n      clientX: number;\n      clientY: number;\n      edges?: Edges;\n    }> = merge(this.pointerEventListeners.pointerDown, this.mousedown);\n\n    const mousemove$ = merge(\n      this.pointerEventListeners.pointerMove,\n      this.mousemove\n    ).pipe(\n      tap(({ event }) => {\n        if (currentResize) {\n          try {\n            event.preventDefault();\n          } catch (e) {\n            // just adding try-catch not to see errors in console if there is a passive listener for same event somewhere\n            // browser does nothing except of writing errors to console\n          }\n        }\n      }),\n      share()\n    );\n\n    const mouseup$ = merge(this.pointerEventListeners.pointerUp, this.mouseup);\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const getResizeCursors = (): ResizeCursors => {\n      return {\n        ...DEFAULT_RESIZE_CURSORS,\n        ...this.resizeCursors\n      };\n    };\n\n    this.resizeEdges$\n      .pipe(\n        startWith(this.resizeEdges),\n        map(() => {\n          return (\n            this.resizeEdges &&\n            Object.keys(this.resizeEdges).some(edge => !!this.resizeEdges[edge])\n          );\n        }),\n        switchMap(legacyResizeEdgesEnabled =>\n          legacyResizeEdgesEnabled ? mousemove$ : EMPTY\n        ),\n        auditTime(this.mouseMoveThrottleMS),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors = getResizeCursors();\n        if (!currentResize) {\n          const cursor = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable<any> = mousedown$\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return (merge(\n            mousemove$.pipe(take(1)).pipe(map(coords => [, coords])),\n            mousemove$.pipe(pairwise())\n          ) as Observable<\n            [\n              { clientX: number; clientY: number },\n              { clientX: number; clientY: number }\n            ]\n          >)\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(mouseup$, mousedown$)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        if (this.resizing.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizing.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: newBoundingRect\n              }),\n              rectangle: newBoundingRect\n            });\n          });\n        }\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    mousedown$\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        const resizeCursors = getResizeCursors();\n        const cursor = getResizeCursor(currentResize.edges, resizeCursors);\n        this.renderer.setStyle(document.body, 'cursor', cursor);\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, true);\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        if (this.resizeStart.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeStart.emit({\n              edges: getEdgesDiff({\n                edges,\n                initialRectangle: startingRect,\n                newRectangle: startingRect\n              }),\n              rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n            });\n          });\n        }\n      });\n\n    mouseup$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        if (this.resizeEnd.observers.length > 0) {\n          this.zone.run(() => {\n            this.resizeEnd.emit({\n              edges: getEdgesDiff({\n                edges: currentResize!.edges,\n                initialRectangle: currentResize!.startingRect,\n                newRectangle: currentResize!.currentRect\n              }),\n              rectangle: currentResize!.currentRect\n            });\n          });\n        }\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.resizeEdges) {\n      this.resizeEdges$.next(this.resizeEdges);\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    // browser check for angular universal, because it doesn't know what document is\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setStyle(document.body, 'cursor', '');\n    }\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.resizeEdges$.complete();\n    this.destroy$.next();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable<PointerEventCoordinate>;\n\n  public pointerMove: Observable<PointerEventCoordinate>;\n\n  public pointerUp: Observable<PointerEventCoordinate>;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart = renderer.listen(\n              'document',\n              'touchstart',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.touches[0].clientX,\n                  clientY: event.touches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchStart!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove = renderer.listen(\n              'document',\n              'touchmove',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.targetTouches[0].clientX,\n                  clientY: event.targetTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchMove!();\n          }\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: (() => void) | undefined;\n        let unsubscribeTouchCancel: (() => void) | undefined;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd = renderer.listen(\n              'document',\n              'touchend',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n\n            unsubscribeTouchCancel = renderer.listen(\n              'document',\n              'touchcancel',\n              (event: TouchEvent) => {\n                observer.next({\n                  clientX: event.changedTouches[0].clientX,\n                  clientY: event.changedTouches[0].clientY,\n                  event\n                });\n              }\n            );\n          }\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          if (IS_TOUCH_DEVICE) {\n            unsubscribeTouchEnd!();\n            unsubscribeTouchCancel!();\n          }\n        };\n      }\n    ).pipe(share());\n  }\n}\n","import {\n  Directive,\n  Input,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  NgZone,\n  Optional\n} from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\nimport { IS_TOUCH_DEVICE } from './is-touch-device';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * <div mwlResizable>\n *   <div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * </div>\n * ```\n * Or in case they are sibling elements:\n * ```html\n * <div mwlResizable #resizableElement=\"mwlResizable\"></div>\n * <div mwlResizeHandle [resizableContainer]=\"resizableElement\" [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnInit, OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n  /**\n   * Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective\n   */\n  @Input() resizableContainer: ResizableDirective;\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    @Optional() private resizableDirective: ResizableDirective\n  ) {}\n\n  ngOnInit(): void {\n    this.zone.runOutsideAngular(() => {\n      this.listenOnTheHost<MouseEvent>('mousedown').subscribe(event => {\n        this.onMousedown(event, event.clientX, event.clientY);\n      });\n\n      this.listenOnTheHost<MouseEvent>('mouseup').subscribe(event => {\n        this.onMouseup(event.clientX, event.clientY);\n      });\n\n      if (IS_TOUCH_DEVICE) {\n        this.listenOnTheHost<TouchEvent>('touchstart').subscribe(event => {\n          this.onMousedown(\n            event,\n            event.touches[0].clientX,\n            event.touches[0].clientY\n          );\n        });\n\n        merge(\n          this.listenOnTheHost<TouchEvent>('touchend'),\n          this.listenOnTheHost<TouchEvent>('touchcancel')\n        ).subscribe(event => {\n          this.onMouseup(\n            event.changedTouches[0].clientX,\n            event.changedTouches[0].clientY\n          );\n        });\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    if (!this.eventListeners.touchmove) {\n      this.eventListeners.touchmove = this.renderer.listen(\n        this.element.nativeElement,\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.onMousemove(\n            touchMoveEvent,\n            touchMoveEvent.targetTouches[0].clientX,\n            touchMoveEvent.targetTouches[0].clientY\n          );\n        }\n      );\n    }\n    if (!this.eventListeners.mousemove) {\n      this.eventListeners.mousemove = this.renderer.listen(\n        this.element.nativeElement,\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.onMousemove(\n            mouseMoveEvent,\n            mouseMoveEvent.clientX,\n            mouseMoveEvent.clientY\n          );\n        }\n      );\n    }\n    this.resizable.mousedown.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  onMouseup(clientX: number, clientY: number): void {\n    this.unsubscribeEventListeners();\n    this.resizable.mouseup.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges\n    });\n  }\n\n  // directive might be passed from DI or as an input\n  private get resizable(): ResizableDirective {\n    return this.resizableDirective || this.resizableContainer;\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n\n  private listenOnTheHost<T extends Event>(eventName: string) {\n    return fromEvent<T>(this.element.nativeElement, eventName).pipe(\n      takeUntil(this.destroy$)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n"]},"metadata":{},"sourceType":"module"}