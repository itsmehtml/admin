{"ast":null,"code":"module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\nfunction (hljs) {\n  // Regular expression for Ada numeric literals.\n  // stolen form the VHDL highlighter\n  // Decimal literal:\n  var INTEGER_RE = '\\\\d(_|\\\\d)*';\n  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?'; // Based literal:\n\n  var BASED_INTEGER_RE = '\\\\w+';\n  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n  var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')'; // Identifier regex\n\n  var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*'; // bad chars, only allowed in literals\n\n  var BAD_CHARS = '[]{}%#\\'\\\"'; // Ada doesn't have block comments, only line comments\n\n  var COMMENTS = hljs.COMMENT('--', '$'); // variable declarations of the form\n  // Foo : Bar := Baz;\n  // where only Bar will be highlighted\n\n  var VAR_DECLS = {\n    // TODO: These spaces are not required by the Ada syntax\n    // however, I have yet to see handwritten Ada code where\n    // someone does not put spaces around :\n    begin: '\\\\s+:\\\\s+',\n    end: '\\\\s*(:=|;|\\\\)|=>|$)',\n    // endsWithParent: true,\n    // returnBegin: true,\n    illegal: BAD_CHARS,\n    contains: [{\n      // workaround to avoid highlighting\n      // named loops and declare blocks\n      beginKeywords: 'loop for declare others',\n      endsParent: true\n    }, {\n      // properly highlight all modifiers\n      className: 'keyword',\n      beginKeywords: 'not null constant access function procedure in out aliased exception'\n    }, {\n      className: 'type',\n      begin: ID_REGEX,\n      endsParent: true,\n      relevance: 0\n    }]\n  };\n  return {\n    case_insensitive: true,\n    keywords: {\n      keyword: 'abort else new return abs elsif not reverse abstract end ' + 'accept entry select access exception of separate aliased exit or some ' + 'all others subtype and for out synchronized array function overriding ' + 'at tagged generic package task begin goto pragma terminate ' + 'body private then if procedure type case in protected constant interface ' + 'is raise use declare range delay limited record when delta loop rem while ' + 'digits renames with do mod requeue xor',\n      literal: 'True False'\n    },\n    contains: [COMMENTS, // strings \"foobar\"\n    {\n      className: 'string',\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    }, // characters ''\n    {\n      // character literals always contain one char\n      className: 'string',\n      begin: /'.'/\n    }, {\n      // number literals\n      className: 'number',\n      begin: NUMBER_RE,\n      relevance: 0\n    }, {\n      // Attributes\n      className: 'symbol',\n      begin: \"'\" + ID_REGEX\n    }, {\n      // package definition, maybe inside generic\n      className: 'title',\n      begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',\n      end: '(is|$)',\n      keywords: 'package body',\n      excludeBegin: true,\n      excludeEnd: true,\n      illegal: BAD_CHARS\n    }, {\n      // function/procedure declaration/definition\n      // maybe inside generic\n      begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',\n      end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n      keywords: 'overriding function procedure with is renames return',\n      // we need to re-match the 'function' keyword, so that\n      // the title mode below matches only exactly once\n      returnBegin: true,\n      contains: [COMMENTS, {\n        // name of the function/procedure\n        className: 'title',\n        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n        end: '(\\\\(|\\\\s+|$)',\n        excludeBegin: true,\n        excludeEnd: true,\n        illegal: BAD_CHARS\n      }, // 'self'\n      // // parameter types\n      VAR_DECLS, {\n        // return type\n        className: 'type',\n        begin: '\\\\breturn\\\\s+',\n        end: '(\\\\s+|;|$)',\n        keywords: 'return',\n        excludeBegin: true,\n        excludeEnd: true,\n        // we are done with functions\n        endsParent: true,\n        illegal: BAD_CHARS\n      }]\n    }, {\n      // new type declarations\n      // maybe inside generic\n      className: 'type',\n      begin: '\\\\b(sub)?type\\\\s+',\n      end: '\\\\s+',\n      keywords: 'type',\n      excludeBegin: true,\n      illegal: BAD_CHARS\n    }, // see comment above the definition\n    VAR_DECLS // no markup\n    // relevance boosters for small snippets\n    // {begin: '\\\\s*=>\\\\s*'},\n    // {begin: '\\\\s*:=\\\\s*'},\n    // {begin: '\\\\s+:=\\\\s+'},\n    ]\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/highlight.js/lib/languages/ada.js"],"names":["module","exports","hljs","INTEGER_RE","EXPONENT_RE","DECIMAL_LITERAL_RE","BASED_INTEGER_RE","BASED_LITERAL_RE","NUMBER_RE","ID_REGEX","BAD_CHARS","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","contains","beginKeywords","endsParent","className","relevance","case_insensitive","keywords","keyword","literal","excludeBegin","excludeEnd","returnBegin"],"mappings":"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","sourcesContent":["module.exports = // We try to support full Ada2012\r\n//\r\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\r\n// and titles (user defined function/procedure/package)\r\n// CSS classes are set accordingly\r\n//\r\n// Languages causing problems for language detection:\r\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\r\n// sql (ada default.txt has a lot of sql keywords)\r\n\r\nfunction(hljs) {\r\n    // Regular expression for Ada numeric literals.\r\n    // stolen form the VHDL highlighter\r\n\r\n    // Decimal literal:\r\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\r\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\r\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\r\n\r\n    // Based literal:\r\n    var BASED_INTEGER_RE = '\\\\w+';\r\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\r\n\r\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\r\n\r\n    // Identifier regex\r\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\r\n\r\n    // bad chars, only allowed in literals\r\n    var BAD_CHARS = '[]{}%#\\'\\\"'\r\n\r\n    // Ada doesn't have block comments, only line comments\r\n    var COMMENTS = hljs.COMMENT('--', '$');\r\n\r\n    // variable declarations of the form\r\n    // Foo : Bar := Baz;\r\n    // where only Bar will be highlighted\r\n    var VAR_DECLS = {\r\n        // TODO: These spaces are not required by the Ada syntax\r\n        // however, I have yet to see handwritten Ada code where\r\n        // someone does not put spaces around :\r\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\r\n        // endsWithParent: true,\r\n        // returnBegin: true,\r\n        illegal: BAD_CHARS,\r\n        contains: [\r\n            {\r\n                // workaround to avoid highlighting\r\n                // named loops and declare blocks\r\n                beginKeywords: 'loop for declare others',\r\n                endsParent: true,\r\n            },\r\n            {\r\n                // properly highlight all modifiers\r\n                className: 'keyword',\r\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\r\n            },\r\n            {\r\n                className: 'type',\r\n                begin: ID_REGEX,\r\n                endsParent: true,\r\n                relevance: 0,\r\n            }\r\n        ]\r\n    };\r\n\r\n    return {\r\n        case_insensitive: true,\r\n        keywords: {\r\n            keyword:\r\n                'abort else new return abs elsif not reverse abstract end ' +\r\n                'accept entry select access exception of separate aliased exit or some ' +\r\n                'all others subtype and for out synchronized array function overriding ' +\r\n                'at tagged generic package task begin goto pragma terminate ' +\r\n                'body private then if procedure type case in protected constant interface ' +\r\n                'is raise use declare range delay limited record when delta loop rem while ' +\r\n                'digits renames with do mod requeue xor',\r\n            literal:\r\n                'True False',\r\n        },\r\n        contains: [\r\n            COMMENTS,\r\n            // strings \"foobar\"\r\n            {\r\n                className: 'string',\r\n                begin: /\"/, end: /\"/,\r\n                contains: [{begin: /\"\"/, relevance: 0}]\r\n            },\r\n            // characters ''\r\n            {\r\n                // character literals always contain one char\r\n                className: 'string',\r\n                begin: /'.'/\r\n            },\r\n            {\r\n                // number literals\r\n                className: 'number',\r\n                begin: NUMBER_RE,\r\n                relevance: 0\r\n            },\r\n            {\r\n                // Attributes\r\n                className: 'symbol',\r\n                begin: \"'\" + ID_REGEX,\r\n            },\r\n            {\r\n                // package definition, maybe inside generic\r\n                className: 'title',\r\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\r\n                keywords: 'package body',\r\n                excludeBegin: true,\r\n                excludeEnd: true,\r\n                illegal: BAD_CHARS\r\n            },\r\n            {\r\n                // function/procedure declaration/definition\r\n                // maybe inside generic\r\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\r\n                keywords: 'overriding function procedure with is renames return',\r\n                // we need to re-match the 'function' keyword, so that\r\n                // the title mode below matches only exactly once\r\n                returnBegin: true,\r\n                contains:\r\n                [\r\n                    COMMENTS,\r\n                    {\r\n                        // name of the function/procedure\r\n                        className: 'title',\r\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\r\n                        end: '(\\\\(|\\\\s+|$)',\r\n                        excludeBegin: true,\r\n                        excludeEnd: true,\r\n                        illegal: BAD_CHARS\r\n                    },\r\n                    // 'self'\r\n                    // // parameter types\r\n                    VAR_DECLS,\r\n                    {\r\n                        // return type\r\n                        className: 'type',\r\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\r\n                        keywords: 'return',\r\n                        excludeBegin: true,\r\n                        excludeEnd: true,\r\n                        // we are done with functions\r\n                        endsParent: true,\r\n                        illegal: BAD_CHARS\r\n\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                // new type declarations\r\n                // maybe inside generic\r\n                className: 'type',\r\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\r\n                keywords: 'type',\r\n                excludeBegin: true,\r\n                illegal: BAD_CHARS\r\n            },\r\n\r\n            // see comment above the definition\r\n            VAR_DECLS,\r\n\r\n            // no markup\r\n            // relevance boosters for small snippets\r\n            // {begin: '\\\\s*=>\\\\s*'},\r\n            // {begin: '\\\\s*:=\\\\s*'},\r\n            // {begin: '\\\\s+:=\\\\s+'},\r\n        ]\r\n    };\r\n};"]},"metadata":{},"sourceType":"script"}