{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nfunction getSeriesStackId(seriesModel) {\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n}\n\nfunction getAxisKey(polar, axis) {\n  return axis.dim + polar.model.componentIndex;\n}\n/**\r\n * @param {string} seriesType\r\n * @param {module:echarts/model/Global} ecModel\r\n * @param {module:echarts/ExtensionAPI} api\r\n */\n\n\nfunction barLayoutPolar(seriesType, ecModel, api) {\n  var lastStackCoords = {};\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\n  }));\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    // Check series coordinate, do layout for polar only\n    if (seriesModel.coordinateSystem.type !== 'polar') {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var stackId = getSeriesStackId(seriesModel);\n    var columnLayoutInfo = barWidthAndOffset[axisKey][stackId];\n    var columnOffset = columnLayoutInfo.offset;\n    var columnWidth = columnLayoutInfo.width;\n    var valueAxis = polar.getOtherAxis(baseAxis);\n    var cx = seriesModel.coordinateSystem.cx;\n    var cy = seriesModel.coordinateSystem.cy;\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n    var valueDim = data.mapDimension(valueAxis.dim);\n    var baseDim = data.mapDimension(baseAxis.dim);\n    var stacked = isDimensionStacked(data, valueDim\n    /*, baseDim*/\n    );\n    var clampLayout = baseAxis.dim !== 'radius' || !seriesModel.get('roundCap', true);\n    var valueAxisStart = valueAxis.getExtent()[0];\n\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\n      var value = data.get(valueDim, idx);\n      var baseValue = data.get(baseDim, idx);\n\n      if (isNaN(value)) {\n        continue;\n      }\n\n      var sign = value >= 0 ? 'p' : 'n';\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\n      // stackResultDimension directly.\n      // Only ordinal axis can be stacked.\n\n      if (stacked) {\n        if (!lastStackCoords[stackId][baseValue]) {\n          lastStackCoords[stackId][baseValue] = {\n            p: valueAxisStart,\n            // Positive stack\n            n: valueAxisStart // Negative stack\n\n          };\n        } // Should also consider #4243\n\n\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\n      }\n\n      var r0;\n      var r;\n      var startAngle;\n      var endAngle; // radial sector\n\n      if (valueAxis.dim === 'radius') {\n        var radiusSpan = valueAxis.dataToRadius(value) - valueAxisStart;\n        var angle = baseAxis.dataToAngle(baseValue);\n\n        if (Math.abs(radiusSpan) < barMinHeight) {\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\n        }\n\n        r0 = baseCoord;\n        r = baseCoord + radiusSpan;\n        startAngle = angle - columnOffset;\n        endAngle = startAngle - columnWidth;\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\n      } // tangential sector\n      else {\n          var angleSpan = valueAxis.dataToAngle(value, clampLayout) - valueAxisStart;\n          var radius = baseAxis.dataToRadius(baseValue);\n\n          if (Math.abs(angleSpan) < barMinAngle) {\n            angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\n          }\n\n          r0 = radius + columnOffset;\n          r = r0 + columnWidth;\n          startAngle = baseCoord;\n          endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\n          // add a round to differentiate it from origin\n          // var extent = angleAxis.getExtent();\n          // var stackCoord = angle;\n          // if (stackCoord === extent[0] && value > 0) {\n          //     stackCoord = extent[1];\n          // }\n          // else if (stackCoord === extent[1] && value < 0) {\n          //     stackCoord = extent[0];\n          // }\n\n          stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\n        }\n\n      data.setItemLayout(idx, {\n        cx: cx,\n        cy: cy,\n        r0: r0,\n        r: r,\n        // Consider that positive angle is anti-clockwise,\n        // while positive radian of sector is clockwise\n        startAngle: -startAngle * Math.PI / 180,\n        endAngle: -endAngle * Math.PI / 180\n      });\n    }\n  }, this);\n}\n/**\r\n * Calculate bar width and offset for radial bar charts\r\n */\n\n\nfunction calRadialBar(barSeries, api) {\n  // Columns info on each category axis. Key is polar name\n  var columnsMap = {};\n  zrUtil.each(barSeries, function (seriesModel, idx) {\n    var data = seriesModel.getData();\n    var polar = seriesModel.coordinateSystem;\n    var baseAxis = polar.getBaseAxis();\n    var axisKey = getAxisKey(polar, baseAxis);\n    var axisExtent = baseAxis.getExtent();\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\n    var columnsOnAxis = columnsMap[axisKey] || {\n      bandWidth: bandWidth,\n      remainedWidth: bandWidth,\n      autoWidthCount: 0,\n      categoryGap: '20%',\n      gap: '30%',\n      stacks: {}\n    };\n    var stacks = columnsOnAxis.stacks;\n    columnsMap[axisKey] = columnsOnAxis;\n    var stackId = getSeriesStackId(seriesModel);\n\n    if (!stacks[stackId]) {\n      columnsOnAxis.autoWidthCount++;\n    }\n\n    stacks[stackId] = stacks[stackId] || {\n      width: 0,\n      maxWidth: 0\n    };\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\n    var barGap = seriesModel.get('barGap');\n    var barCategoryGap = seriesModel.get('barCategoryGap');\n\n    if (barWidth && !stacks[stackId].width) {\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n      stacks[stackId].width = barWidth;\n      columnsOnAxis.remainedWidth -= barWidth;\n    }\n\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n    barGap != null && (columnsOnAxis.gap = barGap);\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\n  });\n  var result = {};\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n    result[coordSysName] = {};\n    var stacks = columnsOnAxis.stacks;\n    var bandWidth = columnsOnAxis.bandWidth;\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n    var remainedWidth = columnsOnAxis.remainedWidth;\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\n\n    zrUtil.each(stacks, function (column, stack) {\n      var maxWidth = column.maxWidth;\n\n      if (maxWidth && maxWidth < autoWidth) {\n        maxWidth = Math.min(maxWidth, remainedWidth);\n\n        if (column.width) {\n          maxWidth = Math.min(maxWidth, column.width);\n        }\n\n        remainedWidth -= maxWidth;\n        column.width = maxWidth;\n        autoWidthCount--;\n      }\n    }); // Recalculate width again\n\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n    autoWidth = Math.max(autoWidth, 0);\n    var widthSum = 0;\n    var lastColumn;\n    zrUtil.each(stacks, function (column, idx) {\n      if (!column.width) {\n        column.width = autoWidth;\n      }\n\n      lastColumn = column;\n      widthSum += column.width * (1 + barGapPercent);\n    });\n\n    if (lastColumn) {\n      widthSum -= lastColumn.width * barGapPercent;\n    }\n\n    var offset = -widthSum / 2;\n    zrUtil.each(stacks, function (column, stackId) {\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\n        offset: offset,\n        width: column.width\n      };\n      offset += column.width * (1 + barGapPercent);\n    });\n  });\n  return result;\n}\n\nvar _default = barLayoutPolar;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/layout/barPolar.js"],"names":["zrUtil","require","_number","parsePercent","_dataStackHelper","isDimensionStacked","getSeriesStackId","seriesModel","get","seriesIndex","getAxisKey","polar","axis","dim","model","componentIndex","barLayoutPolar","seriesType","ecModel","api","lastStackCoords","barWidthAndOffset","calRadialBar","filter","getSeriesByType","isSeriesFiltered","coordinateSystem","type","eachSeriesByType","data","getData","baseAxis","getBaseAxis","axisKey","stackId","columnLayoutInfo","columnOffset","offset","columnWidth","width","valueAxis","getOtherAxis","cx","cy","barMinHeight","barMinAngle","valueDim","mapDimension","baseDim","stacked","clampLayout","valueAxisStart","getExtent","idx","len","count","value","baseValue","isNaN","sign","baseCoord","p","n","r0","r","startAngle","endAngle","radiusSpan","dataToRadius","angle","dataToAngle","Math","abs","angleSpan","radius","setItemLayout","PI","barSeries","columnsMap","each","axisExtent","bandWidth","getBandWidth","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","gap","stacks","maxWidth","barWidth","barMaxWidth","barGap","barCategoryGap","min","result","coordSysName","barGapPercent","autoWidth","max","column","stack","widthSum","lastColumn","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\nvar _number = require(\"../util/number\");\r\n\r\nvar parsePercent = _number.parsePercent;\r\n\r\nvar _dataStackHelper = require(\"../data/helper/dataStackHelper\");\r\n\r\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nfunction getSeriesStackId(seriesModel) {\r\n  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\r\n}\r\n\r\nfunction getAxisKey(polar, axis) {\r\n  return axis.dim + polar.model.componentIndex;\r\n}\r\n/**\r\n * @param {string} seriesType\r\n * @param {module:echarts/model/Global} ecModel\r\n * @param {module:echarts/ExtensionAPI} api\r\n */\r\n\r\n\r\nfunction barLayoutPolar(seriesType, ecModel, api) {\r\n  var lastStackCoords = {};\r\n  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {\r\n    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';\r\n  }));\r\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n    // Check series coordinate, do layout for polar only\r\n    if (seriesModel.coordinateSystem.type !== 'polar') {\r\n      return;\r\n    }\r\n\r\n    var data = seriesModel.getData();\r\n    var polar = seriesModel.coordinateSystem;\r\n    var baseAxis = polar.getBaseAxis();\r\n    var axisKey = getAxisKey(polar, baseAxis);\r\n    var stackId = getSeriesStackId(seriesModel);\r\n    var columnLayoutInfo = barWidthAndOffset[axisKey][stackId];\r\n    var columnOffset = columnLayoutInfo.offset;\r\n    var columnWidth = columnLayoutInfo.width;\r\n    var valueAxis = polar.getOtherAxis(baseAxis);\r\n    var cx = seriesModel.coordinateSystem.cx;\r\n    var cy = seriesModel.coordinateSystem.cy;\r\n    var barMinHeight = seriesModel.get('barMinHeight') || 0;\r\n    var barMinAngle = seriesModel.get('barMinAngle') || 0;\r\n    lastStackCoords[stackId] = lastStackCoords[stackId] || [];\r\n    var valueDim = data.mapDimension(valueAxis.dim);\r\n    var baseDim = data.mapDimension(baseAxis.dim);\r\n    var stacked = isDimensionStacked(data, valueDim\r\n    /*, baseDim*/\r\n    );\r\n    var clampLayout = baseAxis.dim !== 'radius' || !seriesModel.get('roundCap', true);\r\n    var valueAxisStart = valueAxis.getExtent()[0];\r\n\r\n    for (var idx = 0, len = data.count(); idx < len; idx++) {\r\n      var value = data.get(valueDim, idx);\r\n      var baseValue = data.get(baseDim, idx);\r\n\r\n      if (isNaN(value)) {\r\n        continue;\r\n      }\r\n\r\n      var sign = value >= 0 ? 'p' : 'n';\r\n      var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in\r\n      // stackResultDimension directly.\r\n      // Only ordinal axis can be stacked.\r\n\r\n      if (stacked) {\r\n        if (!lastStackCoords[stackId][baseValue]) {\r\n          lastStackCoords[stackId][baseValue] = {\r\n            p: valueAxisStart,\r\n            // Positive stack\r\n            n: valueAxisStart // Negative stack\r\n\r\n          };\r\n        } // Should also consider #4243\r\n\r\n\r\n        baseCoord = lastStackCoords[stackId][baseValue][sign];\r\n      }\r\n\r\n      var r0;\r\n      var r;\r\n      var startAngle;\r\n      var endAngle; // radial sector\r\n\r\n      if (valueAxis.dim === 'radius') {\r\n        var radiusSpan = valueAxis.dataToRadius(value) - valueAxisStart;\r\n        var angle = baseAxis.dataToAngle(baseValue);\r\n\r\n        if (Math.abs(radiusSpan) < barMinHeight) {\r\n          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;\r\n        }\r\n\r\n        r0 = baseCoord;\r\n        r = baseCoord + radiusSpan;\r\n        startAngle = angle - columnOffset;\r\n        endAngle = startAngle - columnWidth;\r\n        stacked && (lastStackCoords[stackId][baseValue][sign] = r);\r\n      } // tangential sector\r\n      else {\r\n          var angleSpan = valueAxis.dataToAngle(value, clampLayout) - valueAxisStart;\r\n          var radius = baseAxis.dataToRadius(baseValue);\r\n\r\n          if (Math.abs(angleSpan) < barMinAngle) {\r\n            angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;\r\n          }\r\n\r\n          r0 = radius + columnOffset;\r\n          r = r0 + columnWidth;\r\n          startAngle = baseCoord;\r\n          endAngle = baseCoord + angleSpan; // if the previous stack is at the end of the ring,\r\n          // add a round to differentiate it from origin\r\n          // var extent = angleAxis.getExtent();\r\n          // var stackCoord = angle;\r\n          // if (stackCoord === extent[0] && value > 0) {\r\n          //     stackCoord = extent[1];\r\n          // }\r\n          // else if (stackCoord === extent[1] && value < 0) {\r\n          //     stackCoord = extent[0];\r\n          // }\r\n\r\n          stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);\r\n        }\r\n\r\n      data.setItemLayout(idx, {\r\n        cx: cx,\r\n        cy: cy,\r\n        r0: r0,\r\n        r: r,\r\n        // Consider that positive angle is anti-clockwise,\r\n        // while positive radian of sector is clockwise\r\n        startAngle: -startAngle * Math.PI / 180,\r\n        endAngle: -endAngle * Math.PI / 180\r\n      });\r\n    }\r\n  }, this);\r\n}\r\n/**\r\n * Calculate bar width and offset for radial bar charts\r\n */\r\n\r\n\r\nfunction calRadialBar(barSeries, api) {\r\n  // Columns info on each category axis. Key is polar name\r\n  var columnsMap = {};\r\n  zrUtil.each(barSeries, function (seriesModel, idx) {\r\n    var data = seriesModel.getData();\r\n    var polar = seriesModel.coordinateSystem;\r\n    var baseAxis = polar.getBaseAxis();\r\n    var axisKey = getAxisKey(polar, baseAxis);\r\n    var axisExtent = baseAxis.getExtent();\r\n    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();\r\n    var columnsOnAxis = columnsMap[axisKey] || {\r\n      bandWidth: bandWidth,\r\n      remainedWidth: bandWidth,\r\n      autoWidthCount: 0,\r\n      categoryGap: '20%',\r\n      gap: '30%',\r\n      stacks: {}\r\n    };\r\n    var stacks = columnsOnAxis.stacks;\r\n    columnsMap[axisKey] = columnsOnAxis;\r\n    var stackId = getSeriesStackId(seriesModel);\r\n\r\n    if (!stacks[stackId]) {\r\n      columnsOnAxis.autoWidthCount++;\r\n    }\r\n\r\n    stacks[stackId] = stacks[stackId] || {\r\n      width: 0,\r\n      maxWidth: 0\r\n    };\r\n    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);\r\n    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);\r\n    var barGap = seriesModel.get('barGap');\r\n    var barCategoryGap = seriesModel.get('barCategoryGap');\r\n\r\n    if (barWidth && !stacks[stackId].width) {\r\n      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\r\n      stacks[stackId].width = barWidth;\r\n      columnsOnAxis.remainedWidth -= barWidth;\r\n    }\r\n\r\n    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\r\n    barGap != null && (columnsOnAxis.gap = barGap);\r\n    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);\r\n  });\r\n  var result = {};\r\n  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\r\n    result[coordSysName] = {};\r\n    var stacks = columnsOnAxis.stacks;\r\n    var bandWidth = columnsOnAxis.bandWidth;\r\n    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\r\n    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\r\n    var remainedWidth = columnsOnAxis.remainedWidth;\r\n    var autoWidthCount = columnsOnAxis.autoWidthCount;\r\n    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\r\n    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth\r\n\r\n    zrUtil.each(stacks, function (column, stack) {\r\n      var maxWidth = column.maxWidth;\r\n\r\n      if (maxWidth && maxWidth < autoWidth) {\r\n        maxWidth = Math.min(maxWidth, remainedWidth);\r\n\r\n        if (column.width) {\r\n          maxWidth = Math.min(maxWidth, column.width);\r\n        }\r\n\r\n        remainedWidth -= maxWidth;\r\n        column.width = maxWidth;\r\n        autoWidthCount--;\r\n      }\r\n    }); // Recalculate width again\r\n\r\n    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\r\n    autoWidth = Math.max(autoWidth, 0);\r\n    var widthSum = 0;\r\n    var lastColumn;\r\n    zrUtil.each(stacks, function (column, idx) {\r\n      if (!column.width) {\r\n        column.width = autoWidth;\r\n      }\r\n\r\n      lastColumn = column;\r\n      widthSum += column.width * (1 + barGapPercent);\r\n    });\r\n\r\n    if (lastColumn) {\r\n      widthSum -= lastColumn.width * barGapPercent;\r\n    }\r\n\r\n    var offset = -widthSum / 2;\r\n    zrUtil.each(stacks, function (column, stackId) {\r\n      result[coordSysName][stackId] = result[coordSysName][stackId] || {\r\n        offset: offset,\r\n        width: column.width\r\n      };\r\n      offset += column.width * (1 + barGapPercent);\r\n    });\r\n  });\r\n  return result;\r\n}\r\n\r\nvar _default = barLayoutPolar;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}