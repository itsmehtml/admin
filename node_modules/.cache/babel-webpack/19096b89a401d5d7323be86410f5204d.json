{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nfunction defaultKeyGetter(item) {\n  return item;\n}\n/**\r\n * @param {Array} oldArr\r\n * @param {Array} newArr\r\n * @param {Function} oldKeyGetter\r\n * @param {Function} newKeyGetter\r\n * @param {Object} [context] Can be visited by this.context in callback.\r\n */\n\n\nfunction DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {\n  this._old = oldArr;\n  this._new = newArr;\n  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n  this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n  this.context = context;\n}\n\nDataDiffer.prototype = {\n  constructor: DataDiffer,\n\n  /**\r\n   * Callback function when add a data\r\n   */\n  add: function add(func) {\n    this._add = func;\n    return this;\n  },\n\n  /**\r\n   * Callback function when update a data\r\n   */\n  update: function update(func) {\n    this._update = func;\n    return this;\n  },\n\n  /**\r\n   * Callback function when remove a data\r\n   */\n  remove: function remove(func) {\n    this._remove = func;\n    return this;\n  },\n  execute: function execute() {\n    var oldArr = this._old;\n    var newArr = this._new;\n    var oldDataIndexMap = {};\n    var newDataIndexMap = {};\n    var oldDataKeyArr = [];\n    var newDataKeyArr = [];\n    var i;\n    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);\n    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);\n\n    for (i = 0; i < oldArr.length; i++) {\n      var key = oldDataKeyArr[i];\n      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.\n\n      if (idx != null) {\n        // Consider there is duplicate key (for example, use dataItem.name as key).\n        // We should make sure every item in newArr and oldArr can be visited.\n        var len = idx.length;\n\n        if (len) {\n          len === 1 && (newDataIndexMap[key] = null);\n          idx = idx.shift();\n        } else {\n          newDataIndexMap[key] = null;\n        }\n\n        this._update && this._update(idx, i);\n      } else {\n        this._remove && this._remove(i);\n      }\n    }\n\n    for (var i = 0; i < newDataKeyArr.length; i++) {\n      var key = newDataKeyArr[i];\n\n      if (newDataIndexMap.hasOwnProperty(key)) {\n        var idx = newDataIndexMap[key];\n\n        if (idx == null) {\n          continue;\n        } // idx can never be empty array here. see 'set null' logic above.\n\n\n        if (!idx.length) {\n          this._add && this._add(idx);\n        } else {\n          for (var j = 0, len = idx.length; j < len; j++) {\n            this._add && this._add(idx[j]);\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {\n  for (var i = 0; i < arr.length; i++) {\n    // Add prefix to avoid conflict with Object.prototype.\n    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);\n    var existence = map[key];\n\n    if (existence == null) {\n      keyArr.push(key);\n      map[key] = i;\n    } else {\n      if (!existence.length) {\n        map[key] = existence = [existence];\n      }\n\n      existence.push(i);\n    }\n  }\n}\n\nvar _default = DataDiffer;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/data/DataDiffer.js"],"names":["defaultKeyGetter","item","DataDiffer","oldArr","newArr","oldKeyGetter","newKeyGetter","context","_old","_new","_oldKeyGetter","_newKeyGetter","prototype","constructor","add","func","_add","update","_update","remove","_remove","execute","oldDataIndexMap","newDataIndexMap","oldDataKeyArr","newDataKeyArr","i","initIndexMap","length","key","idx","len","shift","hasOwnProperty","j","arr","map","keyArr","keyGetterName","dataDiffer","existence","push","_default","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAOA,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,YAApC,EAAkDC,YAAlD,EAAgEC,OAAhE,EAAyE;AACvE,OAAKC,IAAL,GAAYL,MAAZ;AACA,OAAKM,IAAL,GAAYL,MAAZ;AACA,OAAKM,aAAL,GAAqBL,YAAY,IAAIL,gBAArC;AACA,OAAKW,aAAL,GAAqBL,YAAY,IAAIN,gBAArC;AACA,OAAKO,OAAL,GAAeA,OAAf;AACD;;AAEDL,UAAU,CAACU,SAAX,GAAuB;AACrBC,EAAAA,WAAW,EAAEX,UADQ;;AAGrB;AACF;AACA;AACEY,EAAAA,GAAG,EAAE,aAAUC,IAAV,EAAgB;AACnB,SAAKC,IAAL,GAAYD,IAAZ;AACA,WAAO,IAAP;AACD,GAToB;;AAWrB;AACF;AACA;AACEE,EAAAA,MAAM,EAAE,gBAAUF,IAAV,EAAgB;AACtB,SAAKG,OAAL,GAAeH,IAAf;AACA,WAAO,IAAP;AACD,GAjBoB;;AAmBrB;AACF;AACA;AACEI,EAAAA,MAAM,EAAE,gBAAUJ,IAAV,EAAgB;AACtB,SAAKK,OAAL,GAAeL,IAAf;AACA,WAAO,IAAP;AACD,GAzBoB;AA0BrBM,EAAAA,OAAO,EAAE,mBAAY;AACnB,QAAIlB,MAAM,GAAG,KAAKK,IAAlB;AACA,QAAIJ,MAAM,GAAG,KAAKK,IAAlB;AACA,QAAIa,eAAe,GAAG,EAAtB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,CAAJ;AACAC,IAAAA,YAAY,CAACxB,MAAD,EAASmB,eAAT,EAA0BE,aAA1B,EAAyC,eAAzC,EAA0D,IAA1D,CAAZ;AACAG,IAAAA,YAAY,CAACvB,MAAD,EAASmB,eAAT,EAA0BE,aAA1B,EAAyC,eAAzC,EAA0D,IAA1D,CAAZ;;AAEA,SAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGvB,MAAM,CAACyB,MAAvB,EAA+BF,CAAC,EAAhC,EAAoC;AAClC,UAAIG,GAAG,GAAGL,aAAa,CAACE,CAAD,CAAvB;AACA,UAAII,GAAG,GAAGP,eAAe,CAACM,GAAD,CAAzB,CAFkC,CAEF;;AAEhC,UAAIC,GAAG,IAAI,IAAX,EAAiB;AACf;AACA;AACA,YAAIC,GAAG,GAAGD,GAAG,CAACF,MAAd;;AAEA,YAAIG,GAAJ,EAAS;AACPA,UAAAA,GAAG,KAAK,CAAR,KAAcR,eAAe,CAACM,GAAD,CAAf,GAAuB,IAArC;AACAC,UAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,EAAN;AACD,SAHD,MAGO;AACLT,UAAAA,eAAe,CAACM,GAAD,CAAf,GAAuB,IAAvB;AACD;;AAED,aAAKX,OAAL,IAAgB,KAAKA,OAAL,CAAaY,GAAb,EAAkBJ,CAAlB,CAAhB;AACD,OAbD,MAaO;AACL,aAAKN,OAAL,IAAgB,KAAKA,OAAL,CAAaM,CAAb,CAAhB;AACD;AACF;;AAED,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACG,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC7C,UAAIG,GAAG,GAAGJ,aAAa,CAACC,CAAD,CAAvB;;AAEA,UAAIH,eAAe,CAACU,cAAhB,CAA+BJ,GAA/B,CAAJ,EAAyC;AACvC,YAAIC,GAAG,GAAGP,eAAe,CAACM,GAAD,CAAzB;;AAEA,YAAIC,GAAG,IAAI,IAAX,EAAiB;AACf;AACD,SALsC,CAKrC;;;AAGF,YAAI,CAACA,GAAG,CAACF,MAAT,EAAiB;AACf,eAAKZ,IAAL,IAAa,KAAKA,IAAL,CAAUc,GAAV,CAAb;AACD,SAFD,MAEO;AACL,eAAK,IAAII,CAAC,GAAG,CAAR,EAAWH,GAAG,GAAGD,GAAG,CAACF,MAA1B,EAAkCM,CAAC,GAAGH,GAAtC,EAA2CG,CAAC,EAA5C,EAAgD;AAC9C,iBAAKlB,IAAL,IAAa,KAAKA,IAAL,CAAUc,GAAG,CAACI,CAAD,CAAb,CAAb;AACD;AACF;AACF;AACF;AACF;AA/EoB,CAAvB;;AAkFA,SAASP,YAAT,CAAsBQ,GAAtB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwCC,aAAxC,EAAuDC,UAAvD,EAAmE;AACjE,OAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,GAAG,CAACP,MAAxB,EAAgCF,CAAC,EAAjC,EAAqC;AACnC;AACA,QAAIG,GAAG,GAAG,SAASU,UAAU,CAACD,aAAD,CAAV,CAA0BH,GAAG,CAACT,CAAD,CAA7B,EAAkCA,CAAlC,CAAnB;AACA,QAAIc,SAAS,GAAGJ,GAAG,CAACP,GAAD,CAAnB;;AAEA,QAAIW,SAAS,IAAI,IAAjB,EAAuB;AACrBH,MAAAA,MAAM,CAACI,IAAP,CAAYZ,GAAZ;AACAO,MAAAA,GAAG,CAACP,GAAD,CAAH,GAAWH,CAAX;AACD,KAHD,MAGO;AACL,UAAI,CAACc,SAAS,CAACZ,MAAf,EAAuB;AACrBQ,QAAAA,GAAG,CAACP,GAAD,CAAH,GAAWW,SAAS,GAAG,CAACA,SAAD,CAAvB;AACD;;AAEDA,MAAAA,SAAS,CAACC,IAAV,CAAef,CAAf;AACD;AACF;AACF;;AAED,IAAIgB,QAAQ,GAAGxC,UAAf;AACAyC,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nfunction defaultKeyGetter(item) {\r\n  return item;\r\n}\r\n/**\r\n * @param {Array} oldArr\r\n * @param {Array} newArr\r\n * @param {Function} oldKeyGetter\r\n * @param {Function} newKeyGetter\r\n * @param {Object} [context] Can be visited by this.context in callback.\r\n */\r\n\r\n\r\nfunction DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {\r\n  this._old = oldArr;\r\n  this._new = newArr;\r\n  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\r\n  this._newKeyGetter = newKeyGetter || defaultKeyGetter;\r\n  this.context = context;\r\n}\r\n\r\nDataDiffer.prototype = {\r\n  constructor: DataDiffer,\r\n\r\n  /**\r\n   * Callback function when add a data\r\n   */\r\n  add: function (func) {\r\n    this._add = func;\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Callback function when update a data\r\n   */\r\n  update: function (func) {\r\n    this._update = func;\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Callback function when remove a data\r\n   */\r\n  remove: function (func) {\r\n    this._remove = func;\r\n    return this;\r\n  },\r\n  execute: function () {\r\n    var oldArr = this._old;\r\n    var newArr = this._new;\r\n    var oldDataIndexMap = {};\r\n    var newDataIndexMap = {};\r\n    var oldDataKeyArr = [];\r\n    var newDataKeyArr = [];\r\n    var i;\r\n    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);\r\n    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);\r\n\r\n    for (i = 0; i < oldArr.length; i++) {\r\n      var key = oldDataKeyArr[i];\r\n      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.\r\n\r\n      if (idx != null) {\r\n        // Consider there is duplicate key (for example, use dataItem.name as key).\r\n        // We should make sure every item in newArr and oldArr can be visited.\r\n        var len = idx.length;\r\n\r\n        if (len) {\r\n          len === 1 && (newDataIndexMap[key] = null);\r\n          idx = idx.shift();\r\n        } else {\r\n          newDataIndexMap[key] = null;\r\n        }\r\n\r\n        this._update && this._update(idx, i);\r\n      } else {\r\n        this._remove && this._remove(i);\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < newDataKeyArr.length; i++) {\r\n      var key = newDataKeyArr[i];\r\n\r\n      if (newDataIndexMap.hasOwnProperty(key)) {\r\n        var idx = newDataIndexMap[key];\r\n\r\n        if (idx == null) {\r\n          continue;\r\n        } // idx can never be empty array here. see 'set null' logic above.\r\n\r\n\r\n        if (!idx.length) {\r\n          this._add && this._add(idx);\r\n        } else {\r\n          for (var j = 0, len = idx.length; j < len; j++) {\r\n            this._add && this._add(idx[j]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {\r\n  for (var i = 0; i < arr.length; i++) {\r\n    // Add prefix to avoid conflict with Object.prototype.\r\n    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);\r\n    var existence = map[key];\r\n\r\n    if (existence == null) {\r\n      keyArr.push(key);\r\n      map[key] = i;\r\n    } else {\r\n      if (!existence.length) {\r\n        map[key] = existence = [existence];\r\n      }\r\n\r\n      existence.push(i);\r\n    }\r\n  }\r\n}\r\n\r\nvar _default = DataDiffer;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}