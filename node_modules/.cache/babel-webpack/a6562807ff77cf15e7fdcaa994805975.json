{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar echarts = require(\"../../echarts\");\n\nvar globalListener = require(\"./globalListener\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n\nvar AxisPointerView = echarts.extendComponentView({\n  type: 'axisPointer',\n  render: function render(globalAxisPointerModel, ecModel, api) {\n    var globalTooltipModel = ecModel.getComponent('tooltip');\n    var triggerOn = globalAxisPointerModel.get('triggerOn') || globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click'; // Register global listener in AxisPointerView to enable\n    // AxisPointerView to be independent to Tooltip.\n\n    globalListener.register('axisPointer', api, function (currTrigger, e, dispatchAction) {\n      // If 'none', it is not controlled by mouse totally.\n      if (triggerOn !== 'none' && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)) {\n        dispatchAction({\n          type: 'updateAxisPointer',\n          currTrigger: currTrigger,\n          x: e && e.offsetX,\n          y: e && e.offsetY\n        });\n      }\n    });\n  },\n\n  /**\r\n   * @override\r\n   */\n  remove: function remove(ecModel, api) {\n    globalListener.unregister(api.getZr(), 'axisPointer');\n    AxisPointerView.superApply(this._model, 'remove', arguments);\n  },\n\n  /**\r\n   * @override\r\n   */\n  dispose: function dispose(ecModel, api) {\n    globalListener.unregister('axisPointer', api);\n    AxisPointerView.superApply(this._model, 'dispose', arguments);\n  }\n});\nvar _default = AxisPointerView;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/component/axisPointer/AxisPointerView.js"],"names":["echarts","require","globalListener","AxisPointerView","extendComponentView","type","render","globalAxisPointerModel","ecModel","api","globalTooltipModel","getComponent","triggerOn","get","register","currTrigger","e","dispatchAction","indexOf","x","offsetX","y","offsetY","remove","unregister","getZr","superApply","_model","arguments","dispose","_default","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,eAAe,GAAGH,OAAO,CAACI,mBAAR,CAA4B;AAChDC,EAAAA,IAAI,EAAE,aAD0C;AAEhDC,EAAAA,MAAM,EAAE,gBAAUC,sBAAV,EAAkCC,OAAlC,EAA2CC,GAA3C,EAAgD;AACtD,QAAIC,kBAAkB,GAAGF,OAAO,CAACG,YAAR,CAAqB,SAArB,CAAzB;AACA,QAAIC,SAAS,GAAGL,sBAAsB,CAACM,GAAvB,CAA2B,WAA3B,KAA2CH,kBAAkB,IAAIA,kBAAkB,CAACG,GAAnB,CAAuB,WAAvB,CAAjE,IAAwG,iBAAxH,CAFsD,CAEqF;AAC3I;;AAEAX,IAAAA,cAAc,CAACY,QAAf,CAAwB,aAAxB,EAAuCL,GAAvC,EAA4C,UAAUM,WAAV,EAAuBC,CAAvB,EAA0BC,cAA1B,EAA0C;AACpF;AACA,UAAIL,SAAS,KAAK,MAAd,KAAyBG,WAAW,KAAK,OAAhB,IAA2BH,SAAS,CAACM,OAAV,CAAkBH,WAAlB,KAAkC,CAAtF,CAAJ,EAA8F;AAC5FE,QAAAA,cAAc,CAAC;AACbZ,UAAAA,IAAI,EAAE,mBADO;AAEbU,UAAAA,WAAW,EAAEA,WAFA;AAGbI,UAAAA,CAAC,EAAEH,CAAC,IAAIA,CAAC,CAACI,OAHG;AAIbC,UAAAA,CAAC,EAAEL,CAAC,IAAIA,CAAC,CAACM;AAJG,SAAD,CAAd;AAMD;AACF,KAVD;AAWD,GAlB+C;;AAoBhD;AACF;AACA;AACEC,EAAAA,MAAM,EAAE,gBAAUf,OAAV,EAAmBC,GAAnB,EAAwB;AAC9BP,IAAAA,cAAc,CAACsB,UAAf,CAA0Bf,GAAG,CAACgB,KAAJ,EAA1B,EAAuC,aAAvC;AACAtB,IAAAA,eAAe,CAACuB,UAAhB,CAA2B,KAAKC,MAAhC,EAAwC,QAAxC,EAAkDC,SAAlD;AACD,GA1B+C;;AA4BhD;AACF;AACA;AACEC,EAAAA,OAAO,EAAE,iBAAUrB,OAAV,EAAmBC,GAAnB,EAAwB;AAC/BP,IAAAA,cAAc,CAACsB,UAAf,CAA0B,aAA1B,EAAyCf,GAAzC;AACAN,IAAAA,eAAe,CAACuB,UAAhB,CAA2B,KAAKC,MAAhC,EAAwC,SAAxC,EAAmDC,SAAnD;AACD;AAlC+C,CAA5B,CAAtB;AAoCA,IAAIE,QAAQ,GAAG3B,eAAf;AACA4B,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar echarts = require(\"../../echarts\");\r\n\r\nvar globalListener = require(\"./globalListener\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar AxisPointerView = echarts.extendComponentView({\r\n  type: 'axisPointer',\r\n  render: function (globalAxisPointerModel, ecModel, api) {\r\n    var globalTooltipModel = ecModel.getComponent('tooltip');\r\n    var triggerOn = globalAxisPointerModel.get('triggerOn') || globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click'; // Register global listener in AxisPointerView to enable\r\n    // AxisPointerView to be independent to Tooltip.\r\n\r\n    globalListener.register('axisPointer', api, function (currTrigger, e, dispatchAction) {\r\n      // If 'none', it is not controlled by mouse totally.\r\n      if (triggerOn !== 'none' && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)) {\r\n        dispatchAction({\r\n          type: 'updateAxisPointer',\r\n          currTrigger: currTrigger,\r\n          x: e && e.offsetX,\r\n          y: e && e.offsetY\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  remove: function (ecModel, api) {\r\n    globalListener.unregister(api.getZr(), 'axisPointer');\r\n    AxisPointerView.superApply(this._model, 'remove', arguments);\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  dispose: function (ecModel, api) {\r\n    globalListener.unregister('axisPointer', api);\r\n    AxisPointerView.superApply(this._model, 'dispose', arguments);\r\n  }\r\n});\r\nvar _default = AxisPointerView;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}