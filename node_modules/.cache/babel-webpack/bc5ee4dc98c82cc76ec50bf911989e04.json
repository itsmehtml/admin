{"ast":null,"code":"import _createClass from \"C:/Users/user/Desktop/Admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/user/Desktop/Admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate, __param } from 'tslib';\nimport { Injectable, ElementRef, Inject, Optional, PLATFORM_ID, Input, Directive, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { create } from 'ladda';\nimport * as ɵngcc0 from '@angular/core';\n\nvar LaddaConfigArgs = function LaddaConfigArgs() {\n  _classCallCheck(this, LaddaConfigArgs);\n};\n\nvar configAttributes = {\n  \"data-style\": \"style\",\n  \"data-spinner-size\": \"spinnerSize\",\n  \"data-spinner-color\": \"spinnerColor\",\n  \"data-spinner-lines\": \"spinnerLines\"\n};\n\nvar LaddaConfig = function LaddaConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, LaddaConfig);\n\n  Object.assign(this, config);\n};\n\nLaddaConfig.ɵfac = function LaddaConfig_Factory(t) {\n  return new (t || LaddaConfig)(ɵngcc0.ɵɵinject(LaddaConfigArgs));\n};\n\nLaddaConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LaddaConfig,\n  factory: function factory(t) {\n    return LaddaConfig.ɵfac(t);\n  }\n});\n\nLaddaConfig.ctorParameters = function () {\n  return [{\n    type: LaddaConfigArgs\n  }];\n};\n\nvar LaddaDirective = /*#__PURE__*/function () {\n  function LaddaDirective(el, config, platformId) {\n    _classCallCheck(this, LaddaDirective);\n\n    this.platformId = platformId;\n    this.el = el.nativeElement;\n\n    if (!config) {\n      return;\n    } // apply default styles if they aren't overwritten by an attribute\n\n\n    for (var attribute in configAttributes) {\n      var configValue = config[configAttributes[attribute]];\n\n      if (!configValue) {\n        continue; // don't waste time reading the attribute\n      }\n\n      if (!this.el.getAttribute(attribute)) {\n        // attribute isn't set - apply the default config value\n        var value = typeof configValue === \"number\" ? configValue.toString() : configValue;\n        this.el.setAttribute(attribute, value);\n      }\n    }\n  }\n\n  _createClass(LaddaDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this.ladda) {\n        return; // needed since ngOnChanges is called before ngOnInit\n      }\n\n      if (changes.loading) {\n        this.updateLadda(changes.loading.previousValue);\n      }\n\n      if (changes.disabled) {\n        this.updateDisabled();\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      if (!isPlatformBrowser(this.platformId)) {\n        return;\n      }\n\n      this.ladda = create(this.el); // if the initial loading value isn't false, a timeout of 0 ms\n      // is necessary for the calculated spinner size to be correct.\n\n      setTimeout(function () {\n        _this.updateLadda(false);\n      }, 0);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.ladda) {\n        this.ladda.remove();\n      }\n    }\n  }, {\n    key: \"updateLadda\",\n    value: function updateLadda(previousValue) {\n      var loading = typeof this.loading === 'number' || !!this.loading;\n      var wasLoading = typeof previousValue === 'number' || !!previousValue;\n\n      if (!loading) {\n        if (wasLoading) {\n          this.ladda.stop();\n        }\n\n        return this.updateDisabled();\n      }\n\n      if (!wasLoading) {\n        this.ladda.start();\n      }\n\n      if (typeof this.loading === 'number') {\n        this.ladda.setProgress(this.loading);\n      }\n    }\n  }, {\n    key: \"updateDisabled\",\n    value: function updateDisabled() {\n      this.el.disabled = this.disabled;\n    }\n  }]);\n\n  return LaddaDirective;\n}();\n\nLaddaDirective.ɵfac = function LaddaDirective_Factory(t) {\n  return new (t || LaddaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LaddaConfig, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nLaddaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LaddaDirective,\n  selectors: [[\"\", \"ladda\", \"\"]],\n  inputs: {\n    loading: [\"ladda\", \"loading\"],\n    disabled: \"disabled\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nLaddaDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: LaddaConfigArgs,\n    decorators: [{\n      type: Inject,\n      args: [LaddaConfig]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\n__decorate([Input('ladda')], LaddaDirective.prototype, \"loading\", void 0);\n\n__decorate([Input()], LaddaDirective.prototype, \"disabled\", void 0);\n\nLaddaDirective = __decorate([__param(1, Inject(LaddaConfig)), __param(1, Optional()), __param(2, Inject(PLATFORM_ID))], LaddaDirective);\nvar LaddaModule_1;\n\nvar LaddaModule = LaddaModule_1 = /*#__PURE__*/function () {\n  function LaddaModule() {\n    _classCallCheck(this, LaddaModule);\n  }\n\n  _createClass(LaddaModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config) {\n      return {\n        ngModule: LaddaModule_1,\n        providers: [{\n          provide: LaddaConfig,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return LaddaModule;\n}();\n\nLaddaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: LaddaModule\n});\nLaddaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function LaddaModule_Factory(t) {\n    return new (t || LaddaModule)();\n  }\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LaddaConfig, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LaddaConfigArgs\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LaddaDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ladda]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LaddaConfigArgs,\n      decorators: [{\n        type: Inject,\n        args: [LaddaConfig]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    loading: [{\n      type: Input,\n      args: ['ladda']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LaddaModule, {\n    declarations: [LaddaDirective],\n    exports: [LaddaDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LaddaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LaddaDirective],\n      exports: [LaddaDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ladda\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes };","map":{"version":3,"sources":["angular2-ladda/lib/ladda-config.ts","angular2-ladda/lib/ladda.directive.ts","angular2-ladda/lib/ladda.module.ts","angular2-ladda/public-api.ts","angular2-ladda/angular2-ladda.ts"],"names":["createLadda"],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\r\n\r\nexport type laddaStyle =\r\n    \"expand-left\" | \"expand-right\" | \"expand-up\" | \"expand-down\" |\r\n    \"contract\" | \"contract-overlay\" | \"zoom-in\" | \"zoom-out\" |\r\n    \"slide-left\" | \"slide-right\" | \"slide-up\" | \"slide-down\";\r\n\r\nexport abstract class LaddaConfigArgs {\r\n    style?: laddaStyle;\r\n    spinnerSize?: number;\r\n    spinnerColor?: string;\r\n    spinnerLines?: number;\r\n}\r\n\r\nexport let configAttributes: {[key: string]: keyof LaddaConfigArgs} = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\n\r\n@Injectable()\r\nexport class LaddaConfig implements LaddaConfigArgs {\r\n    constructor(config: LaddaConfigArgs = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n","import {isPlatformBrowser} from '@angular/common';\r\nimport {Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID} from '@angular/core';\r\nimport {LaddaConfig, LaddaConfigArgs, configAttributes} from './ladda-config';\r\nimport {create as createLadda, LaddaButton} from 'ladda';\r\n\r\nexport type laddaValue = boolean | number | undefined | null;\r\n\r\n@Directive({\r\n    selector: '[ladda]'\r\n})\r\nexport class LaddaDirective implements OnInit, OnDestroy, OnChanges {\r\n    private el: HTMLButtonElement;\r\n    private ladda: LaddaButton;\r\n\r\n    @Input('ladda') loading: laddaValue;\r\n    @Input() disabled: boolean;\r\n\r\n    constructor(\r\n        el: ElementRef,\r\n        @Inject(LaddaConfig) @Optional() config: LaddaConfigArgs,\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n    ) {\r\n        this.el = el.nativeElement;\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n\r\n        this.ladda = createLadda(this.el);\r\n\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n\r\n    private updateLadda(previousValue: laddaValue): void {\r\n        let loading: boolean = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading: boolean = typeof previousValue === 'number' || !!previousValue;\r\n\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n\r\n            return this.updateDisabled();\r\n        }\r\n\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n\r\n    private updateDisabled(): void {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\n","import {NgModule, ModuleWithProviders} from '@angular/core';\r\nimport {LaddaDirective} from './ladda.directive';\r\nimport {LaddaConfigArgs, LaddaConfig} from './ladda-config';\r\n\r\n@NgModule({\r\n    declarations: [ LaddaDirective ],\r\n    exports:      [ LaddaDirective ],\r\n})\r\nexport class LaddaModule {\r\n    public static forRoot(config: LaddaConfigArgs): ModuleWithProviders<LaddaModule> {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ladda\r\n */\r\n\r\nexport * from './lib/ladda-config';\r\nexport * from './lib/ladda.directive';\r\nexport * from './lib/ladda.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}