{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar isString = _util.isString;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Note that it is too complicated to support 3d stack by value\r\n * (have to create two-dimension inverted index), so in 3d case\r\n * we just support that stacked by index.\r\n *\r\n * @param {module:echarts/model/Series} seriesModel\r\n * @param {Array.<string|Object>} dimensionInfoList The same as the input of <module:echarts/data/List>.\r\n *        The input dimensionInfoList will be modified.\r\n * @param {Object} [opt]\r\n * @param {boolean} [opt.stackedCoordDimension=''] Specify a coord dimension if needed.\r\n * @param {boolean} [opt.byIndex=false]\r\n * @return {Object} calculationInfo\r\n * {\r\n *     stackedDimension: string\r\n *     stackedByDimension: string\r\n *     isStackedByIndex: boolean\r\n *     stackedOverDimension: string\r\n *     stackResultDimension: string\r\n * }\r\n */\n\nfunction enableDataStack(seriesModel, dimensionInfoList, opt) {\n  opt = opt || {};\n  var byIndex = opt.byIndex;\n  var stackedCoordDimension = opt.stackedCoordDimension; // Compatibal: when `stack` is set as '', do not stack.\n\n  var mayStack = !!(seriesModel && seriesModel.get('stack'));\n  var stackedByDimInfo;\n  var stackedDimInfo;\n  var stackResultDimension;\n  var stackedOverDimension;\n  each(dimensionInfoList, function (dimensionInfo, index) {\n    if (isString(dimensionInfo)) {\n      dimensionInfoList[index] = dimensionInfo = {\n        name: dimensionInfo\n      };\n    }\n\n    if (mayStack && !dimensionInfo.isExtraCoord) {\n      // Find the first ordinal dimension as the stackedByDimInfo.\n      if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {\n        stackedByDimInfo = dimensionInfo;\n      } // Find the first stackable dimension as the stackedDimInfo.\n\n\n      if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {\n        stackedDimInfo = dimensionInfo;\n      }\n    }\n  });\n\n  if (stackedDimInfo && !byIndex && !stackedByDimInfo) {\n    // Compatible with previous design, value axis (time axis) only stack by index.\n    // It may make sense if the user provides elaborately constructed data.\n    byIndex = true;\n  } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.\n  // That put stack logic in List is for using conveniently in echarts extensions, but it\n  // might not be a good way.\n\n\n  if (stackedDimInfo) {\n    // Use a weird name that not duplicated with other names.\n    stackResultDimension = '__\\0ecstackresult';\n    stackedOverDimension = '__\\0ecstackedover'; // Create inverted index to fast query index by value.\n\n    if (stackedByDimInfo) {\n      stackedByDimInfo.createInvertedIndices = true;\n    }\n\n    var stackedDimCoordDim = stackedDimInfo.coordDim;\n    var stackedDimType = stackedDimInfo.type;\n    var stackedDimCoordIndex = 0;\n    each(dimensionInfoList, function (dimensionInfo) {\n      if (dimensionInfo.coordDim === stackedDimCoordDim) {\n        stackedDimCoordIndex++;\n      }\n    });\n    dimensionInfoList.push({\n      name: stackResultDimension,\n      coordDim: stackedDimCoordDim,\n      coordDimIndex: stackedDimCoordIndex,\n      type: stackedDimType,\n      isExtraCoord: true,\n      isCalculationCoord: true\n    });\n    stackedDimCoordIndex++;\n    dimensionInfoList.push({\n      name: stackedOverDimension,\n      // This dimension contains stack base (generally, 0), so do not set it as\n      // `stackedDimCoordDim` to avoid extent calculation, consider log scale.\n      coordDim: stackedOverDimension,\n      coordDimIndex: stackedDimCoordIndex,\n      type: stackedDimType,\n      isExtraCoord: true,\n      isCalculationCoord: true\n    });\n  }\n\n  return {\n    stackedDimension: stackedDimInfo && stackedDimInfo.name,\n    stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,\n    isStackedByIndex: byIndex,\n    stackedOverDimension: stackedOverDimension,\n    stackResultDimension: stackResultDimension\n  };\n}\n/**\r\n * @param {module:echarts/data/List} data\r\n * @param {string} stackedDim\r\n */\n\n\nfunction isDimensionStacked(data, stackedDim\n/*, stackedByDim*/\n) {\n  // Each single series only maps to one pair of axis. So we do not need to\n  // check stackByDim, whatever stacked by a dimension or stacked by index.\n  return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension'); // && (\n  //     stackedByDim != null\n  //         ? stackedByDim === data.getCalculationInfo('stackedByDimension')\n  //         : data.getCalculationInfo('isStackedByIndex')\n  // );\n}\n/**\r\n * @param {module:echarts/data/List} data\r\n * @param {string} targetDim\r\n * @param {string} [stackedByDim] If not input this parameter, check whether\r\n *                                stacked by index.\r\n * @return {string} dimension\r\n */\n\n\nfunction getStackedDimension(data, targetDim) {\n  return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;\n}\n\nexports.enableDataStack = enableDataStack;\nexports.isDimensionStacked = isDimensionStacked;\nexports.getStackedDimension = getStackedDimension;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/data/helper/dataStackHelper.js"],"names":["_util","require","each","isString","enableDataStack","seriesModel","dimensionInfoList","opt","byIndex","stackedCoordDimension","mayStack","get","stackedByDimInfo","stackedDimInfo","stackResultDimension","stackedOverDimension","dimensionInfo","index","name","isExtraCoord","ordinalMeta","type","coordDim","createInvertedIndices","stackedDimCoordDim","stackedDimType","stackedDimCoordIndex","push","coordDimIndex","isCalculationCoord","stackedDimension","stackedByDimension","isStackedByIndex","isDimensionStacked","data","stackedDim","getCalculationInfo","getStackedDimension","targetDim","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar _util = require(\"zrender/lib/core/util\");\r\n\r\nvar each = _util.each;\r\nvar isString = _util.isString;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * Note that it is too complicated to support 3d stack by value\r\n * (have to create two-dimension inverted index), so in 3d case\r\n * we just support that stacked by index.\r\n *\r\n * @param {module:echarts/model/Series} seriesModel\r\n * @param {Array.<string|Object>} dimensionInfoList The same as the input of <module:echarts/data/List>.\r\n *        The input dimensionInfoList will be modified.\r\n * @param {Object} [opt]\r\n * @param {boolean} [opt.stackedCoordDimension=''] Specify a coord dimension if needed.\r\n * @param {boolean} [opt.byIndex=false]\r\n * @return {Object} calculationInfo\r\n * {\r\n *     stackedDimension: string\r\n *     stackedByDimension: string\r\n *     isStackedByIndex: boolean\r\n *     stackedOverDimension: string\r\n *     stackResultDimension: string\r\n * }\r\n */\r\nfunction enableDataStack(seriesModel, dimensionInfoList, opt) {\r\n  opt = opt || {};\r\n  var byIndex = opt.byIndex;\r\n  var stackedCoordDimension = opt.stackedCoordDimension; // Compatibal: when `stack` is set as '', do not stack.\r\n\r\n  var mayStack = !!(seriesModel && seriesModel.get('stack'));\r\n  var stackedByDimInfo;\r\n  var stackedDimInfo;\r\n  var stackResultDimension;\r\n  var stackedOverDimension;\r\n  each(dimensionInfoList, function (dimensionInfo, index) {\r\n    if (isString(dimensionInfo)) {\r\n      dimensionInfoList[index] = dimensionInfo = {\r\n        name: dimensionInfo\r\n      };\r\n    }\r\n\r\n    if (mayStack && !dimensionInfo.isExtraCoord) {\r\n      // Find the first ordinal dimension as the stackedByDimInfo.\r\n      if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {\r\n        stackedByDimInfo = dimensionInfo;\r\n      } // Find the first stackable dimension as the stackedDimInfo.\r\n\r\n\r\n      if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {\r\n        stackedDimInfo = dimensionInfo;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (stackedDimInfo && !byIndex && !stackedByDimInfo) {\r\n    // Compatible with previous design, value axis (time axis) only stack by index.\r\n    // It may make sense if the user provides elaborately constructed data.\r\n    byIndex = true;\r\n  } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.\r\n  // That put stack logic in List is for using conveniently in echarts extensions, but it\r\n  // might not be a good way.\r\n\r\n\r\n  if (stackedDimInfo) {\r\n    // Use a weird name that not duplicated with other names.\r\n    stackResultDimension = '__\\0ecstackresult';\r\n    stackedOverDimension = '__\\0ecstackedover'; // Create inverted index to fast query index by value.\r\n\r\n    if (stackedByDimInfo) {\r\n      stackedByDimInfo.createInvertedIndices = true;\r\n    }\r\n\r\n    var stackedDimCoordDim = stackedDimInfo.coordDim;\r\n    var stackedDimType = stackedDimInfo.type;\r\n    var stackedDimCoordIndex = 0;\r\n    each(dimensionInfoList, function (dimensionInfo) {\r\n      if (dimensionInfo.coordDim === stackedDimCoordDim) {\r\n        stackedDimCoordIndex++;\r\n      }\r\n    });\r\n    dimensionInfoList.push({\r\n      name: stackResultDimension,\r\n      coordDim: stackedDimCoordDim,\r\n      coordDimIndex: stackedDimCoordIndex,\r\n      type: stackedDimType,\r\n      isExtraCoord: true,\r\n      isCalculationCoord: true\r\n    });\r\n    stackedDimCoordIndex++;\r\n    dimensionInfoList.push({\r\n      name: stackedOverDimension,\r\n      // This dimension contains stack base (generally, 0), so do not set it as\r\n      // `stackedDimCoordDim` to avoid extent calculation, consider log scale.\r\n      coordDim: stackedOverDimension,\r\n      coordDimIndex: stackedDimCoordIndex,\r\n      type: stackedDimType,\r\n      isExtraCoord: true,\r\n      isCalculationCoord: true\r\n    });\r\n  }\r\n\r\n  return {\r\n    stackedDimension: stackedDimInfo && stackedDimInfo.name,\r\n    stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,\r\n    isStackedByIndex: byIndex,\r\n    stackedOverDimension: stackedOverDimension,\r\n    stackResultDimension: stackResultDimension\r\n  };\r\n}\r\n/**\r\n * @param {module:echarts/data/List} data\r\n * @param {string} stackedDim\r\n */\r\n\r\n\r\nfunction isDimensionStacked(data, stackedDim\r\n/*, stackedByDim*/\r\n) {\r\n  // Each single series only maps to one pair of axis. So we do not need to\r\n  // check stackByDim, whatever stacked by a dimension or stacked by index.\r\n  return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension'); // && (\r\n  //     stackedByDim != null\r\n  //         ? stackedByDim === data.getCalculationInfo('stackedByDimension')\r\n  //         : data.getCalculationInfo('isStackedByIndex')\r\n  // );\r\n}\r\n/**\r\n * @param {module:echarts/data/List} data\r\n * @param {string} targetDim\r\n * @param {string} [stackedByDim] If not input this parameter, check whether\r\n *                                stacked by index.\r\n * @return {string} dimension\r\n */\r\n\r\n\r\nfunction getStackedDimension(data, targetDim) {\r\n  return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;\r\n}\r\n\r\nexports.enableDataStack = enableDataStack;\r\nexports.isDimensionStacked = isDimensionStacked;\r\nexports.getStackedDimension = getStackedDimension;"]},"metadata":{},"sourceType":"script"}