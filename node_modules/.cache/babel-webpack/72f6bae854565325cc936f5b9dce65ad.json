{"ast":null,"code":"var zrUtil = require(\"../core/util\");\n\nvar Style = require(\"./Style\");\n\nvar Element = require(\"../Element\");\n\nvar RectText = require(\"./mixin/RectText\");\n/**\r\n * Base class of all displayable graphic objects\r\n * @module zrender/graphic/Displayable\r\n */\n\n/**\r\n * @alias module:zrender/graphic/Displayable\r\n * @extends module:zrender/Element\r\n * @extends module:zrender/graphic/mixin/RectText\r\n */\n\n\nfunction Displayable(opts) {\n  opts = opts || {};\n  Element.call(this, opts); // Extend properties\n\n  for (var name in opts) {\n    if (opts.hasOwnProperty(name) && name !== 'style') {\n      this[name] = opts[name];\n    }\n  }\n  /**\r\n   * @type {module:zrender/graphic/Style}\r\n   */\n\n\n  this.style = new Style(opts.style, this);\n  this._rect = null; // Shapes for cascade clipping.\n  // Can only be `null`/`undefined` or an non-empty array, MUST NOT be an empty array.\n  // because it is easy to only using null to check whether clipPaths changed.\n\n  this.__clipPaths = null; // FIXME Stateful must be mixined after style is setted\n  // Stateful.call(this, opts);\n}\n\nDisplayable.prototype = {\n  constructor: Displayable,\n  type: 'displayable',\n\n  /**\r\n   * Dirty flag. From which painter will determine if this displayable object needs brush.\r\n   * @name module:zrender/graphic/Displayable#__dirty\r\n   * @type {boolean}\r\n   */\n  __dirty: true,\n\n  /**\r\n   * Whether the displayable object is visible. when it is true, the displayable object\r\n   * is not drawn, but the mouse event can still trigger the object.\r\n   * @name module:/zrender/graphic/Displayable#invisible\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  invisible: false,\n\n  /**\r\n   * @name module:/zrender/graphic/Displayable#z\r\n   * @type {number}\r\n   * @default 0\r\n   */\n  z: 0,\n\n  /**\r\n   * @name module:/zrender/graphic/Displayable#z\r\n   * @type {number}\r\n   * @default 0\r\n   */\n  z2: 0,\n\n  /**\r\n   * The z level determines the displayable object can be drawn in which layer canvas.\r\n   * @name module:/zrender/graphic/Displayable#zlevel\r\n   * @type {number}\r\n   * @default 0\r\n   */\n  zlevel: 0,\n\n  /**\r\n   * Whether it can be dragged.\r\n   * @name module:/zrender/graphic/Displayable#draggable\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  draggable: false,\n\n  /**\r\n   * Whether is it dragging.\r\n   * @name module:/zrender/graphic/Displayable#draggable\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  dragging: false,\n\n  /**\r\n   * Whether to respond to mouse events.\r\n   * @name module:/zrender/graphic/Displayable#silent\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  silent: false,\n\n  /**\r\n   * If enable culling\r\n   * @type {boolean}\r\n   * @default false\r\n   */\n  culling: false,\n\n  /**\r\n   * Mouse cursor when hovered\r\n   * @name module:/zrender/graphic/Displayable#cursor\r\n   * @type {string}\r\n   */\n  cursor: 'pointer',\n\n  /**\r\n   * If hover area is bounding rect\r\n   * @name module:/zrender/graphic/Displayable#rectHover\r\n   * @type {string}\r\n   */\n  rectHover: false,\n\n  /**\r\n   * Render the element progressively when the value >= 0,\r\n   * usefull for large data.\r\n   * @type {boolean}\r\n   */\n  progressive: false,\n\n  /**\r\n   * @type {boolean}\r\n   */\n  incremental: false,\n\n  /**\r\n   * Scale ratio for global scale.\r\n   * @type {boolean}\r\n   */\n  globalScaleRatio: 1,\n  beforeBrush: function beforeBrush(ctx) {},\n  afterBrush: function afterBrush(ctx) {},\n\n  /**\r\n   * Graphic drawing method.\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\n  // Interface\n  brush: function brush(ctx, prevEl) {},\n\n  /**\r\n   * Get the minimum bounding box.\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\n  // Interface\n  getBoundingRect: function getBoundingRect() {},\n\n  /**\r\n   * If displayable element contain coord x, y\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @return {boolean}\r\n   */\n  contain: function contain(x, y) {\n    return this.rectContain(x, y);\n  },\n\n  /**\r\n   * @param  {Function} cb\r\n   * @param  {}   context\r\n   */\n  traverse: function traverse(cb, context) {\n    cb.call(context, this);\n  },\n\n  /**\r\n   * If bounding rect of element contain coord x, y\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @return {boolean}\r\n   */\n  rectContain: function rectContain(x, y) {\n    var coord = this.transformCoordToLocal(x, y);\n    var rect = this.getBoundingRect();\n    return rect.contain(coord[0], coord[1]);\n  },\n\n  /**\r\n   * Mark displayable element dirty and refresh next frame\r\n   */\n  dirty: function dirty() {\n    this.__dirty = this.__dirtyText = true;\n    this._rect = null;\n    this.__zr && this.__zr.refresh();\n  },\n\n  /**\r\n   * If displayable object binded any event\r\n   * @return {boolean}\r\n   */\n  // TODO, events bound by bind\n  // isSilent: function () {\n  //     return !(\n  //         this.hoverable || this.draggable\n  //         || this.onmousemove || this.onmouseover || this.onmouseout\n  //         || this.onmousedown || this.onmouseup || this.onclick\n  //         || this.ondragenter || this.ondragover || this.ondragleave\n  //         || this.ondrop\n  //     );\n  // },\n\n  /**\r\n   * Alias for animate('style')\r\n   * @param {boolean} loop\r\n   */\n  animateStyle: function animateStyle(loop) {\n    return this.animate('style', loop);\n  },\n  attrKV: function attrKV(key, value) {\n    if (key !== 'style') {\n      Element.prototype.attrKV.call(this, key, value);\n    } else {\n      this.style.set(value);\n    }\n  },\n\n  /**\r\n   * @param {Object|string} key\r\n   * @param {*} value\r\n   */\n  setStyle: function setStyle(key, value) {\n    this.style.set(key, value);\n    this.dirty(false);\n    return this;\n  },\n\n  /**\r\n   * Use given style object\r\n   * @param  {Object} obj\r\n   */\n  useStyle: function useStyle(obj) {\n    this.style = new Style(obj, this);\n    this.dirty(false);\n    return this;\n  },\n\n  /**\r\n   * The string value of `textPosition` needs to be calculated to a real postion.\r\n   * For example, `'inside'` is calculated to `[rect.width/2, rect.height/2]`\r\n   * by default. See `contain/text.js#calculateTextPosition` for more details.\r\n   * But some coutom shapes like \"pin\", \"flag\" have center that is not exactly\r\n   * `[width/2, height/2]`. So we provide this hook to customize the calculation\r\n   * for those shapes. It will be called if the `style.textPosition` is a string.\r\n   * @param {Obejct} [out] Prepared out object. If not provided, this method should\r\n   *        be responsible for creating one.\r\n   * @param {module:zrender/graphic/Style} style\r\n   * @param {Object} rect {x, y, width, height}\r\n   * @return {Obejct} out The same as the input out.\r\n   *         {\r\n   *             x: number. mandatory.\r\n   *             y: number. mandatory.\r\n   *             textAlign: string. optional. use style.textAlign by default.\r\n   *             textVerticalAlign: string. optional. use style.textVerticalAlign by default.\r\n   *         }\r\n   */\n  calculateTextPosition: null\n};\nzrUtil.inherits(Displayable, Element);\nzrUtil.mixin(Displayable, RectText); // zrUtil.mixin(Displayable, Stateful);\n\nvar _default = Displayable;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/zrender/lib/graphic/Displayable.js"],"names":["zrUtil","require","Style","Element","RectText","Displayable","opts","call","name","hasOwnProperty","style","_rect","__clipPaths","prototype","constructor","type","__dirty","invisible","z","z2","zlevel","draggable","dragging","silent","culling","cursor","rectHover","progressive","incremental","globalScaleRatio","beforeBrush","ctx","afterBrush","brush","prevEl","getBoundingRect","contain","x","y","rectContain","traverse","cb","context","coord","transformCoordToLocal","rect","dirty","__dirtyText","__zr","refresh","animateStyle","loop","animate","attrKV","key","value","set","setStyle","useStyle","obj","calculateTextPosition","inherits","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"../core/util\");\r\n\r\nvar Style = require(\"./Style\");\r\n\r\nvar Element = require(\"../Element\");\r\n\r\nvar RectText = require(\"./mixin/RectText\");\r\n\r\n/**\r\n * Base class of all displayable graphic objects\r\n * @module zrender/graphic/Displayable\r\n */\r\n\r\n/**\r\n * @alias module:zrender/graphic/Displayable\r\n * @extends module:zrender/Element\r\n * @extends module:zrender/graphic/mixin/RectText\r\n */\r\nfunction Displayable(opts) {\r\n  opts = opts || {};\r\n  Element.call(this, opts); // Extend properties\r\n\r\n  for (var name in opts) {\r\n    if (opts.hasOwnProperty(name) && name !== 'style') {\r\n      this[name] = opts[name];\r\n    }\r\n  }\r\n  /**\r\n   * @type {module:zrender/graphic/Style}\r\n   */\r\n\r\n\r\n  this.style = new Style(opts.style, this);\r\n  this._rect = null; // Shapes for cascade clipping.\r\n  // Can only be `null`/`undefined` or an non-empty array, MUST NOT be an empty array.\r\n  // because it is easy to only using null to check whether clipPaths changed.\r\n\r\n  this.__clipPaths = null; // FIXME Stateful must be mixined after style is setted\r\n  // Stateful.call(this, opts);\r\n}\r\n\r\nDisplayable.prototype = {\r\n  constructor: Displayable,\r\n  type: 'displayable',\r\n\r\n  /**\r\n   * Dirty flag. From which painter will determine if this displayable object needs brush.\r\n   * @name module:zrender/graphic/Displayable#__dirty\r\n   * @type {boolean}\r\n   */\r\n  __dirty: true,\r\n\r\n  /**\r\n   * Whether the displayable object is visible. when it is true, the displayable object\r\n   * is not drawn, but the mouse event can still trigger the object.\r\n   * @name module:/zrender/graphic/Displayable#invisible\r\n   * @type {boolean}\r\n   * @default false\r\n   */\r\n  invisible: false,\r\n\r\n  /**\r\n   * @name module:/zrender/graphic/Displayable#z\r\n   * @type {number}\r\n   * @default 0\r\n   */\r\n  z: 0,\r\n\r\n  /**\r\n   * @name module:/zrender/graphic/Displayable#z\r\n   * @type {number}\r\n   * @default 0\r\n   */\r\n  z2: 0,\r\n\r\n  /**\r\n   * The z level determines the displayable object can be drawn in which layer canvas.\r\n   * @name module:/zrender/graphic/Displayable#zlevel\r\n   * @type {number}\r\n   * @default 0\r\n   */\r\n  zlevel: 0,\r\n\r\n  /**\r\n   * Whether it can be dragged.\r\n   * @name module:/zrender/graphic/Displayable#draggable\r\n   * @type {boolean}\r\n   * @default false\r\n   */\r\n  draggable: false,\r\n\r\n  /**\r\n   * Whether is it dragging.\r\n   * @name module:/zrender/graphic/Displayable#draggable\r\n   * @type {boolean}\r\n   * @default false\r\n   */\r\n  dragging: false,\r\n\r\n  /**\r\n   * Whether to respond to mouse events.\r\n   * @name module:/zrender/graphic/Displayable#silent\r\n   * @type {boolean}\r\n   * @default false\r\n   */\r\n  silent: false,\r\n\r\n  /**\r\n   * If enable culling\r\n   * @type {boolean}\r\n   * @default false\r\n   */\r\n  culling: false,\r\n\r\n  /**\r\n   * Mouse cursor when hovered\r\n   * @name module:/zrender/graphic/Displayable#cursor\r\n   * @type {string}\r\n   */\r\n  cursor: 'pointer',\r\n\r\n  /**\r\n   * If hover area is bounding rect\r\n   * @name module:/zrender/graphic/Displayable#rectHover\r\n   * @type {string}\r\n   */\r\n  rectHover: false,\r\n\r\n  /**\r\n   * Render the element progressively when the value >= 0,\r\n   * usefull for large data.\r\n   * @type {boolean}\r\n   */\r\n  progressive: false,\r\n\r\n  /**\r\n   * @type {boolean}\r\n   */\r\n  incremental: false,\r\n\r\n  /**\r\n   * Scale ratio for global scale.\r\n   * @type {boolean}\r\n   */\r\n  globalScaleRatio: 1,\r\n  beforeBrush: function (ctx) {},\r\n  afterBrush: function (ctx) {},\r\n\r\n  /**\r\n   * Graphic drawing method.\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\r\n  // Interface\r\n  brush: function (ctx, prevEl) {},\r\n\r\n  /**\r\n   * Get the minimum bounding box.\r\n   * @return {module:zrender/core/BoundingRect}\r\n   */\r\n  // Interface\r\n  getBoundingRect: function () {},\r\n\r\n  /**\r\n   * If displayable element contain coord x, y\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @return {boolean}\r\n   */\r\n  contain: function (x, y) {\r\n    return this.rectContain(x, y);\r\n  },\r\n\r\n  /**\r\n   * @param  {Function} cb\r\n   * @param  {}   context\r\n   */\r\n  traverse: function (cb, context) {\r\n    cb.call(context, this);\r\n  },\r\n\r\n  /**\r\n   * If bounding rect of element contain coord x, y\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @return {boolean}\r\n   */\r\n  rectContain: function (x, y) {\r\n    var coord = this.transformCoordToLocal(x, y);\r\n    var rect = this.getBoundingRect();\r\n    return rect.contain(coord[0], coord[1]);\r\n  },\r\n\r\n  /**\r\n   * Mark displayable element dirty and refresh next frame\r\n   */\r\n  dirty: function () {\r\n    this.__dirty = this.__dirtyText = true;\r\n    this._rect = null;\r\n    this.__zr && this.__zr.refresh();\r\n  },\r\n\r\n  /**\r\n   * If displayable object binded any event\r\n   * @return {boolean}\r\n   */\r\n  // TODO, events bound by bind\r\n  // isSilent: function () {\r\n  //     return !(\r\n  //         this.hoverable || this.draggable\r\n  //         || this.onmousemove || this.onmouseover || this.onmouseout\r\n  //         || this.onmousedown || this.onmouseup || this.onclick\r\n  //         || this.ondragenter || this.ondragover || this.ondragleave\r\n  //         || this.ondrop\r\n  //     );\r\n  // },\r\n\r\n  /**\r\n   * Alias for animate('style')\r\n   * @param {boolean} loop\r\n   */\r\n  animateStyle: function (loop) {\r\n    return this.animate('style', loop);\r\n  },\r\n  attrKV: function (key, value) {\r\n    if (key !== 'style') {\r\n      Element.prototype.attrKV.call(this, key, value);\r\n    } else {\r\n      this.style.set(value);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @param {Object|string} key\r\n   * @param {*} value\r\n   */\r\n  setStyle: function (key, value) {\r\n    this.style.set(key, value);\r\n    this.dirty(false);\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Use given style object\r\n   * @param  {Object} obj\r\n   */\r\n  useStyle: function (obj) {\r\n    this.style = new Style(obj, this);\r\n    this.dirty(false);\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * The string value of `textPosition` needs to be calculated to a real postion.\r\n   * For example, `'inside'` is calculated to `[rect.width/2, rect.height/2]`\r\n   * by default. See `contain/text.js#calculateTextPosition` for more details.\r\n   * But some coutom shapes like \"pin\", \"flag\" have center that is not exactly\r\n   * `[width/2, height/2]`. So we provide this hook to customize the calculation\r\n   * for those shapes. It will be called if the `style.textPosition` is a string.\r\n   * @param {Obejct} [out] Prepared out object. If not provided, this method should\r\n   *        be responsible for creating one.\r\n   * @param {module:zrender/graphic/Style} style\r\n   * @param {Object} rect {x, y, width, height}\r\n   * @return {Obejct} out The same as the input out.\r\n   *         {\r\n   *             x: number. mandatory.\r\n   *             y: number. mandatory.\r\n   *             textAlign: string. optional. use style.textAlign by default.\r\n   *             textVerticalAlign: string. optional. use style.textVerticalAlign by default.\r\n   *         }\r\n   */\r\n  calculateTextPosition: null\r\n};\r\nzrUtil.inherits(Displayable, Element);\r\nzrUtil.mixin(Displayable, RectText); // zrUtil.mixin(Displayable, Stateful);\r\n\r\nvar _default = Displayable;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}