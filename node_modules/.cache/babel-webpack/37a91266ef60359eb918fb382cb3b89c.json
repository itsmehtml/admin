{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\n\nfunction _default(seriesType) {\n  return {\n    getTargetSeries: function getTargetSeries(ecModel) {\n      // Pie and funnel may use diferrent scope\n      var paletteScope = {};\n      var seiresModelMap = createHashMap();\n      ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n        seriesModel.__paletteScope = paletteScope;\n        seiresModelMap.set(seriesModel.uid, seriesModel);\n      });\n      return seiresModelMap;\n    },\n    reset: function reset(seriesModel, ecModel) {\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n        var singleDataBorderColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'borderColor', true);\n        var itemModel;\n\n        if (!singleDataColor || !singleDataBorderColor) {\n          // FIXME Performance\n          itemModel = dataAll.getItemModel(rawIdx);\n        }\n\n        if (!singleDataColor) {\n          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        }\n\n        if (!singleDataBorderColor) {\n          var borderColor = itemModel.get('itemStyle.borderColor'); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'borderColor', borderColor);\n          }\n        }\n      });\n    }\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/visual/dataColor.js"],"names":["_util","require","createHashMap","_default","seriesType","getTargetSeries","ecModel","paletteScope","seiresModelMap","eachSeriesByType","seriesModel","__paletteScope","set","uid","reset","dataAll","getRawData","idxMap","data","getData","each","idx","rawIdx","getRawIndex","filteredIdx","singleDataColor","getItemVisual","singleDataBorderColor","itemModel","getItemModel","color","get","getColorFromPalette","getName","count","setItemVisual","borderColor","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar _util = require(\"zrender/lib/core/util\");\r\n\r\nvar createHashMap = _util.createHashMap;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n// Pick color from palette for each data item.\r\n// Applicable for charts that require applying color palette\r\n// in data level (like pie, funnel, chord).\r\nfunction _default(seriesType) {\r\n  return {\r\n    getTargetSeries: function (ecModel) {\r\n      // Pie and funnel may use diferrent scope\r\n      var paletteScope = {};\r\n      var seiresModelMap = createHashMap();\r\n      ecModel.eachSeriesByType(seriesType, function (seriesModel) {\r\n        seriesModel.__paletteScope = paletteScope;\r\n        seiresModelMap.set(seriesModel.uid, seriesModel);\r\n      });\r\n      return seiresModelMap;\r\n    },\r\n    reset: function (seriesModel, ecModel) {\r\n      var dataAll = seriesModel.getRawData();\r\n      var idxMap = {};\r\n      var data = seriesModel.getData();\r\n      data.each(function (idx) {\r\n        var rawIdx = data.getRawIndex(idx);\r\n        idxMap[rawIdx] = idx;\r\n      });\r\n      dataAll.each(function (rawIdx) {\r\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\r\n\r\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\r\n        var singleDataBorderColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'borderColor', true);\r\n        var itemModel;\r\n\r\n        if (!singleDataColor || !singleDataBorderColor) {\r\n          // FIXME Performance\r\n          itemModel = dataAll.getItemModel(rawIdx);\r\n        }\r\n\r\n        if (!singleDataColor) {\r\n          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Data is not filtered\r\n\r\n          if (filteredIdx != null) {\r\n            data.setItemVisual(filteredIdx, 'color', color);\r\n          }\r\n        }\r\n\r\n        if (!singleDataBorderColor) {\r\n          var borderColor = itemModel.get('itemStyle.borderColor'); // Data is not filtered\r\n\r\n          if (filteredIdx != null) {\r\n            data.setItemVisual(filteredIdx, 'borderColor', borderColor);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}