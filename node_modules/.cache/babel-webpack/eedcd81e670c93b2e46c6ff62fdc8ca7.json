{"ast":null,"code":"var textHelper = require(\"../helper/text\");\n\nvar BoundingRect = require(\"../../core/BoundingRect\");\n\nvar _constant = require(\"../constant\");\n\nvar WILL_BE_RESTORED = _constant.WILL_BE_RESTORED;\n/**\r\n * Mixin for drawing text in a element bounding rect\r\n * @module zrender/mixin/RectText\r\n */\n\nvar tmpRect = new BoundingRect();\n\nvar RectText = function RectText() {};\n\nRectText.prototype = {\n  constructor: RectText,\n\n  /**\r\n   * Draw text in a rect with specified position.\r\n   * @param  {CanvasRenderingContext2D} ctx\r\n   * @param  {Object} rect Displayable rect\r\n   */\n  drawRectText: function drawRectText(ctx, rect) {\n    var style = this.style;\n    rect = style.textRect || rect; // Optimize, avoid normalize every time.\n\n    this.__dirty && textHelper.normalizeTextStyle(style, true);\n    var text = style.text; // Convert to string\n\n    text != null && (text += '');\n\n    if (!textHelper.needDrawText(text, style)) {\n      return;\n    } // FIXME\n    // Do not provide prevEl to `textHelper.renderText` for ctx prop cache,\n    // but use `ctx.save()` and `ctx.restore()`. Because the cache for rect\n    // text propably break the cache for its host elements.\n\n\n    ctx.save(); // Transform rect to view space\n\n    var transform = this.transform;\n\n    if (!style.transformText) {\n      if (transform) {\n        tmpRect.copy(rect);\n        tmpRect.applyTransform(transform);\n        rect = tmpRect;\n      }\n    } else {\n      this.setTransform(ctx);\n    } // transformText and textRotation can not be used at the same time.\n\n\n    textHelper.renderText(this, ctx, text, style, rect, WILL_BE_RESTORED);\n    ctx.restore();\n  }\n};\nvar _default = RectText;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/zrender/lib/graphic/mixin/RectText.js"],"names":["textHelper","require","BoundingRect","_constant","WILL_BE_RESTORED","tmpRect","RectText","prototype","constructor","drawRectText","ctx","rect","style","textRect","__dirty","normalizeTextStyle","text","needDrawText","save","transform","transformText","copy","applyTransform","setTransform","renderText","restore","_default","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,gBAAgB,GAAGD,SAAS,CAACC,gBAAjC;AAEA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,IAAIH,YAAJ,EAAd;;AAEA,IAAII,QAAQ,GAAG,SAAXA,QAAW,GAAY,CAAE,CAA7B;;AAEAA,QAAQ,CAACC,SAAT,GAAqB;AACnBC,EAAAA,WAAW,EAAEF,QADM;;AAGnB;AACF;AACA;AACA;AACA;AACEG,EAAAA,YAAY,EAAE,sBAAUC,GAAV,EAAeC,IAAf,EAAqB;AACjC,QAAIC,KAAK,GAAG,KAAKA,KAAjB;AACAD,IAAAA,IAAI,GAAGC,KAAK,CAACC,QAAN,IAAkBF,IAAzB,CAFiC,CAEF;;AAE/B,SAAKG,OAAL,IAAgBd,UAAU,CAACe,kBAAX,CAA8BH,KAA9B,EAAqC,IAArC,CAAhB;AACA,QAAII,IAAI,GAAGJ,KAAK,CAACI,IAAjB,CALiC,CAKV;;AAEvBA,IAAAA,IAAI,IAAI,IAAR,KAAiBA,IAAI,IAAI,EAAzB;;AAEA,QAAI,CAAChB,UAAU,CAACiB,YAAX,CAAwBD,IAAxB,EAA8BJ,KAA9B,CAAL,EAA2C;AACzC;AACD,KAXgC,CAW/B;AACF;AACA;AACA;;;AAGAF,IAAAA,GAAG,CAACQ,IAAJ,GAjBiC,CAiBrB;;AAEZ,QAAIC,SAAS,GAAG,KAAKA,SAArB;;AAEA,QAAI,CAACP,KAAK,CAACQ,aAAX,EAA0B;AACxB,UAAID,SAAJ,EAAe;AACbd,QAAAA,OAAO,CAACgB,IAAR,CAAaV,IAAb;AACAN,QAAAA,OAAO,CAACiB,cAAR,CAAuBH,SAAvB;AACAR,QAAAA,IAAI,GAAGN,OAAP;AACD;AACF,KAND,MAMO;AACL,WAAKkB,YAAL,CAAkBb,GAAlB;AACD,KA7BgC,CA6B/B;;;AAGFV,IAAAA,UAAU,CAACwB,UAAX,CAAsB,IAAtB,EAA4Bd,GAA5B,EAAiCM,IAAjC,EAAuCJ,KAAvC,EAA8CD,IAA9C,EAAoDP,gBAApD;AACAM,IAAAA,GAAG,CAACe,OAAJ;AACD;AA1CkB,CAArB;AA4CA,IAAIC,QAAQ,GAAGpB,QAAf;AACAqB,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["var textHelper = require(\"../helper/text\");\r\n\r\nvar BoundingRect = require(\"../../core/BoundingRect\");\r\n\r\nvar _constant = require(\"../constant\");\r\n\r\nvar WILL_BE_RESTORED = _constant.WILL_BE_RESTORED;\r\n\r\n/**\r\n * Mixin for drawing text in a element bounding rect\r\n * @module zrender/mixin/RectText\r\n */\r\nvar tmpRect = new BoundingRect();\r\n\r\nvar RectText = function () {};\r\n\r\nRectText.prototype = {\r\n  constructor: RectText,\r\n\r\n  /**\r\n   * Draw text in a rect with specified position.\r\n   * @param  {CanvasRenderingContext2D} ctx\r\n   * @param  {Object} rect Displayable rect\r\n   */\r\n  drawRectText: function (ctx, rect) {\r\n    var style = this.style;\r\n    rect = style.textRect || rect; // Optimize, avoid normalize every time.\r\n\r\n    this.__dirty && textHelper.normalizeTextStyle(style, true);\r\n    var text = style.text; // Convert to string\r\n\r\n    text != null && (text += '');\r\n\r\n    if (!textHelper.needDrawText(text, style)) {\r\n      return;\r\n    } // FIXME\r\n    // Do not provide prevEl to `textHelper.renderText` for ctx prop cache,\r\n    // but use `ctx.save()` and `ctx.restore()`. Because the cache for rect\r\n    // text propably break the cache for its host elements.\r\n\r\n\r\n    ctx.save(); // Transform rect to view space\r\n\r\n    var transform = this.transform;\r\n\r\n    if (!style.transformText) {\r\n      if (transform) {\r\n        tmpRect.copy(rect);\r\n        tmpRect.applyTransform(transform);\r\n        rect = tmpRect;\r\n      }\r\n    } else {\r\n      this.setTransform(ctx);\r\n    } // transformText and textRotation can not be used at the same time.\r\n\r\n\r\n    textHelper.renderText(this, ctx, text, style, rect, WILL_BE_RESTORED);\r\n    ctx.restore();\r\n  }\r\n};\r\nvar _default = RectText;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}