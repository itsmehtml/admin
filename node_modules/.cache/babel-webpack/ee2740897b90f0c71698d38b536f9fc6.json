{"ast":null,"code":"module.exports = function (hljs) {\n  function optional(s) {\n    return '(?:' + s + ')?';\n  }\n\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\n  var FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) + ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, {\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/\n    }]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<.*?>/,\n      end: /$/,\n      illegal: '\\\\n'\n    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid wchar_t' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' + 'concept co_await co_return co_yield requires ' + 'noexcept static_assert thread_local restrict final override ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'class struct',\n      end: /[{;:]/,\n      contains: [{\n        begin: /</,\n        end: />/,\n        contains: ['self']\n      }, // skip generic stuff\n      hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/highlight.js/lib/languages/cpp.js"],"names":["module","exports","hljs","optional","s","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","begin","CHARACTER_ESCAPES","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","concat","FUNCTION_DECLARATION","returnBegin","excludeEnd","aliases","preprocessor","strings"],"mappings":"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","sourcesContent":["module.exports = function(hljs) {\r\n  function optional(s) {\r\n    return '(?:' + s + ')?';\r\n  }\r\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)'\r\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::'\r\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\r\n  var FUNCTION_TYPE_RE = '(' +\r\n    DECLTYPE_AUTO_RE + '|' +\r\n    optional(NAMESPACE_RE) +'[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\r\n  ')';\r\n  var CPP_PRIMITIVE_TYPES = {\r\n    className: 'keyword',\r\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\r\n  };\r\n\r\n  // https://en.cppreference.com/w/cpp/language/escape\r\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\r\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)'\r\n  var STRINGS = {\r\n    className: 'string',\r\n    variants: [\r\n      {\r\n        begin: '(u8?|U|L)?\"', end: '\"',\r\n        illegal: '\\\\n',\r\n        contains: [hljs.BACKSLASH_ESCAPE]\r\n      },\r\n      {\r\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\r\n        illegal: '.'\r\n      },\r\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ }\r\n    ]\r\n  };\r\n\r\n  var NUMBERS = {\r\n    className: 'number',\r\n    variants: [\r\n      { begin: '\\\\b(0b[01\\']+)' },\r\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\r\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\r\n    ],\r\n    relevance: 0\r\n  };\r\n\r\n  var PREPROCESSOR =       {\r\n    className: 'meta',\r\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\r\n    keywords: {\r\n      'meta-keyword':\r\n        'if else elif endif define undef warning error line ' +\r\n        'pragma _Pragma ifdef ifndef include'\r\n    },\r\n    contains: [\r\n      {\r\n        begin: /\\\\\\n/, relevance: 0\r\n      },\r\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\r\n      {\r\n        className: 'meta-string',\r\n        begin: /<.*?>/, end: /$/,\r\n        illegal: '\\\\n',\r\n      },\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE\r\n    ]\r\n  };\r\n\r\n  var TITLE_MODE = {\r\n    className: 'title',\r\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\r\n    relevance: 0\r\n  };\r\n\r\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\r\n\r\n  var CPP_KEYWORDS = {\r\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\r\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\r\n      'unsigned long volatile static protected bool template mutable if public friend ' +\r\n      'do goto auto void enum else break extern using asm case typeid wchar_t' +\r\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\r\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\r\n      'concept co_await co_return co_yield requires ' +\r\n      'noexcept static_assert thread_local restrict final override ' +\r\n      'atomic_bool atomic_char atomic_schar ' +\r\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\r\n      'atomic_ullong new throw return ' +\r\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\r\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\r\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\r\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' +\r\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\r\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\r\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\r\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\r\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\r\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\r\n    literal: 'true false nullptr NULL'\r\n  };\r\n\r\n  var EXPRESSION_CONTAINS = [\r\n    CPP_PRIMITIVE_TYPES,\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    NUMBERS,\r\n    STRINGS\r\n  ];\r\n\r\n  var EXPRESSION_CONTEXT = {\r\n    // This mode covers expression context where we can't expect a function\r\n    // definition and shouldn't highlight anything that looks like one:\r\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\r\n    variants: [\r\n      {begin: /=/, end: /;/},\r\n      {begin: /\\(/, end: /\\)/},\r\n      {beginKeywords: 'new throw return else', end: /;/}\r\n    ],\r\n    keywords: CPP_KEYWORDS,\r\n    contains: EXPRESSION_CONTAINS.concat([\r\n      {\r\n        begin: /\\(/, end: /\\)/,\r\n        keywords: CPP_KEYWORDS,\r\n        contains: EXPRESSION_CONTAINS.concat(['self']),\r\n        relevance: 0\r\n      }\r\n    ]),\r\n    relevance: 0\r\n  };\r\n\r\n  var FUNCTION_DECLARATION = {\r\n    className: 'function',\r\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\r\n    returnBegin: true, end: /[{;=]/,\r\n    excludeEnd: true,\r\n    keywords: CPP_KEYWORDS,\r\n    illegal: /[^\\w\\s\\*&:<>]/,\r\n    contains: [\r\n\r\n      { // to prevent it from being confused as the function title\r\n        begin: DECLTYPE_AUTO_RE,\r\n        keywords: CPP_KEYWORDS,\r\n        relevance: 0,\r\n      },\r\n      {\r\n        begin: FUNCTION_TITLE, returnBegin: true,\r\n        contains: [TITLE_MODE],\r\n        relevance: 0\r\n      },\r\n      {\r\n        className: 'params',\r\n        begin: /\\(/, end: /\\)/,\r\n        keywords: CPP_KEYWORDS,\r\n        relevance: 0,\r\n        contains: [\r\n          hljs.C_LINE_COMMENT_MODE,\r\n          hljs.C_BLOCK_COMMENT_MODE,\r\n          STRINGS,\r\n          NUMBERS,\r\n          CPP_PRIMITIVE_TYPES,\r\n          // Count matching parentheses.\r\n          {\r\n            begin: /\\(/, end: /\\)/,\r\n            keywords: CPP_KEYWORDS,\r\n            relevance: 0,\r\n            contains: [\r\n              'self',\r\n              hljs.C_LINE_COMMENT_MODE,\r\n              hljs.C_BLOCK_COMMENT_MODE,\r\n              STRINGS,\r\n              NUMBERS,\r\n              CPP_PRIMITIVE_TYPES\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      CPP_PRIMITIVE_TYPES,\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      PREPROCESSOR\r\n    ]\r\n  };\r\n\r\n  return {\r\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\r\n    keywords: CPP_KEYWORDS,\r\n    illegal: '</',\r\n    contains: [].concat(\r\n      EXPRESSION_CONTEXT,\r\n      FUNCTION_DECLARATION,\r\n      EXPRESSION_CONTAINS,\r\n      [\r\n      PREPROCESSOR,\r\n      {\r\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\r\n        keywords: CPP_KEYWORDS,\r\n        contains: ['self', CPP_PRIMITIVE_TYPES]\r\n      },\r\n      {\r\n        begin: hljs.IDENT_RE + '::',\r\n        keywords: CPP_KEYWORDS\r\n      },\r\n      {\r\n        className: 'class',\r\n        beginKeywords: 'class struct', end: /[{;:]/,\r\n        contains: [\r\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\r\n          hljs.TITLE_MODE\r\n        ]\r\n      }\r\n    ]),\r\n    exports: {\r\n      preprocessor: PREPROCESSOR,\r\n      strings: STRINGS,\r\n      keywords: CPP_KEYWORDS\r\n    }\r\n  };\r\n};"]},"metadata":{},"sourceType":"script"}