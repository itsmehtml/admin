{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Cartesian coordinate system\r\n * @module  echarts/coord/Cartesian\r\n *\r\n */\n\n\nfunction dimAxisMapper(dim) {\n  return this._axes[dim];\n}\n/**\r\n * @alias module:echarts/coord/Cartesian\r\n * @constructor\r\n */\n\n\nvar Cartesian = function Cartesian(name) {\n  this._axes = {};\n  this._dimList = [];\n  /**\r\n   * @type {string}\r\n   */\n\n  this.name = name || '';\n};\n\nCartesian.prototype = {\n  constructor: Cartesian,\n  type: 'cartesian',\n\n  /**\r\n   * Get axis\r\n   * @param  {number|string} dim\r\n   * @return {module:echarts/coord/Cartesian~Axis}\r\n   */\n  getAxis: function getAxis(dim) {\n    return this._axes[dim];\n  },\n\n  /**\r\n   * Get axes list\r\n   * @return {Array.<module:echarts/coord/Cartesian~Axis>}\r\n   */\n  getAxes: function getAxes() {\n    return zrUtil.map(this._dimList, dimAxisMapper, this);\n  },\n\n  /**\r\n   * Get axes list by given scale type\r\n   */\n  getAxesByScale: function getAxesByScale(scaleType) {\n    scaleType = scaleType.toLowerCase();\n    return zrUtil.filter(this.getAxes(), function (axis) {\n      return axis.scale.type === scaleType;\n    });\n  },\n\n  /**\r\n   * Add axis\r\n   * @param {module:echarts/coord/Cartesian.Axis}\r\n   */\n  addAxis: function addAxis(axis) {\n    var dim = axis.dim;\n    this._axes[dim] = axis;\n\n    this._dimList.push(dim);\n  },\n\n  /**\r\n   * Convert data to coord in nd space\r\n   * @param {Array.<number>|Object.<string, number>} val\r\n   * @return {Array.<number>|Object.<string, number>}\r\n   */\n  dataToCoord: function dataToCoord(val) {\n    return this._dataCoordConvert(val, 'dataToCoord');\n  },\n\n  /**\r\n   * Convert coord in nd space to data\r\n   * @param  {Array.<number>|Object.<string, number>} val\r\n   * @return {Array.<number>|Object.<string, number>}\r\n   */\n  coordToData: function coordToData(val) {\n    return this._dataCoordConvert(val, 'coordToData');\n  },\n  _dataCoordConvert: function _dataCoordConvert(input, method) {\n    var dimList = this._dimList;\n    var output = input instanceof Array ? [] : {};\n\n    for (var i = 0; i < dimList.length; i++) {\n      var dim = dimList[i];\n      var axis = this._axes[dim];\n      output[dim] = axis[method](input[dim]);\n    }\n\n    return output;\n  }\n};\nvar _default = Cartesian;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/coord/cartesian/Cartesian.js"],"names":["zrUtil","require","dimAxisMapper","dim","_axes","Cartesian","name","_dimList","prototype","constructor","type","getAxis","getAxes","map","getAxesByScale","scaleType","toLowerCase","filter","axis","scale","addAxis","push","dataToCoord","val","_dataCoordConvert","coordToData","input","method","dimList","output","Array","i","length","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * Cartesian coordinate system\r\n * @module  echarts/coord/Cartesian\r\n *\r\n */\r\nfunction dimAxisMapper(dim) {\r\n  return this._axes[dim];\r\n}\r\n/**\r\n * @alias module:echarts/coord/Cartesian\r\n * @constructor\r\n */\r\n\r\n\r\nvar Cartesian = function (name) {\r\n  this._axes = {};\r\n  this._dimList = [];\r\n  /**\r\n   * @type {string}\r\n   */\r\n\r\n  this.name = name || '';\r\n};\r\n\r\nCartesian.prototype = {\r\n  constructor: Cartesian,\r\n  type: 'cartesian',\r\n\r\n  /**\r\n   * Get axis\r\n   * @param  {number|string} dim\r\n   * @return {module:echarts/coord/Cartesian~Axis}\r\n   */\r\n  getAxis: function (dim) {\r\n    return this._axes[dim];\r\n  },\r\n\r\n  /**\r\n   * Get axes list\r\n   * @return {Array.<module:echarts/coord/Cartesian~Axis>}\r\n   */\r\n  getAxes: function () {\r\n    return zrUtil.map(this._dimList, dimAxisMapper, this);\r\n  },\r\n\r\n  /**\r\n   * Get axes list by given scale type\r\n   */\r\n  getAxesByScale: function (scaleType) {\r\n    scaleType = scaleType.toLowerCase();\r\n    return zrUtil.filter(this.getAxes(), function (axis) {\r\n      return axis.scale.type === scaleType;\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Add axis\r\n   * @param {module:echarts/coord/Cartesian.Axis}\r\n   */\r\n  addAxis: function (axis) {\r\n    var dim = axis.dim;\r\n    this._axes[dim] = axis;\r\n\r\n    this._dimList.push(dim);\r\n  },\r\n\r\n  /**\r\n   * Convert data to coord in nd space\r\n   * @param {Array.<number>|Object.<string, number>} val\r\n   * @return {Array.<number>|Object.<string, number>}\r\n   */\r\n  dataToCoord: function (val) {\r\n    return this._dataCoordConvert(val, 'dataToCoord');\r\n  },\r\n\r\n  /**\r\n   * Convert coord in nd space to data\r\n   * @param  {Array.<number>|Object.<string, number>} val\r\n   * @return {Array.<number>|Object.<string, number>}\r\n   */\r\n  coordToData: function (val) {\r\n    return this._dataCoordConvert(val, 'coordToData');\r\n  },\r\n  _dataCoordConvert: function (input, method) {\r\n    var dimList = this._dimList;\r\n    var output = input instanceof Array ? [] : {};\r\n\r\n    for (var i = 0; i < dimList.length; i++) {\r\n      var dim = dimList[i];\r\n      var axis = this._axes[dim];\r\n      output[dim] = axis[method](input[dim]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n};\r\nvar _default = Cartesian;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}