{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"../model/Model\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar List = require(\"./List\");\n\nvar createDimensions = require(\"./helper/createDimensions\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Tree data structure\r\n *\r\n * @module echarts/data/Tree\r\n */\n\n/**\r\n * @constructor module:echarts/data/Tree~TreeNode\r\n * @param {string} name\r\n * @param {module:echarts/data/Tree} hostTree\r\n */\n\n\nvar TreeNode = function TreeNode(name, hostTree) {\n  /**\r\n   * @type {string}\r\n   */\n  this.name = name || '';\n  /**\r\n   * Depth of node\r\n   *\r\n   * @type {number}\r\n   * @readOnly\r\n   */\n\n  this.depth = 0;\n  /**\r\n   * Height of the subtree rooted at this node.\r\n   * @type {number}\r\n   * @readOnly\r\n   */\n\n  this.height = 0;\n  /**\r\n   * @type {module:echarts/data/Tree~TreeNode}\r\n   * @readOnly\r\n   */\n\n  this.parentNode = null;\n  /**\r\n   * Reference to list item.\r\n   * Do not persistent dataIndex outside,\r\n   * besause it may be changed by list.\r\n   * If dataIndex -1,\r\n   * this node is logical deleted (filtered) in list.\r\n   *\r\n   * @type {Object}\r\n   * @readOnly\r\n   */\n\n  this.dataIndex = -1;\n  /**\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n   * @readOnly\r\n   */\n\n  this.children = [];\n  /**\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n   * @pubilc\r\n   */\n\n  this.viewChildren = [];\n  /**\r\n   * @type {moduel:echarts/data/Tree}\r\n   * @readOnly\r\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\r\n   * The node is removed.\r\n   * @return {boolean} is removed.\r\n   */\n  isRemoved: function isRemoved() {\n    return this.dataIndex < 0;\n  },\n\n  /**\r\n   * Travel this subtree (include this node).\r\n   * Usage:\r\n   *    node.eachNode(function () { ... }); // preorder\r\n   *    node.eachNode('preorder', function () { ... }); // preorder\r\n   *    node.eachNode('postorder', function () { ... }); // postorder\r\n   *    node.eachNode(\r\n   *        {order: 'postorder', attr: 'viewChildren'},\r\n   *        function () { ... }\r\n   *    ); // postorder\r\n   *\r\n   * @param {(Object|string)} options If string, means order.\r\n   * @param {string=} options.order 'preorder' or 'postorder'\r\n   * @param {string=} options.attr 'children' or 'viewChildren'\r\n   * @param {Function} cb If in preorder and return false,\r\n   *                      its subtree will not be visited.\r\n   * @param {Object} [context]\r\n   */\n  eachNode: function eachNode(options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\r\n   * Update depth and height of this subtree.\r\n   *\r\n   * @param  {number} depth\r\n   */\n  updateDepthAndHeight: function updateDepthAndHeight(depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\r\n   * @param  {string} id\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\n  getNodeById: function getNodeById(id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\r\n   * @param {module:echarts/data/Tree~TreeNode} node\r\n   * @return {boolean}\r\n   */\n  contains: function contains(node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\r\n   * @param {boolean} includeSelf Default false.\r\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\r\n   */\n  getAncestors: function getAncestors(includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\r\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\r\n   * @return {number} Value.\r\n   */\n  getValue: function getValue(dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\r\n   * @param {Object} layout\r\n   * @param {boolean=} [merge=false]\r\n   */\n  setLayout: function setLayout(layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\r\n   * @return {Object} layout\r\n   */\n  getLayout: function getLayout() {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\r\n   * @param {string} [path]\r\n   * @return {module:echarts/model/Model}\r\n   */\n  getModel: function getModel(path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    var levelModel = this.getLevelModel();\n    var leavesModel;\n\n    if (!levelModel && (this.children.length === 0 || this.children.length !== 0 && this.isExpand === false)) {\n      leavesModel = this.getLeavesModel();\n    }\n\n    return itemModel.getModel(path, (levelModel || leavesModel || hostTree.hostModel).getModel(path));\n  },\n\n  /**\r\n   * @return {module:echarts/model/Model}\r\n   */\n  getLevelModel: function getLevelModel() {\n    return (this.hostTree.levelModels || [])[this.depth];\n  },\n\n  /**\r\n   * @return {module:echarts/model/Model}\r\n   */\n  getLeavesModel: function getLeavesModel() {\n    return this.hostTree.leavesModel;\n  },\n\n  /**\r\n   * @example\r\n   *  setItemVisual('color', color);\r\n   *  setItemVisual({\r\n   *      'color': color\r\n   *  });\r\n   */\n  setVisual: function setVisual(key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\r\n   * Get item visual\r\n   */\n  getVisual: function getVisual(key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\r\n   * @public\r\n   * @return {number}\r\n   */\n  getRawIndex: function getRawIndex() {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\r\n   * @public\r\n   * @return {string}\r\n   */\n  getId: function getId() {\n    return this.hostTree.data.getId(this.dataIndex);\n  },\n\n  /**\r\n   * if this is an ancestor of another node\r\n   *\r\n   * @public\r\n   * @param {TreeNode} node another node\r\n   * @return {boolean} if is ancestor\r\n   */\n  isAncestorOf: function isAncestorOf(node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * if this is an descendant of another node\r\n   *\r\n   * @public\r\n   * @param {TreeNode} node another node\r\n   * @return {boolean} if is descendant\r\n   */\n  isDescendantOf: function isDescendantOf(node) {\n    return node !== this && node.isAncestorOf(this);\n  }\n};\n/**\r\n * @constructor\r\n * @alias module:echarts/data/Tree\r\n * @param {module:echarts/model/Model} hostModel\r\n * @param {Array.<Object>} levelOptions\r\n * @param {Object} leavesOption\r\n */\n\nfunction Tree(hostModel, levelOptions, leavesOption) {\n  /**\r\n   * @type {module:echarts/data/Tree~TreeNode}\r\n   * @readOnly\r\n   */\n  this.root;\n  /**\r\n   * @type {module:echarts/data/List}\r\n   * @readOnly\r\n   */\n\n  this.data;\n  /**\r\n   * Index of each item is the same as the raw index of coresponding list item.\r\n   * @private\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\r\n   */\n\n  this._nodes = [];\n  /**\r\n   * @private\r\n   * @readOnly\r\n   * @type {module:echarts/model/Model}\r\n   */\n\n  this.hostModel = hostModel;\n  /**\r\n   * @private\r\n   * @readOnly\r\n   * @type {Array.<module:echarts/model/Model}\r\n   */\n\n  this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {\n    return new Model(levelDefine, hostModel, hostModel.ecModel);\n  });\n  this.leavesModel = new Model(leavesOption || {}, hostModel, hostModel.ecModel);\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\r\n   * Travel this subtree (include this node).\r\n   * Usage:\r\n   *    node.eachNode(function () { ... }); // preorder\r\n   *    node.eachNode('preorder', function () { ... }); // preorder\r\n   *    node.eachNode('postorder', function () { ... }); // postorder\r\n   *    node.eachNode(\r\n   *        {order: 'postorder', attr: 'viewChildren'},\r\n   *        function () { ... }\r\n   *    ); // postorder\r\n   *\r\n   * @param {(Object|string)} options If string, means order.\r\n   * @param {string=} options.order 'preorder' or 'postorder'\r\n   * @param {string=} options.attr 'children' or 'viewChildren'\r\n   * @param {Function} cb\r\n   * @param {Object}   [context]\r\n   */\n  eachNode: function eachNode(options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\r\n   * @param {number} dataIndex\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\n  getNodeByDataIndex: function getNodeByDataIndex(dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\r\n   * @param {string} name\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\n  getNodeByName: function getNodeByName(name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\r\n   * Update item available by list,\r\n   * when list has been performed options like 'filterSelf' or 'map'.\r\n   */\n  update: function update() {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\r\n   * Clear all layouts\r\n   */\n  clearLayouts: function clearLayouts() {\n    this.data.clearItemLayouts();\n  }\n};\n/**\r\n * data node format:\r\n * {\r\n *     name: ...\r\n *     value: ...\r\n *     children: [\r\n *         {\r\n *             name: ...\r\n *             value: ...\r\n *             children: ...\r\n *         },\r\n *         ...\r\n *     ]\r\n * }\r\n *\r\n * @static\r\n * @param {Object} dataRoot Root node.\r\n * @param {module:echarts/model/Model} hostModel\r\n * @param {Object} treeOptions\r\n * @param {Array.<Object>} treeOptions.levels\r\n * @param {Array.<Object>} treeOptions.leaves\r\n * @return module:echarts/data/Tree\r\n */\n\nTree.createTree = function (dataRoot, hostModel, treeOptions, beforeLink) {\n  var tree = new Tree(hostModel, treeOptions.levels, treeOptions.leaves);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensionsInfo = createDimensions(listData, {\n    coordDimensions: ['value'],\n    dimensionsCount: dimMax\n  });\n  var list = new List(dimensionsInfo, hostModel);\n  list.initData(listData);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  beforeLink && beforeLink(list);\n  return tree;\n};\n/**\r\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\r\n * so this function is not ready and not necessary to be public.\r\n *\r\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\r\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/data/Tree.js"],"names":["zrUtil","require","Model","linkList","List","createDimensions","TreeNode","name","hostTree","depth","height","parentNode","dataIndex","children","viewChildren","prototype","constructor","isRemoved","eachNode","options","cb","context","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","push","reverse","getValue","dimension","data","get","getDimension","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","levelModel","getLevelModel","leavesModel","isExpand","getLeavesModel","hostModel","levelModels","setVisual","key","value","setItemVisual","getVisual","ignoreParent","getItemVisual","getRawIndex","isAncestorOf","parent","isDescendantOf","Tree","levelOptions","leavesOption","root","_nodes","map","levelDefine","ecModel","type","getNodeByDataIndex","rawIndex","getNodeByName","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","treeOptions","beforeLink","tree","levels","leaves","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensionsInfo","coordDimensions","dimensionsCount","list","initData","mainData","struct","structAttr","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\nvar Model = require(\"../model/Model\");\r\n\r\nvar linkList = require(\"./helper/linkList\");\r\n\r\nvar List = require(\"./List\");\r\n\r\nvar createDimensions = require(\"./helper/createDimensions\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * Tree data structure\r\n *\r\n * @module echarts/data/Tree\r\n */\r\n\r\n/**\r\n * @constructor module:echarts/data/Tree~TreeNode\r\n * @param {string} name\r\n * @param {module:echarts/data/Tree} hostTree\r\n */\r\nvar TreeNode = function (name, hostTree) {\r\n  /**\r\n   * @type {string}\r\n   */\r\n  this.name = name || '';\r\n  /**\r\n   * Depth of node\r\n   *\r\n   * @type {number}\r\n   * @readOnly\r\n   */\r\n\r\n  this.depth = 0;\r\n  /**\r\n   * Height of the subtree rooted at this node.\r\n   * @type {number}\r\n   * @readOnly\r\n   */\r\n\r\n  this.height = 0;\r\n  /**\r\n   * @type {module:echarts/data/Tree~TreeNode}\r\n   * @readOnly\r\n   */\r\n\r\n  this.parentNode = null;\r\n  /**\r\n   * Reference to list item.\r\n   * Do not persistent dataIndex outside,\r\n   * besause it may be changed by list.\r\n   * If dataIndex -1,\r\n   * this node is logical deleted (filtered) in list.\r\n   *\r\n   * @type {Object}\r\n   * @readOnly\r\n   */\r\n\r\n  this.dataIndex = -1;\r\n  /**\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n   * @readOnly\r\n   */\r\n\r\n  this.children = [];\r\n  /**\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\r\n   * @pubilc\r\n   */\r\n\r\n  this.viewChildren = [];\r\n  /**\r\n   * @type {moduel:echarts/data/Tree}\r\n   * @readOnly\r\n   */\r\n\r\n  this.hostTree = hostTree;\r\n};\r\n\r\nTreeNode.prototype = {\r\n  constructor: TreeNode,\r\n\r\n  /**\r\n   * The node is removed.\r\n   * @return {boolean} is removed.\r\n   */\r\n  isRemoved: function () {\r\n    return this.dataIndex < 0;\r\n  },\r\n\r\n  /**\r\n   * Travel this subtree (include this node).\r\n   * Usage:\r\n   *    node.eachNode(function () { ... }); // preorder\r\n   *    node.eachNode('preorder', function () { ... }); // preorder\r\n   *    node.eachNode('postorder', function () { ... }); // postorder\r\n   *    node.eachNode(\r\n   *        {order: 'postorder', attr: 'viewChildren'},\r\n   *        function () { ... }\r\n   *    ); // postorder\r\n   *\r\n   * @param {(Object|string)} options If string, means order.\r\n   * @param {string=} options.order 'preorder' or 'postorder'\r\n   * @param {string=} options.attr 'children' or 'viewChildren'\r\n   * @param {Function} cb If in preorder and return false,\r\n   *                      its subtree will not be visited.\r\n   * @param {Object} [context]\r\n   */\r\n  eachNode: function (options, cb, context) {\r\n    if (typeof options === 'function') {\r\n      context = cb;\r\n      cb = options;\r\n      options = null;\r\n    }\r\n\r\n    options = options || {};\r\n\r\n    if (zrUtil.isString(options)) {\r\n      options = {\r\n        order: options\r\n      };\r\n    }\r\n\r\n    var order = options.order || 'preorder';\r\n    var children = this[options.attr || 'children'];\r\n    var suppressVisitSub;\r\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\r\n\r\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\r\n      children[i].eachNode(options, cb, context);\r\n    }\r\n\r\n    order === 'postorder' && cb.call(context, this);\r\n  },\r\n\r\n  /**\r\n   * Update depth and height of this subtree.\r\n   *\r\n   * @param  {number} depth\r\n   */\r\n  updateDepthAndHeight: function (depth) {\r\n    var height = 0;\r\n    this.depth = depth;\r\n\r\n    for (var i = 0; i < this.children.length; i++) {\r\n      var child = this.children[i];\r\n      child.updateDepthAndHeight(depth + 1);\r\n\r\n      if (child.height > height) {\r\n        height = child.height;\r\n      }\r\n    }\r\n\r\n    this.height = height + 1;\r\n  },\r\n\r\n  /**\r\n   * @param  {string} id\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\r\n  getNodeById: function (id) {\r\n    if (this.getId() === id) {\r\n      return this;\r\n    }\r\n\r\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\r\n      var res = children[i].getNodeById(id);\r\n\r\n      if (res) {\r\n        return res;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @param {module:echarts/data/Tree~TreeNode} node\r\n   * @return {boolean}\r\n   */\r\n  contains: function (node) {\r\n    if (node === this) {\r\n      return true;\r\n    }\r\n\r\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\r\n      var res = children[i].contains(node);\r\n\r\n      if (res) {\r\n        return res;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @param {boolean} includeSelf Default false.\r\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\r\n   */\r\n  getAncestors: function (includeSelf) {\r\n    var ancestors = [];\r\n    var node = includeSelf ? this : this.parentNode;\r\n\r\n    while (node) {\r\n      ancestors.push(node);\r\n      node = node.parentNode;\r\n    }\r\n\r\n    ancestors.reverse();\r\n    return ancestors;\r\n  },\r\n\r\n  /**\r\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\r\n   * @return {number} Value.\r\n   */\r\n  getValue: function (dimension) {\r\n    var data = this.hostTree.data;\r\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\r\n  },\r\n\r\n  /**\r\n   * @param {Object} layout\r\n   * @param {boolean=} [merge=false]\r\n   */\r\n  setLayout: function (layout, merge) {\r\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\r\n  },\r\n\r\n  /**\r\n   * @return {Object} layout\r\n   */\r\n  getLayout: function () {\r\n    return this.hostTree.data.getItemLayout(this.dataIndex);\r\n  },\r\n\r\n  /**\r\n   * @param {string} [path]\r\n   * @return {module:echarts/model/Model}\r\n   */\r\n  getModel: function (path) {\r\n    if (this.dataIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    var hostTree = this.hostTree;\r\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\r\n    var levelModel = this.getLevelModel();\r\n    var leavesModel;\r\n\r\n    if (!levelModel && (this.children.length === 0 || this.children.length !== 0 && this.isExpand === false)) {\r\n      leavesModel = this.getLeavesModel();\r\n    }\r\n\r\n    return itemModel.getModel(path, (levelModel || leavesModel || hostTree.hostModel).getModel(path));\r\n  },\r\n\r\n  /**\r\n   * @return {module:echarts/model/Model}\r\n   */\r\n  getLevelModel: function () {\r\n    return (this.hostTree.levelModels || [])[this.depth];\r\n  },\r\n\r\n  /**\r\n   * @return {module:echarts/model/Model}\r\n   */\r\n  getLeavesModel: function () {\r\n    return this.hostTree.leavesModel;\r\n  },\r\n\r\n  /**\r\n   * @example\r\n   *  setItemVisual('color', color);\r\n   *  setItemVisual({\r\n   *      'color': color\r\n   *  });\r\n   */\r\n  setVisual: function (key, value) {\r\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\r\n  },\r\n\r\n  /**\r\n   * Get item visual\r\n   */\r\n  getVisual: function (key, ignoreParent) {\r\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\r\n  },\r\n\r\n  /**\r\n   * @public\r\n   * @return {number}\r\n   */\r\n  getRawIndex: function () {\r\n    return this.hostTree.data.getRawIndex(this.dataIndex);\r\n  },\r\n\r\n  /**\r\n   * @public\r\n   * @return {string}\r\n   */\r\n  getId: function () {\r\n    return this.hostTree.data.getId(this.dataIndex);\r\n  },\r\n\r\n  /**\r\n   * if this is an ancestor of another node\r\n   *\r\n   * @public\r\n   * @param {TreeNode} node another node\r\n   * @return {boolean} if is ancestor\r\n   */\r\n  isAncestorOf: function (node) {\r\n    var parent = node.parentNode;\r\n\r\n    while (parent) {\r\n      if (parent === this) {\r\n        return true;\r\n      }\r\n\r\n      parent = parent.parentNode;\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * if this is an descendant of another node\r\n   *\r\n   * @public\r\n   * @param {TreeNode} node another node\r\n   * @return {boolean} if is descendant\r\n   */\r\n  isDescendantOf: function (node) {\r\n    return node !== this && node.isAncestorOf(this);\r\n  }\r\n};\r\n/**\r\n * @constructor\r\n * @alias module:echarts/data/Tree\r\n * @param {module:echarts/model/Model} hostModel\r\n * @param {Array.<Object>} levelOptions\r\n * @param {Object} leavesOption\r\n */\r\n\r\nfunction Tree(hostModel, levelOptions, leavesOption) {\r\n  /**\r\n   * @type {module:echarts/data/Tree~TreeNode}\r\n   * @readOnly\r\n   */\r\n  this.root;\r\n  /**\r\n   * @type {module:echarts/data/List}\r\n   * @readOnly\r\n   */\r\n\r\n  this.data;\r\n  /**\r\n   * Index of each item is the same as the raw index of coresponding list item.\r\n   * @private\r\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\r\n   */\r\n\r\n  this._nodes = [];\r\n  /**\r\n   * @private\r\n   * @readOnly\r\n   * @type {module:echarts/model/Model}\r\n   */\r\n\r\n  this.hostModel = hostModel;\r\n  /**\r\n   * @private\r\n   * @readOnly\r\n   * @type {Array.<module:echarts/model/Model}\r\n   */\r\n\r\n  this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {\r\n    return new Model(levelDefine, hostModel, hostModel.ecModel);\r\n  });\r\n  this.leavesModel = new Model(leavesOption || {}, hostModel, hostModel.ecModel);\r\n}\r\n\r\nTree.prototype = {\r\n  constructor: Tree,\r\n  type: 'tree',\r\n\r\n  /**\r\n   * Travel this subtree (include this node).\r\n   * Usage:\r\n   *    node.eachNode(function () { ... }); // preorder\r\n   *    node.eachNode('preorder', function () { ... }); // preorder\r\n   *    node.eachNode('postorder', function () { ... }); // postorder\r\n   *    node.eachNode(\r\n   *        {order: 'postorder', attr: 'viewChildren'},\r\n   *        function () { ... }\r\n   *    ); // postorder\r\n   *\r\n   * @param {(Object|string)} options If string, means order.\r\n   * @param {string=} options.order 'preorder' or 'postorder'\r\n   * @param {string=} options.attr 'children' or 'viewChildren'\r\n   * @param {Function} cb\r\n   * @param {Object}   [context]\r\n   */\r\n  eachNode: function (options, cb, context) {\r\n    this.root.eachNode(options, cb, context);\r\n  },\r\n\r\n  /**\r\n   * @param {number} dataIndex\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\r\n  getNodeByDataIndex: function (dataIndex) {\r\n    var rawIndex = this.data.getRawIndex(dataIndex);\r\n    return this._nodes[rawIndex];\r\n  },\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @return {module:echarts/data/Tree~TreeNode}\r\n   */\r\n  getNodeByName: function (name) {\r\n    return this.root.getNodeByName(name);\r\n  },\r\n\r\n  /**\r\n   * Update item available by list,\r\n   * when list has been performed options like 'filterSelf' or 'map'.\r\n   */\r\n  update: function () {\r\n    var data = this.data;\r\n    var nodes = this._nodes;\r\n\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n      nodes[i].dataIndex = -1;\r\n    }\r\n\r\n    for (var i = 0, len = data.count(); i < len; i++) {\r\n      nodes[data.getRawIndex(i)].dataIndex = i;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Clear all layouts\r\n   */\r\n  clearLayouts: function () {\r\n    this.data.clearItemLayouts();\r\n  }\r\n};\r\n/**\r\n * data node format:\r\n * {\r\n *     name: ...\r\n *     value: ...\r\n *     children: [\r\n *         {\r\n *             name: ...\r\n *             value: ...\r\n *             children: ...\r\n *         },\r\n *         ...\r\n *     ]\r\n * }\r\n *\r\n * @static\r\n * @param {Object} dataRoot Root node.\r\n * @param {module:echarts/model/Model} hostModel\r\n * @param {Object} treeOptions\r\n * @param {Array.<Object>} treeOptions.levels\r\n * @param {Array.<Object>} treeOptions.leaves\r\n * @return module:echarts/data/Tree\r\n */\r\n\r\nTree.createTree = function (dataRoot, hostModel, treeOptions, beforeLink) {\r\n  var tree = new Tree(hostModel, treeOptions.levels, treeOptions.leaves);\r\n  var listData = [];\r\n  var dimMax = 1;\r\n  buildHierarchy(dataRoot);\r\n\r\n  function buildHierarchy(dataNode, parentNode) {\r\n    var value = dataNode.value;\r\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\r\n    listData.push(dataNode);\r\n    var node = new TreeNode(dataNode.name, tree);\r\n    parentNode ? addChild(node, parentNode) : tree.root = node;\r\n\r\n    tree._nodes.push(node);\r\n\r\n    var children = dataNode.children;\r\n\r\n    if (children) {\r\n      for (var i = 0; i < children.length; i++) {\r\n        buildHierarchy(children[i], node);\r\n      }\r\n    }\r\n  }\r\n\r\n  tree.root.updateDepthAndHeight(0);\r\n  var dimensionsInfo = createDimensions(listData, {\r\n    coordDimensions: ['value'],\r\n    dimensionsCount: dimMax\r\n  });\r\n  var list = new List(dimensionsInfo, hostModel);\r\n  list.initData(listData);\r\n  linkList({\r\n    mainData: list,\r\n    struct: tree,\r\n    structAttr: 'tree'\r\n  });\r\n  tree.update();\r\n  beforeLink && beforeLink(list);\r\n  return tree;\r\n};\r\n/**\r\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\r\n * so this function is not ready and not necessary to be public.\r\n *\r\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\r\n */\r\n\r\n\r\nfunction addChild(child, node) {\r\n  var children = node.children;\r\n\r\n  if (child.parentNode === node) {\r\n    return;\r\n  }\r\n\r\n  children.push(child);\r\n  child.parentNode = node;\r\n}\r\n\r\nvar _default = Tree;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}