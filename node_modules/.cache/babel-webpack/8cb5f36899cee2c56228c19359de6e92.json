{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar isString = _util.isString;\nvar isArray = _util.isArray;\nvar each = _util.each;\nvar assert = _util.assert;\n\nvar _parseSVG = require(\"zrender/lib/tool/parseSVG\");\n\nvar parseXML = _parseSVG.parseXML;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nvar storage = createHashMap(); // For minimize the code size of common echarts package,\n// do not put too much logic in this module.\n\nvar _default = {\n  // The format of record: see `echarts.registerMap`.\n  // Compatible with previous `echarts.registerMap`.\n  registerMap: function registerMap(mapName, rawGeoJson, rawSpecialAreas) {\n    var records;\n\n    if (isArray(rawGeoJson)) {\n      records = rawGeoJson;\n    } else if (rawGeoJson.svg) {\n      records = [{\n        type: 'svg',\n        source: rawGeoJson.svg,\n        specialAreas: rawGeoJson.specialAreas\n      }];\n    } else {\n      // Backward compatibility.\n      if (rawGeoJson.geoJson && !rawGeoJson.features) {\n        rawSpecialAreas = rawGeoJson.specialAreas;\n        rawGeoJson = rawGeoJson.geoJson;\n      }\n\n      records = [{\n        type: 'geoJSON',\n        source: rawGeoJson,\n        specialAreas: rawSpecialAreas\n      }];\n    }\n\n    each(records, function (record) {\n      var type = record.type;\n      type === 'geoJson' && (type = record.type = 'geoJSON');\n      var parse = parsers[type];\n      parse(record);\n    });\n    return storage.set(mapName, records);\n  },\n  retrieveMap: function retrieveMap(mapName) {\n    return storage.get(mapName);\n  }\n};\nvar parsers = {\n  geoJSON: function geoJSON(record) {\n    var source = record.source;\n    record.geoJSON = !isString(source) ? source : typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(source) : new Function('return (' + source + ');')();\n  },\n  // Only perform parse to XML object here, which might be time\n  // consiming for large SVG.\n  // Although convert XML to zrender element is also time consiming,\n  // if we do it here, the clone of zrender elements has to be\n  // required. So we do it once for each geo instance, util real\n  // performance issues call for optimizing it.\n  svg: function svg(record) {\n    record.svgXML = parseXML(record.source);\n  }\n};\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/coord/geo/mapDataStorage.js"],"names":["_config","require","__DEV__","_util","createHashMap","isString","isArray","each","assert","_parseSVG","parseXML","storage","_default","registerMap","mapName","rawGeoJson","rawSpecialAreas","records","svg","type","source","specialAreas","geoJson","features","record","parse","parsers","set","retrieveMap","get","geoJSON","JSON","Function","svgXML","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar _config = require(\"../../config\");\r\n\r\nvar __DEV__ = _config.__DEV__;\r\n\r\nvar _util = require(\"zrender/lib/core/util\");\r\n\r\nvar createHashMap = _util.createHashMap;\r\nvar isString = _util.isString;\r\nvar isArray = _util.isArray;\r\nvar each = _util.each;\r\nvar assert = _util.assert;\r\n\r\nvar _parseSVG = require(\"zrender/lib/tool/parseSVG\");\r\n\r\nvar parseXML = _parseSVG.parseXML;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar storage = createHashMap(); // For minimize the code size of common echarts package,\r\n// do not put too much logic in this module.\r\n\r\nvar _default = {\r\n  // The format of record: see `echarts.registerMap`.\r\n  // Compatible with previous `echarts.registerMap`.\r\n  registerMap: function (mapName, rawGeoJson, rawSpecialAreas) {\r\n    var records;\r\n\r\n    if (isArray(rawGeoJson)) {\r\n      records = rawGeoJson;\r\n    } else if (rawGeoJson.svg) {\r\n      records = [{\r\n        type: 'svg',\r\n        source: rawGeoJson.svg,\r\n        specialAreas: rawGeoJson.specialAreas\r\n      }];\r\n    } else {\r\n      // Backward compatibility.\r\n      if (rawGeoJson.geoJson && !rawGeoJson.features) {\r\n        rawSpecialAreas = rawGeoJson.specialAreas;\r\n        rawGeoJson = rawGeoJson.geoJson;\r\n      }\r\n\r\n      records = [{\r\n        type: 'geoJSON',\r\n        source: rawGeoJson,\r\n        specialAreas: rawSpecialAreas\r\n      }];\r\n    }\r\n\r\n    each(records, function (record) {\r\n      var type = record.type;\r\n      type === 'geoJson' && (type = record.type = 'geoJSON');\r\n      var parse = parsers[type];\r\n      parse(record);\r\n    });\r\n    return storage.set(mapName, records);\r\n  },\r\n  retrieveMap: function (mapName) {\r\n    return storage.get(mapName);\r\n  }\r\n};\r\nvar parsers = {\r\n  geoJSON: function (record) {\r\n    var source = record.source;\r\n    record.geoJSON = !isString(source) ? source : typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(source) : new Function('return (' + source + ');')();\r\n  },\r\n  // Only perform parse to XML object here, which might be time\r\n  // consiming for large SVG.\r\n  // Although convert XML to zrender element is also time consiming,\r\n  // if we do it here, the clone of zrender elements has to be\r\n  // required. So we do it once for each geo instance, util real\r\n  // performance issues call for optimizing it.\r\n  svg: function (record) {\r\n    record.svgXML = parseXML(record.source);\r\n  }\r\n};\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}