{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * @param {number} [time=500] Time in ms\r\n * @param {string} [easing='linear']\r\n * @param {number} [delay=0]\r\n * @param {Function} [callback]\r\n *\r\n * @example\r\n *  // Animate position\r\n *  animation\r\n *      .createWrap()\r\n *      .add(el1, {position: [10, 10]})\r\n *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)\r\n *      .done(function () { // done })\r\n *      .start('cubicOut');\r\n */\n\n\nfunction createWrap() {\n  var storage = [];\n  var elExistsMap = {};\n  var doneCallback;\n  return {\n    /**\r\n     * Caution: a el can only be added once, otherwise 'done'\r\n     * might not be called. This method checks this (by el.id),\r\n     * suppresses adding and returns false when existing el found.\r\n     *\r\n     * @param {modele:zrender/Element} el\r\n     * @param {Object} target\r\n     * @param {number} [time=500]\r\n     * @param {number} [delay=0]\r\n     * @param {string} [easing='linear']\r\n     * @return {boolean} Whether adding succeeded.\r\n     *\r\n     * @example\r\n     *     add(el, target, time, delay, easing);\r\n     *     add(el, target, time, easing);\r\n     *     add(el, target, time);\r\n     *     add(el, target);\r\n     */\n    add: function add(el, target, time, delay, easing) {\n      if (zrUtil.isString(delay)) {\n        easing = delay;\n        delay = 0;\n      }\n\n      if (elExistsMap[el.id]) {\n        return false;\n      }\n\n      elExistsMap[el.id] = 1;\n      storage.push({\n        el: el,\n        target: target,\n        time: time,\n        delay: delay,\n        easing: easing\n      });\n      return true;\n    },\n\n    /**\r\n     * Only execute when animation finished. Will not execute when any\r\n     * of 'stop' or 'stopAnimation' called.\r\n     *\r\n     * @param {Function} callback\r\n     */\n    done: function done(callback) {\n      doneCallback = callback;\n      return this;\n    },\n\n    /**\r\n     * Will stop exist animation firstly.\r\n     */\n    start: function start() {\n      var count = storage.length;\n\n      for (var i = 0, len = storage.length; i < len; i++) {\n        var item = storage[i];\n        item.el.animateTo(item.target, item.time, item.delay, item.easing, done);\n      }\n\n      return this;\n\n      function done() {\n        count--;\n\n        if (!count) {\n          storage.length = 0;\n          elExistsMap = {};\n          doneCallback && doneCallback();\n        }\n      }\n    }\n  };\n}\n\nexports.createWrap = createWrap;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/util/animation.js"],"names":["zrUtil","require","createWrap","storage","elExistsMap","doneCallback","add","el","target","time","delay","easing","isString","id","push","done","callback","start","count","length","i","len","item","animateTo","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAsB;AACpB,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,YAAJ;AACA,SAAO;AACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,GAAG,EAAE,aAAUC,EAAV,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AAC9C,UAAIX,MAAM,CAACY,QAAP,CAAgBF,KAAhB,CAAJ,EAA4B;AAC1BC,QAAAA,MAAM,GAAGD,KAAT;AACAA,QAAAA,KAAK,GAAG,CAAR;AACD;;AAED,UAAIN,WAAW,CAACG,EAAE,CAACM,EAAJ,CAAf,EAAwB;AACtB,eAAO,KAAP;AACD;;AAEDT,MAAAA,WAAW,CAACG,EAAE,CAACM,EAAJ,CAAX,GAAqB,CAArB;AACAV,MAAAA,OAAO,CAACW,IAAR,CAAa;AACXP,QAAAA,EAAE,EAAEA,EADO;AAEXC,QAAAA,MAAM,EAAEA,MAFG;AAGXC,QAAAA,IAAI,EAAEA,IAHK;AAIXC,QAAAA,KAAK,EAAEA,KAJI;AAKXC,QAAAA,MAAM,EAAEA;AALG,OAAb;AAOA,aAAO,IAAP;AACD,KAtCI;;AAwCL;AACJ;AACA;AACA;AACA;AACA;AACII,IAAAA,IAAI,EAAE,cAAUC,QAAV,EAAoB;AACxBX,MAAAA,YAAY,GAAGW,QAAf;AACA,aAAO,IAAP;AACD,KAjDI;;AAmDL;AACJ;AACA;AACIC,IAAAA,KAAK,EAAE,iBAAY;AACjB,UAAIC,KAAK,GAAGf,OAAO,CAACgB,MAApB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGlB,OAAO,CAACgB,MAA9B,EAAsCC,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,YAAIE,IAAI,GAAGnB,OAAO,CAACiB,CAAD,CAAlB;AACAE,QAAAA,IAAI,CAACf,EAAL,CAAQgB,SAAR,CAAkBD,IAAI,CAACd,MAAvB,EAA+Bc,IAAI,CAACb,IAApC,EAA0Ca,IAAI,CAACZ,KAA/C,EAAsDY,IAAI,CAACX,MAA3D,EAAmEI,IAAnE;AACD;;AAED,aAAO,IAAP;;AAEA,eAASA,IAAT,GAAgB;AACdG,QAAAA,KAAK;;AAEL,YAAI,CAACA,KAAL,EAAY;AACVf,UAAAA,OAAO,CAACgB,MAAR,GAAiB,CAAjB;AACAf,UAAAA,WAAW,GAAG,EAAd;AACAC,UAAAA,YAAY,IAAIA,YAAY,EAA5B;AACD;AACF;AACF;AAzEI,GAAP;AA2ED;;AAEDmB,OAAO,CAACtB,UAAR,GAAqBA,UAArB","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * @param {number} [time=500] Time in ms\r\n * @param {string} [easing='linear']\r\n * @param {number} [delay=0]\r\n * @param {Function} [callback]\r\n *\r\n * @example\r\n *  // Animate position\r\n *  animation\r\n *      .createWrap()\r\n *      .add(el1, {position: [10, 10]})\r\n *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)\r\n *      .done(function () { // done })\r\n *      .start('cubicOut');\r\n */\r\nfunction createWrap() {\r\n  var storage = [];\r\n  var elExistsMap = {};\r\n  var doneCallback;\r\n  return {\r\n    /**\r\n     * Caution: a el can only be added once, otherwise 'done'\r\n     * might not be called. This method checks this (by el.id),\r\n     * suppresses adding and returns false when existing el found.\r\n     *\r\n     * @param {modele:zrender/Element} el\r\n     * @param {Object} target\r\n     * @param {number} [time=500]\r\n     * @param {number} [delay=0]\r\n     * @param {string} [easing='linear']\r\n     * @return {boolean} Whether adding succeeded.\r\n     *\r\n     * @example\r\n     *     add(el, target, time, delay, easing);\r\n     *     add(el, target, time, easing);\r\n     *     add(el, target, time);\r\n     *     add(el, target);\r\n     */\r\n    add: function (el, target, time, delay, easing) {\r\n      if (zrUtil.isString(delay)) {\r\n        easing = delay;\r\n        delay = 0;\r\n      }\r\n\r\n      if (elExistsMap[el.id]) {\r\n        return false;\r\n      }\r\n\r\n      elExistsMap[el.id] = 1;\r\n      storage.push({\r\n        el: el,\r\n        target: target,\r\n        time: time,\r\n        delay: delay,\r\n        easing: easing\r\n      });\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Only execute when animation finished. Will not execute when any\r\n     * of 'stop' or 'stopAnimation' called.\r\n     *\r\n     * @param {Function} callback\r\n     */\r\n    done: function (callback) {\r\n      doneCallback = callback;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Will stop exist animation firstly.\r\n     */\r\n    start: function () {\r\n      var count = storage.length;\r\n\r\n      for (var i = 0, len = storage.length; i < len; i++) {\r\n        var item = storage[i];\r\n        item.el.animateTo(item.target, item.time, item.delay, item.easing, done);\r\n      }\r\n\r\n      return this;\r\n\r\n      function done() {\r\n        count--;\r\n\r\n        if (!count) {\r\n          storage.length = 0;\r\n          elExistsMap = {};\r\n          doneCallback && doneCallback();\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexports.createWrap = createWrap;"]},"metadata":{},"sourceType":"script"}