{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar modelUtil = require(\"../util/model\");\n\nvar graphicUtil = require(\"../util/graphic\");\n\nvar layoutUtil = require(\"../util/layout\");\n\nvar _number = require(\"../util/number\");\n\nvar parsePercent = _number.parsePercent;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nvar _nonShapeGraphicElements = {\n  // Reserved but not supported in graphic component.\n  path: null,\n  compoundPath: null,\n  // Supported in graphic component.\n  group: graphicUtil.Group,\n  image: graphicUtil.Image,\n  text: graphicUtil.Text\n}; // -------------\n// Preprocessor\n// -------------\n\necharts.registerPreprocessor(function (option) {\n  var graphicOption = option.graphic; // Convert\n  // {graphic: [{left: 10, type: 'circle'}, ...]}\n  // or\n  // {graphic: {left: 10, type: 'circle'}}\n  // to\n  // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}\n\n  if (zrUtil.isArray(graphicOption)) {\n    if (!graphicOption[0] || !graphicOption[0].elements) {\n      option.graphic = [{\n        elements: graphicOption\n      }];\n    } else {\n      // Only one graphic instance can be instantiated. (We dont\n      // want that too many views are created in echarts._viewMap)\n      option.graphic = [option.graphic[0]];\n    }\n  } else if (graphicOption && !graphicOption.elements) {\n    option.graphic = [{\n      elements: [graphicOption]\n    }];\n  }\n}); // ------\n// Model\n// ------\n\nvar GraphicModel = echarts.extendComponentModel({\n  type: 'graphic',\n  defaultOption: {\n    // Extra properties for each elements:\n    //\n    // left/right/top/bottom: (like 12, '22%', 'center', default undefined)\n    //      If left/rigth is set, shape.x/shape.cx/position will not be used.\n    //      If top/bottom is set, shape.y/shape.cy/position will not be used.\n    //      This mechanism is useful when you want to position a group/element\n    //      against the right side or the center of this container.\n    //\n    // width/height: (can only be pixel value, default 0)\n    //      Only be used to specify contianer(group) size, if needed. And\n    //      can not be percentage value (like '33%'). See the reason in the\n    //      layout algorithm below.\n    //\n    // bounding: (enum: 'all' (default) | 'raw')\n    //      Specify how to calculate boundingRect when locating.\n    //      'all': Get uioned and transformed boundingRect\n    //          from both itself and its descendants.\n    //          This mode simplies confining a group of elements in the bounding\n    //          of their ancester container (e.g., using 'right: 0').\n    //      'raw': Only use the boundingRect of itself and before transformed.\n    //          This mode is similar to css behavior, which is useful when you\n    //          want an element to be able to overflow its container. (Consider\n    //          a rotated circle needs to be located in a corner.)\n    // info: custom info. enables user to mount some info on elements and use them\n    //      in event handlers. Update them only when user specified, otherwise, remain.\n    // Note: elements is always behind its ancestors in this elements array.\n    elements: [],\n    parentId: null\n  },\n\n  /**\r\n   * Save el options for the sake of the performance (only update modified graphics).\r\n   * The order is the same as those in option. (ancesters -> descendants)\r\n   *\r\n   * @private\r\n   * @type {Array.<Object>}\r\n   */\n  _elOptionsToUpdate: null,\n\n  /**\r\n   * @override\r\n   */\n  mergeOption: function mergeOption(option) {\n    // Prevent default merge to elements\n    var elements = this.option.elements;\n    this.option.elements = null;\n    GraphicModel.superApply(this, 'mergeOption', arguments);\n    this.option.elements = elements;\n  },\n\n  /**\r\n   * @override\r\n   */\n  optionUpdated: function optionUpdated(newOption, isInit) {\n    var thisOption = this.option;\n    var newList = (isInit ? thisOption : newOption).elements;\n    var existList = thisOption.elements = isInit ? [] : thisOption.elements;\n    var flattenedList = [];\n\n    this._flatten(newList, flattenedList);\n\n    var mappingResult = modelUtil.mappingToExists(existList, flattenedList);\n    modelUtil.makeIdAndName(mappingResult); // Clear elOptionsToUpdate\n\n    var elOptionsToUpdate = this._elOptionsToUpdate = [];\n    zrUtil.each(mappingResult, function (resultItem, index) {\n      var newElOption = resultItem.option;\n\n      if (!newElOption) {\n        return;\n      }\n\n      elOptionsToUpdate.push(newElOption);\n      setKeyInfoToNewElOption(resultItem, newElOption);\n      mergeNewElOptionToExist(existList, index, newElOption);\n      setLayoutInfoToExist(existList[index], newElOption);\n    }, this); // Clean\n\n    for (var i = existList.length - 1; i >= 0; i--) {\n      if (existList[i] == null) {\n        existList.splice(i, 1);\n      } else {\n        // $action should be volatile, otherwise option gotten from\n        // `getOption` will contain unexpected $action.\n        delete existList[i].$action;\n      }\n    }\n  },\n\n  /**\r\n   * Convert\r\n   * [{\r\n   *  type: 'group',\r\n   *  id: 'xx',\r\n   *  children: [{type: 'circle'}, {type: 'polygon'}]\r\n   * }]\r\n   * to\r\n   * [\r\n   *  {type: 'group', id: 'xx'},\r\n   *  {type: 'circle', parentId: 'xx'},\r\n   *  {type: 'polygon', parentId: 'xx'}\r\n   * ]\r\n   *\r\n   * @private\r\n   * @param {Array.<Object>} optionList option list\r\n   * @param {Array.<Object>} result result of flatten\r\n   * @param {Object} parentOption parent option\r\n   */\n  _flatten: function _flatten(optionList, result, parentOption) {\n    zrUtil.each(optionList, function (option) {\n      if (!option) {\n        return;\n      }\n\n      if (parentOption) {\n        option.parentOption = parentOption;\n      }\n\n      result.push(option);\n      var children = option.children;\n\n      if (option.type === 'group' && children) {\n        this._flatten(children, result, option);\n      } // Deleting for JSON output, and for not affecting group creation.\n\n\n      delete option.children;\n    }, this);\n  },\n  // FIXME\n  // Pass to view using payload? setOption has a payload?\n  useElOptionsToUpdate: function useElOptionsToUpdate() {\n    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.\n\n    this._elOptionsToUpdate = null;\n    return els;\n  }\n}); // -----\n// View\n// -----\n\necharts.extendComponentView({\n  type: 'graphic',\n\n  /**\r\n   * @override\r\n   */\n  init: function init(ecModel, api) {\n    /**\r\n     * @private\r\n     * @type {module:zrender/core/util.HashMap}\r\n     */\n    this._elMap = zrUtil.createHashMap();\n    /**\r\n     * @private\r\n     * @type {module:echarts/graphic/GraphicModel}\r\n     */\n\n    this._lastGraphicModel;\n  },\n\n  /**\r\n   * @override\r\n   */\n  render: function render(graphicModel, ecModel, api) {\n    // Having leveraged between use cases and algorithm complexity, a very\n    // simple layout mechanism is used:\n    // The size(width/height) can be determined by itself or its parent (not\n    // implemented yet), but can not by its children. (Top-down travel)\n    // The location(x/y) can be determined by the bounding rect of itself\n    // (can including its descendants or not) and the size of its parent.\n    // (Bottom-up travel)\n    // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,\n    // view will be reused.\n    if (graphicModel !== this._lastGraphicModel) {\n      this._clear();\n    }\n\n    this._lastGraphicModel = graphicModel;\n\n    this._updateElements(graphicModel);\n\n    this._relocate(graphicModel, api);\n  },\n\n  /**\r\n   * Update graphic elements.\r\n   *\r\n   * @private\r\n   * @param {Object} graphicModel graphic model\r\n   */\n  _updateElements: function _updateElements(graphicModel) {\n    var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();\n\n    if (!elOptionsToUpdate) {\n      return;\n    }\n\n    var elMap = this._elMap;\n    var rootGroup = this.group; // Top-down tranverse to assign graphic settings to each elements.\n\n    zrUtil.each(elOptionsToUpdate, function (elOption) {\n      var $action = elOption.$action;\n      var id = elOption.id;\n      var existEl = elMap.get(id);\n      var parentId = elOption.parentId;\n      var targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;\n      var elOptionStyle = elOption.style;\n\n      if (elOption.type === 'text' && elOptionStyle) {\n        // In top/bottom mode, textVerticalAlign should not be used, which cause\n        // inaccurately locating.\n        if (elOption.hv && elOption.hv[1]) {\n          elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = null;\n        } // Compatible with previous setting: both support fill and textFill,\n        // stroke and textStroke.\n\n\n        !elOptionStyle.hasOwnProperty('textFill') && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);\n        !elOptionStyle.hasOwnProperty('textStroke') && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);\n      } // Remove unnecessary props to avoid potential problems.\n\n\n      var elOptionCleaned = getCleanedElOption(elOption); // For simple, do not support parent change, otherwise reorder is needed.\n\n      if (!$action || $action === 'merge') {\n        existEl ? existEl.attr(elOptionCleaned) : createEl(id, targetElParent, elOptionCleaned, elMap);\n      } else if ($action === 'replace') {\n        removeEl(existEl, elMap);\n        createEl(id, targetElParent, elOptionCleaned, elMap);\n      } else if ($action === 'remove') {\n        removeEl(existEl, elMap);\n      }\n\n      var el = elMap.get(id);\n\n      if (el) {\n        el.__ecGraphicWidthOption = elOption.width;\n        el.__ecGraphicHeightOption = elOption.height;\n        setEventData(el, graphicModel, elOption);\n      }\n    });\n  },\n\n  /**\r\n   * Locate graphic elements.\r\n   *\r\n   * @private\r\n   * @param {Object} graphicModel graphic model\r\n   * @param {module:echarts/ExtensionAPI} api extension API\r\n   */\n  _relocate: function _relocate(graphicModel, api) {\n    var elOptions = graphicModel.option.elements;\n    var rootGroup = this.group;\n    var elMap = this._elMap;\n    var apiWidth = api.getWidth();\n    var apiHeight = api.getHeight(); // Top-down to calculate percentage width/height of group\n\n    for (var i = 0; i < elOptions.length; i++) {\n      var elOption = elOptions[i];\n      var el = elMap.get(elOption.id);\n\n      if (!el || !el.isGroup) {\n        continue;\n      }\n\n      var parentEl = el.parent;\n      var isParentRoot = parentEl === rootGroup; // Like 'position:absolut' in css, default 0.\n\n      el.__ecGraphicWidth = parsePercent(el.__ecGraphicWidthOption, isParentRoot ? apiWidth : parentEl.__ecGraphicWidth) || 0;\n      el.__ecGraphicHeight = parsePercent(el.__ecGraphicHeightOption, isParentRoot ? apiHeight : parentEl.__ecGraphicHeight) || 0;\n    } // Bottom-up tranvese all elements (consider ec resize) to locate elements.\n\n\n    for (var i = elOptions.length - 1; i >= 0; i--) {\n      var elOption = elOptions[i];\n      var el = elMap.get(elOption.id);\n\n      if (!el) {\n        continue;\n      }\n\n      var parentEl = el.parent;\n      var containerInfo = parentEl === rootGroup ? {\n        width: apiWidth,\n        height: apiHeight\n      } : {\n        width: parentEl.__ecGraphicWidth,\n        height: parentEl.__ecGraphicHeight\n      }; // PENDING\n      // Currently, when `bounding: 'all'`, the union bounding rect of the group\n      // does not include the rect of [0, 0, group.width, group.height], which\n      // is probably weird for users. Should we make a break change for it?\n\n      layoutUtil.positionElement(el, elOption, containerInfo, null, {\n        hv: elOption.hv,\n        boundingMode: elOption.bounding\n      });\n    }\n  },\n\n  /**\r\n   * Clear all elements.\r\n   *\r\n   * @private\r\n   */\n  _clear: function _clear() {\n    var elMap = this._elMap;\n    elMap.each(function (el) {\n      removeEl(el, elMap);\n    });\n    this._elMap = zrUtil.createHashMap();\n  },\n\n  /**\r\n   * @override\r\n   */\n  dispose: function dispose() {\n    this._clear();\n  }\n});\n\nfunction createEl(id, targetElParent, elOption, elMap) {\n  var graphicType = elOption.type;\n  var Clz = _nonShapeGraphicElements.hasOwnProperty(graphicType) // Those graphic elements are not shapes. They should not be\n  // overwritten by users, so do them first.\n  ? _nonShapeGraphicElements[graphicType] : graphicUtil.getShapeClass(graphicType);\n  var el = new Clz(elOption);\n  targetElParent.add(el);\n  elMap.set(id, el);\n  el.__ecGraphicId = id;\n}\n\nfunction removeEl(existEl, elMap) {\n  var existElParent = existEl && existEl.parent;\n\n  if (existElParent) {\n    existEl.type === 'group' && existEl.traverse(function (el) {\n      removeEl(el, elMap);\n    });\n    elMap.removeKey(existEl.__ecGraphicId);\n    existElParent.remove(existEl);\n  }\n} // Remove unnecessary props to avoid potential problems.\n\n\nfunction getCleanedElOption(elOption) {\n  elOption = zrUtil.extend({}, elOption);\n  zrUtil.each(['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS), function (name) {\n    delete elOption[name];\n  });\n  return elOption;\n}\n\nfunction isSetLoc(obj, props) {\n  var isSet;\n  zrUtil.each(props, function (prop) {\n    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\n  });\n  return isSet;\n}\n\nfunction setKeyInfoToNewElOption(resultItem, newElOption) {\n  var existElOption = resultItem.exist; // Set id and type after id assigned.\n\n  newElOption.id = resultItem.keyInfo.id;\n  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified\n\n  if (newElOption.parentId == null) {\n    var newElParentOption = newElOption.parentOption;\n\n    if (newElParentOption) {\n      newElOption.parentId = newElParentOption.id;\n    } else if (existElOption) {\n      newElOption.parentId = existElOption.parentId;\n    }\n  } // Clear\n\n\n  newElOption.parentOption = null;\n}\n\nfunction mergeNewElOptionToExist(existList, index, newElOption) {\n  // Update existing options, for `getOption` feature.\n  var newElOptCopy = zrUtil.extend({}, newElOption);\n  var existElOption = existList[index];\n  var $action = newElOption.$action || 'merge';\n\n  if ($action === 'merge') {\n    if (existElOption) {\n      // We can ensure that newElOptCopy and existElOption are not\n      // the same object, so `merge` will not change newElOptCopy.\n      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.\n\n      layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {\n        ignoreSize: true\n      }); // Will be used in render.\n\n      layoutUtil.copyLayoutParams(newElOption, existElOption);\n    } else {\n      existList[index] = newElOptCopy;\n    }\n  } else if ($action === 'replace') {\n    existList[index] = newElOptCopy;\n  } else if ($action === 'remove') {\n    // null will be cleaned later.\n    existElOption && (existList[index] = null);\n  }\n}\n\nfunction setLayoutInfoToExist(existItem, newElOption) {\n  if (!existItem) {\n    return;\n  }\n\n  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.\n  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.\n  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.\n\n  if (existItem.type === 'group') {\n    existItem.width == null && (existItem.width = newElOption.width = 0);\n    existItem.height == null && (existItem.height = newElOption.height = 0);\n  }\n}\n\nfunction setEventData(el, graphicModel, elOption) {\n  var eventData = el.eventData; // Simple optimize for large amount of elements that no need event.\n\n  if (!el.silent && !el.ignore && !eventData) {\n    eventData = el.eventData = {\n      componentType: 'graphic',\n      componentIndex: graphicModel.componentIndex,\n      name: el.name\n    };\n  } // `elOption.info` enables user to mount some info on\n  // elements and use them in event handlers.\n\n\n  if (eventData) {\n    eventData.info = el.info;\n  }\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/component/graphic.js"],"names":["_config","require","__DEV__","echarts","zrUtil","modelUtil","graphicUtil","layoutUtil","_number","parsePercent","_nonShapeGraphicElements","path","compoundPath","group","Group","image","Image","text","Text","registerPreprocessor","option","graphicOption","graphic","isArray","elements","GraphicModel","extendComponentModel","type","defaultOption","parentId","_elOptionsToUpdate","mergeOption","superApply","arguments","optionUpdated","newOption","isInit","thisOption","newList","existList","flattenedList","_flatten","mappingResult","mappingToExists","makeIdAndName","elOptionsToUpdate","each","resultItem","index","newElOption","push","setKeyInfoToNewElOption","mergeNewElOptionToExist","setLayoutInfoToExist","i","length","splice","$action","optionList","result","parentOption","children","useElOptionsToUpdate","els","extendComponentView","init","ecModel","api","_elMap","createHashMap","_lastGraphicModel","render","graphicModel","_clear","_updateElements","_relocate","elMap","rootGroup","elOption","id","existEl","get","targetElParent","elOptionStyle","style","hv","textVerticalAlign","textBaseline","hasOwnProperty","fill","textFill","stroke","textStroke","elOptionCleaned","getCleanedElOption","attr","createEl","removeEl","el","__ecGraphicWidthOption","width","__ecGraphicHeightOption","height","setEventData","elOptions","apiWidth","getWidth","apiHeight","getHeight","isGroup","parentEl","parent","isParentRoot","__ecGraphicWidth","__ecGraphicHeight","containerInfo","positionElement","boundingMode","bounding","dispose","graphicType","Clz","getShapeClass","add","set","__ecGraphicId","existElParent","traverse","removeKey","remove","extend","concat","LOCATION_PARAMS","name","isSetLoc","obj","props","isSet","prop","existElOption","exist","keyInfo","newElParentOption","newElOptCopy","merge","mergeLayoutParam","ignoreSize","copyLayoutParams","existItem","eventData","silent","ignore","componentType","componentIndex","info"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIC,OAAO,GAAGF,OAAO,CAACE,OAAtB;;AAEA,IAAIC,OAAO,GAAGF,OAAO,CAAC,YAAD,CAArB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAII,SAAS,GAAGJ,OAAO,CAAC,eAAD,CAAvB;;AAEA,IAAIK,WAAW,GAAGL,OAAO,CAAC,iBAAD,CAAzB;;AAEA,IAAIM,UAAU,GAAGN,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIO,OAAO,GAAGP,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAIQ,YAAY,GAAGD,OAAO,CAACC,YAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,wBAAwB,GAAG;AAC7B;AACAC,EAAAA,IAAI,EAAE,IAFuB;AAG7BC,EAAAA,YAAY,EAAE,IAHe;AAI7B;AACAC,EAAAA,KAAK,EAAEP,WAAW,CAACQ,KALU;AAM7BC,EAAAA,KAAK,EAAET,WAAW,CAACU,KANU;AAO7BC,EAAAA,IAAI,EAAEX,WAAW,CAACY;AAPW,CAA/B,C,CAQG;AACH;AACA;;AAEAf,OAAO,CAACgB,oBAAR,CAA6B,UAAUC,MAAV,EAAkB;AAC7C,MAAIC,aAAa,GAAGD,MAAM,CAACE,OAA3B,CAD6C,CACT;AACpC;AACA;AACA;AACA;AACA;;AAEA,MAAIlB,MAAM,CAACmB,OAAP,CAAeF,aAAf,CAAJ,EAAmC;AACjC,QAAI,CAACA,aAAa,CAAC,CAAD,CAAd,IAAqB,CAACA,aAAa,CAAC,CAAD,CAAb,CAAiBG,QAA3C,EAAqD;AACnDJ,MAAAA,MAAM,CAACE,OAAP,GAAiB,CAAC;AAChBE,QAAAA,QAAQ,EAAEH;AADM,OAAD,CAAjB;AAGD,KAJD,MAIO;AACL;AACA;AACAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,CAACF,MAAM,CAACE,OAAP,CAAe,CAAf,CAAD,CAAjB;AACD;AACF,GAVD,MAUO,IAAID,aAAa,IAAI,CAACA,aAAa,CAACG,QAApC,EAA8C;AACnDJ,IAAAA,MAAM,CAACE,OAAP,GAAiB,CAAC;AAChBE,MAAAA,QAAQ,EAAE,CAACH,aAAD;AADM,KAAD,CAAjB;AAGD;AACF,CAvBD,E,CAuBI;AACJ;AACA;;AAEA,IAAII,YAAY,GAAGtB,OAAO,CAACuB,oBAAR,CAA6B;AAC9CC,EAAAA,IAAI,EAAE,SADwC;AAE9CC,EAAAA,aAAa,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,IAAAA,QAAQ,EAAE,EA3BG;AA4BbK,IAAAA,QAAQ,EAAE;AA5BG,GAF+B;;AAiC9C;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE,IAxC0B;;AA0C9C;AACF;AACA;AACEC,EAAAA,WAAW,EAAE,qBAAUX,MAAV,EAAkB;AAC7B;AACA,QAAII,QAAQ,GAAG,KAAKJ,MAAL,CAAYI,QAA3B;AACA,SAAKJ,MAAL,CAAYI,QAAZ,GAAuB,IAAvB;AACAC,IAAAA,YAAY,CAACO,UAAb,CAAwB,IAAxB,EAA8B,aAA9B,EAA6CC,SAA7C;AACA,SAAKb,MAAL,CAAYI,QAAZ,GAAuBA,QAAvB;AACD,GAnD6C;;AAqD9C;AACF;AACA;AACEU,EAAAA,aAAa,EAAE,uBAAUC,SAAV,EAAqBC,MAArB,EAA6B;AAC1C,QAAIC,UAAU,GAAG,KAAKjB,MAAtB;AACA,QAAIkB,OAAO,GAAG,CAACF,MAAM,GAAGC,UAAH,GAAgBF,SAAvB,EAAkCX,QAAhD;AACA,QAAIe,SAAS,GAAGF,UAAU,CAACb,QAAX,GAAsBY,MAAM,GAAG,EAAH,GAAQC,UAAU,CAACb,QAA/D;AACA,QAAIgB,aAAa,GAAG,EAApB;;AAEA,SAAKC,QAAL,CAAcH,OAAd,EAAuBE,aAAvB;;AAEA,QAAIE,aAAa,GAAGrC,SAAS,CAACsC,eAAV,CAA0BJ,SAA1B,EAAqCC,aAArC,CAApB;AACAnC,IAAAA,SAAS,CAACuC,aAAV,CAAwBF,aAAxB,EAT0C,CASF;;AAExC,QAAIG,iBAAiB,GAAG,KAAKf,kBAAL,GAA0B,EAAlD;AACA1B,IAAAA,MAAM,CAAC0C,IAAP,CAAYJ,aAAZ,EAA2B,UAAUK,UAAV,EAAsBC,KAAtB,EAA6B;AACtD,UAAIC,WAAW,GAAGF,UAAU,CAAC3B,MAA7B;;AAEA,UAAI,CAAC6B,WAAL,EAAkB;AAChB;AACD;;AAEDJ,MAAAA,iBAAiB,CAACK,IAAlB,CAAuBD,WAAvB;AACAE,MAAAA,uBAAuB,CAACJ,UAAD,EAAaE,WAAb,CAAvB;AACAG,MAAAA,uBAAuB,CAACb,SAAD,EAAYS,KAAZ,EAAmBC,WAAnB,CAAvB;AACAI,MAAAA,oBAAoB,CAACd,SAAS,CAACS,KAAD,CAAV,EAAmBC,WAAnB,CAApB;AACD,KAXD,EAWG,IAXH,EAZ0C,CAuBhC;;AAEV,SAAK,IAAIK,CAAC,GAAGf,SAAS,CAACgB,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,UAAIf,SAAS,CAACe,CAAD,CAAT,IAAgB,IAApB,EAA0B;AACxBf,QAAAA,SAAS,CAACiB,MAAV,CAAiBF,CAAjB,EAAoB,CAApB;AACD,OAFD,MAEO;AACL;AACA;AACA,eAAOf,SAAS,CAACe,CAAD,CAAT,CAAaG,OAApB;AACD;AACF;AACF,GA1F6C;;AA4F9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEhB,EAAAA,QAAQ,EAAE,kBAAUiB,UAAV,EAAsBC,MAAtB,EAA8BC,YAA9B,EAA4C;AACpDxD,IAAAA,MAAM,CAAC0C,IAAP,CAAYY,UAAZ,EAAwB,UAAUtC,MAAV,EAAkB;AACxC,UAAI,CAACA,MAAL,EAAa;AACX;AACD;;AAED,UAAIwC,YAAJ,EAAkB;AAChBxC,QAAAA,MAAM,CAACwC,YAAP,GAAsBA,YAAtB;AACD;;AAEDD,MAAAA,MAAM,CAACT,IAAP,CAAY9B,MAAZ;AACA,UAAIyC,QAAQ,GAAGzC,MAAM,CAACyC,QAAtB;;AAEA,UAAIzC,MAAM,CAACO,IAAP,KAAgB,OAAhB,IAA2BkC,QAA/B,EAAyC;AACvC,aAAKpB,QAAL,CAAcoB,QAAd,EAAwBF,MAAxB,EAAgCvC,MAAhC;AACD,OAduC,CActC;;;AAGF,aAAOA,MAAM,CAACyC,QAAd;AACD,KAlBD,EAkBG,IAlBH;AAmBD,GAnI6C;AAoI9C;AACA;AACAC,EAAAA,oBAAoB,EAAE,gCAAY;AAChC,QAAIC,GAAG,GAAG,KAAKjC,kBAAf,CADgC,CACG;;AAEnC,SAAKA,kBAAL,GAA0B,IAA1B;AACA,WAAOiC,GAAP;AACD;AA3I6C,CAA7B,CAAnB,C,CA4II;AACJ;AACA;;AAEA5D,OAAO,CAAC6D,mBAAR,CAA4B;AAC1BrC,EAAAA,IAAI,EAAE,SADoB;;AAG1B;AACF;AACA;AACEsC,EAAAA,IAAI,EAAE,cAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC5B;AACJ;AACA;AACA;AACI,SAAKC,MAAL,GAAchE,MAAM,CAACiE,aAAP,EAAd;AACA;AACJ;AACA;AACA;;AAEI,SAAKC,iBAAL;AACD,GAlByB;;AAoB1B;AACF;AACA;AACEC,EAAAA,MAAM,EAAE,gBAAUC,YAAV,EAAwBN,OAAxB,EAAiCC,GAAjC,EAAsC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIK,YAAY,KAAK,KAAKF,iBAA1B,EAA6C;AAC3C,WAAKG,MAAL;AACD;;AAED,SAAKH,iBAAL,GAAyBE,YAAzB;;AAEA,SAAKE,eAAL,CAAqBF,YAArB;;AAEA,SAAKG,SAAL,CAAeH,YAAf,EAA6BL,GAA7B;AACD,GA1CyB;;AA4C1B;AACF;AACA;AACA;AACA;AACA;AACEO,EAAAA,eAAe,EAAE,yBAAUF,YAAV,EAAwB;AACvC,QAAI3B,iBAAiB,GAAG2B,YAAY,CAACV,oBAAb,EAAxB;;AAEA,QAAI,CAACjB,iBAAL,EAAwB;AACtB;AACD;;AAED,QAAI+B,KAAK,GAAG,KAAKR,MAAjB;AACA,QAAIS,SAAS,GAAG,KAAKhE,KAArB,CARuC,CAQX;;AAE5BT,IAAAA,MAAM,CAAC0C,IAAP,CAAYD,iBAAZ,EAA+B,UAAUiC,QAAV,EAAoB;AACjD,UAAIrB,OAAO,GAAGqB,QAAQ,CAACrB,OAAvB;AACA,UAAIsB,EAAE,GAAGD,QAAQ,CAACC,EAAlB;AACA,UAAIC,OAAO,GAAGJ,KAAK,CAACK,GAAN,CAAUF,EAAV,CAAd;AACA,UAAIlD,QAAQ,GAAGiD,QAAQ,CAACjD,QAAxB;AACA,UAAIqD,cAAc,GAAGrD,QAAQ,IAAI,IAAZ,GAAmB+C,KAAK,CAACK,GAAN,CAAUpD,QAAV,CAAnB,GAAyCgD,SAA9D;AACA,UAAIM,aAAa,GAAGL,QAAQ,CAACM,KAA7B;;AAEA,UAAIN,QAAQ,CAACnD,IAAT,KAAkB,MAAlB,IAA4BwD,aAAhC,EAA+C;AAC7C;AACA;AACA,YAAIL,QAAQ,CAACO,EAAT,IAAeP,QAAQ,CAACO,EAAT,CAAY,CAAZ,CAAnB,EAAmC;AACjCF,UAAAA,aAAa,CAACG,iBAAd,GAAkCH,aAAa,CAACI,YAAd,GAA6B,IAA/D;AACD,SAL4C,CAK3C;AACF;;;AAGA,SAACJ,aAAa,CAACK,cAAd,CAA6B,UAA7B,CAAD,IAA6CL,aAAa,CAACM,IAA3D,KAAoEN,aAAa,CAACO,QAAd,GAAyBP,aAAa,CAACM,IAA3G;AACA,SAACN,aAAa,CAACK,cAAd,CAA6B,YAA7B,CAAD,IAA+CL,aAAa,CAACQ,MAA7D,KAAwER,aAAa,CAACS,UAAd,GAA2BT,aAAa,CAACQ,MAAjH;AACD,OAnBgD,CAmB/C;;;AAGF,UAAIE,eAAe,GAAGC,kBAAkB,CAAChB,QAAD,CAAxC,CAtBiD,CAsBG;;AAEpD,UAAI,CAACrB,OAAD,IAAYA,OAAO,KAAK,OAA5B,EAAqC;AACnCuB,QAAAA,OAAO,GAAGA,OAAO,CAACe,IAAR,CAAaF,eAAb,CAAH,GAAmCG,QAAQ,CAACjB,EAAD,EAAKG,cAAL,EAAqBW,eAArB,EAAsCjB,KAAtC,CAAlD;AACD,OAFD,MAEO,IAAInB,OAAO,KAAK,SAAhB,EAA2B;AAChCwC,QAAAA,QAAQ,CAACjB,OAAD,EAAUJ,KAAV,CAAR;AACAoB,QAAAA,QAAQ,CAACjB,EAAD,EAAKG,cAAL,EAAqBW,eAArB,EAAsCjB,KAAtC,CAAR;AACD,OAHM,MAGA,IAAInB,OAAO,KAAK,QAAhB,EAA0B;AAC/BwC,QAAAA,QAAQ,CAACjB,OAAD,EAAUJ,KAAV,CAAR;AACD;;AAED,UAAIsB,EAAE,GAAGtB,KAAK,CAACK,GAAN,CAAUF,EAAV,CAAT;;AAEA,UAAImB,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACC,sBAAH,GAA4BrB,QAAQ,CAACsB,KAArC;AACAF,QAAAA,EAAE,CAACG,uBAAH,GAA6BvB,QAAQ,CAACwB,MAAtC;AACAC,QAAAA,YAAY,CAACL,EAAD,EAAK1B,YAAL,EAAmBM,QAAnB,CAAZ;AACD;AACF,KAxCD;AAyCD,GArGyB;;AAuG1B;AACF;AACA;AACA;AACA;AACA;AACA;AACEH,EAAAA,SAAS,EAAE,mBAAUH,YAAV,EAAwBL,GAAxB,EAA6B;AACtC,QAAIqC,SAAS,GAAGhC,YAAY,CAACpD,MAAb,CAAoBI,QAApC;AACA,QAAIqD,SAAS,GAAG,KAAKhE,KAArB;AACA,QAAI+D,KAAK,GAAG,KAAKR,MAAjB;AACA,QAAIqC,QAAQ,GAAGtC,GAAG,CAACuC,QAAJ,EAAf;AACA,QAAIC,SAAS,GAAGxC,GAAG,CAACyC,SAAJ,EAAhB,CALsC,CAKL;;AAEjC,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,SAAS,CAACjD,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAIwB,QAAQ,GAAG0B,SAAS,CAAClD,CAAD,CAAxB;AACA,UAAI4C,EAAE,GAAGtB,KAAK,CAACK,GAAN,CAAUH,QAAQ,CAACC,EAAnB,CAAT;;AAEA,UAAI,CAACmB,EAAD,IAAO,CAACA,EAAE,CAACW,OAAf,EAAwB;AACtB;AACD;;AAED,UAAIC,QAAQ,GAAGZ,EAAE,CAACa,MAAlB;AACA,UAAIC,YAAY,GAAGF,QAAQ,KAAKjC,SAAhC,CATyC,CASE;;AAE3CqB,MAAAA,EAAE,CAACe,gBAAH,GAAsBxG,YAAY,CAACyF,EAAE,CAACC,sBAAJ,EAA4Ba,YAAY,GAAGP,QAAH,GAAcK,QAAQ,CAACG,gBAA/D,CAAZ,IAAgG,CAAtH;AACAf,MAAAA,EAAE,CAACgB,iBAAH,GAAuBzG,YAAY,CAACyF,EAAE,CAACG,uBAAJ,EAA6BW,YAAY,GAAGL,SAAH,GAAeG,QAAQ,CAACI,iBAAjE,CAAZ,IAAmG,CAA1H;AACD,KApBqC,CAoBpC;;;AAGF,SAAK,IAAI5D,CAAC,GAAGkD,SAAS,CAACjD,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,UAAIwB,QAAQ,GAAG0B,SAAS,CAAClD,CAAD,CAAxB;AACA,UAAI4C,EAAE,GAAGtB,KAAK,CAACK,GAAN,CAAUH,QAAQ,CAACC,EAAnB,CAAT;;AAEA,UAAI,CAACmB,EAAL,EAAS;AACP;AACD;;AAED,UAAIY,QAAQ,GAAGZ,EAAE,CAACa,MAAlB;AACA,UAAII,aAAa,GAAGL,QAAQ,KAAKjC,SAAb,GAAyB;AAC3CuB,QAAAA,KAAK,EAAEK,QADoC;AAE3CH,QAAAA,MAAM,EAAEK;AAFmC,OAAzB,GAGhB;AACFP,QAAAA,KAAK,EAAEU,QAAQ,CAACG,gBADd;AAEFX,QAAAA,MAAM,EAAEQ,QAAQ,CAACI;AAFf,OAHJ,CAT8C,CAe3C;AACH;AACA;AACA;;AAEA3G,MAAAA,UAAU,CAAC6G,eAAX,CAA2BlB,EAA3B,EAA+BpB,QAA/B,EAAyCqC,aAAzC,EAAwD,IAAxD,EAA8D;AAC5D9B,QAAAA,EAAE,EAAEP,QAAQ,CAACO,EAD+C;AAE5DgC,QAAAA,YAAY,EAAEvC,QAAQ,CAACwC;AAFqC,OAA9D;AAID;AACF,GA9JyB;;AAgK1B;AACF;AACA;AACA;AACA;AACE7C,EAAAA,MAAM,EAAE,kBAAY;AAClB,QAAIG,KAAK,GAAG,KAAKR,MAAjB;AACAQ,IAAAA,KAAK,CAAC9B,IAAN,CAAW,UAAUoD,EAAV,EAAc;AACvBD,MAAAA,QAAQ,CAACC,EAAD,EAAKtB,KAAL,CAAR;AACD,KAFD;AAGA,SAAKR,MAAL,GAAchE,MAAM,CAACiE,aAAP,EAAd;AACD,GA3KyB;;AA6K1B;AACF;AACA;AACEkD,EAAAA,OAAO,EAAE,mBAAY;AACnB,SAAK9C,MAAL;AACD;AAlLyB,CAA5B;;AAqLA,SAASuB,QAAT,CAAkBjB,EAAlB,EAAsBG,cAAtB,EAAsCJ,QAAtC,EAAgDF,KAAhD,EAAuD;AACrD,MAAI4C,WAAW,GAAG1C,QAAQ,CAACnD,IAA3B;AACA,MAAI8F,GAAG,GAAG/G,wBAAwB,CAAC8E,cAAzB,CAAwCgC,WAAxC,EAAqD;AAC/D;AADU,IAER9G,wBAAwB,CAAC8G,WAAD,CAFhB,GAEgClH,WAAW,CAACoH,aAAZ,CAA0BF,WAA1B,CAF1C;AAGA,MAAItB,EAAE,GAAG,IAAIuB,GAAJ,CAAQ3C,QAAR,CAAT;AACAI,EAAAA,cAAc,CAACyC,GAAf,CAAmBzB,EAAnB;AACAtB,EAAAA,KAAK,CAACgD,GAAN,CAAU7C,EAAV,EAAcmB,EAAd;AACAA,EAAAA,EAAE,CAAC2B,aAAH,GAAmB9C,EAAnB;AACD;;AAED,SAASkB,QAAT,CAAkBjB,OAAlB,EAA2BJ,KAA3B,EAAkC;AAChC,MAAIkD,aAAa,GAAG9C,OAAO,IAAIA,OAAO,CAAC+B,MAAvC;;AAEA,MAAIe,aAAJ,EAAmB;AACjB9C,IAAAA,OAAO,CAACrD,IAAR,KAAiB,OAAjB,IAA4BqD,OAAO,CAAC+C,QAAR,CAAiB,UAAU7B,EAAV,EAAc;AACzDD,MAAAA,QAAQ,CAACC,EAAD,EAAKtB,KAAL,CAAR;AACD,KAF2B,CAA5B;AAGAA,IAAAA,KAAK,CAACoD,SAAN,CAAgBhD,OAAO,CAAC6C,aAAxB;AACAC,IAAAA,aAAa,CAACG,MAAd,CAAqBjD,OAArB;AACD;AACF,C,CAAC;;;AAGF,SAASc,kBAAT,CAA4BhB,QAA5B,EAAsC;AACpCA,EAAAA,QAAQ,GAAG1E,MAAM,CAAC8H,MAAP,CAAc,EAAd,EAAkBpD,QAAlB,CAAX;AACA1E,EAAAA,MAAM,CAAC0C,IAAP,CAAY,CAAC,IAAD,EAAO,UAAP,EAAmB,SAAnB,EAA8B,IAA9B,EAAoC,UAApC,EAAgDqF,MAAhD,CAAuD5H,UAAU,CAAC6H,eAAlE,CAAZ,EAAgG,UAAUC,IAAV,EAAgB;AAC9G,WAAOvD,QAAQ,CAACuD,IAAD,CAAf;AACD,GAFD;AAGA,SAAOvD,QAAP;AACD;;AAED,SAASwD,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,KAAJ;AACArI,EAAAA,MAAM,CAAC0C,IAAP,CAAY0F,KAAZ,EAAmB,UAAUE,IAAV,EAAgB;AACjCH,IAAAA,GAAG,CAACG,IAAD,CAAH,IAAa,IAAb,IAAqBH,GAAG,CAACG,IAAD,CAAH,KAAc,MAAnC,KAA8CD,KAAK,GAAG,IAAtD;AACD,GAFD;AAGA,SAAOA,KAAP;AACD;;AAED,SAAStF,uBAAT,CAAiCJ,UAAjC,EAA6CE,WAA7C,EAA0D;AACxD,MAAI0F,aAAa,GAAG5F,UAAU,CAAC6F,KAA/B,CADwD,CAClB;;AAEtC3F,EAAAA,WAAW,CAAC8B,EAAZ,GAAiBhC,UAAU,CAAC8F,OAAX,CAAmB9D,EAApC;AACA,GAAC9B,WAAW,CAACtB,IAAb,IAAqBgH,aAArB,KAAuC1F,WAAW,CAACtB,IAAZ,GAAmBgH,aAAa,CAAChH,IAAxE,EAJwD,CAIuB;;AAE/E,MAAIsB,WAAW,CAACpB,QAAZ,IAAwB,IAA5B,EAAkC;AAChC,QAAIiH,iBAAiB,GAAG7F,WAAW,CAACW,YAApC;;AAEA,QAAIkF,iBAAJ,EAAuB;AACrB7F,MAAAA,WAAW,CAACpB,QAAZ,GAAuBiH,iBAAiB,CAAC/D,EAAzC;AACD,KAFD,MAEO,IAAI4D,aAAJ,EAAmB;AACxB1F,MAAAA,WAAW,CAACpB,QAAZ,GAAuB8G,aAAa,CAAC9G,QAArC;AACD;AACF,GAduD,CActD;;;AAGFoB,EAAAA,WAAW,CAACW,YAAZ,GAA2B,IAA3B;AACD;;AAED,SAASR,uBAAT,CAAiCb,SAAjC,EAA4CS,KAA5C,EAAmDC,WAAnD,EAAgE;AAC9D;AACA,MAAI8F,YAAY,GAAG3I,MAAM,CAAC8H,MAAP,CAAc,EAAd,EAAkBjF,WAAlB,CAAnB;AACA,MAAI0F,aAAa,GAAGpG,SAAS,CAACS,KAAD,CAA7B;AACA,MAAIS,OAAO,GAAGR,WAAW,CAACQ,OAAZ,IAAuB,OAArC;;AAEA,MAAIA,OAAO,KAAK,OAAhB,EAAyB;AACvB,QAAIkF,aAAJ,EAAmB;AACjB;AACA;AACAvI,MAAAA,MAAM,CAAC4I,KAAP,CAAaL,aAAb,EAA4BI,YAA5B,EAA0C,IAA1C,EAHiB,CAGgC;;AAEjDxI,MAAAA,UAAU,CAAC0I,gBAAX,CAA4BN,aAA5B,EAA2CI,YAA3C,EAAyD;AACvDG,QAAAA,UAAU,EAAE;AAD2C,OAAzD,EALiB,CAOb;;AAEJ3I,MAAAA,UAAU,CAAC4I,gBAAX,CAA4BlG,WAA5B,EAAyC0F,aAAzC;AACD,KAVD,MAUO;AACLpG,MAAAA,SAAS,CAACS,KAAD,CAAT,GAAmB+F,YAAnB;AACD;AACF,GAdD,MAcO,IAAItF,OAAO,KAAK,SAAhB,EAA2B;AAChClB,IAAAA,SAAS,CAACS,KAAD,CAAT,GAAmB+F,YAAnB;AACD,GAFM,MAEA,IAAItF,OAAO,KAAK,QAAhB,EAA0B;AAC/B;AACAkF,IAAAA,aAAa,KAAKpG,SAAS,CAACS,KAAD,CAAT,GAAmB,IAAxB,CAAb;AACD;AACF;;AAED,SAASK,oBAAT,CAA8B+F,SAA9B,EAAyCnG,WAAzC,EAAsD;AACpD,MAAI,CAACmG,SAAL,EAAgB;AACd;AACD;;AAEDA,EAAAA,SAAS,CAAC/D,EAAV,GAAepC,WAAW,CAACoC,EAAZ,GAAiB,CAAC;AACjCiD,EAAAA,QAAQ,CAACrF,WAAD,EAAc,CAAC,MAAD,EAAS,OAAT,CAAd,CADwB,EACU;AAC1CqF,EAAAA,QAAQ,CAACrF,WAAD,EAAc,CAAC,KAAD,EAAQ,QAAR,CAAd,CAFwB,CAAhC,CALoD,CAOT;;AAE3C,MAAImG,SAAS,CAACzH,IAAV,KAAmB,OAAvB,EAAgC;AAC9ByH,IAAAA,SAAS,CAAChD,KAAV,IAAmB,IAAnB,KAA4BgD,SAAS,CAAChD,KAAV,GAAkBnD,WAAW,CAACmD,KAAZ,GAAoB,CAAlE;AACAgD,IAAAA,SAAS,CAAC9C,MAAV,IAAoB,IAApB,KAA6B8C,SAAS,CAAC9C,MAAV,GAAmBrD,WAAW,CAACqD,MAAZ,GAAqB,CAArE;AACD;AACF;;AAED,SAASC,YAAT,CAAsBL,EAAtB,EAA0B1B,YAA1B,EAAwCM,QAAxC,EAAkD;AAChD,MAAIuE,SAAS,GAAGnD,EAAE,CAACmD,SAAnB,CADgD,CAClB;;AAE9B,MAAI,CAACnD,EAAE,CAACoD,MAAJ,IAAc,CAACpD,EAAE,CAACqD,MAAlB,IAA4B,CAACF,SAAjC,EAA4C;AAC1CA,IAAAA,SAAS,GAAGnD,EAAE,CAACmD,SAAH,GAAe;AACzBG,MAAAA,aAAa,EAAE,SADU;AAEzBC,MAAAA,cAAc,EAAEjF,YAAY,CAACiF,cAFJ;AAGzBpB,MAAAA,IAAI,EAAEnC,EAAE,CAACmC;AAHgB,KAA3B;AAKD,GAT+C,CAS9C;AACF;;;AAGA,MAAIgB,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAACK,IAAV,GAAiBxD,EAAE,CAACwD,IAApB;AACD;AACF","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar _config = require(\"../config\");\r\n\r\nvar __DEV__ = _config.__DEV__;\r\n\r\nvar echarts = require(\"../echarts\");\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\nvar modelUtil = require(\"../util/model\");\r\n\r\nvar graphicUtil = require(\"../util/graphic\");\r\n\r\nvar layoutUtil = require(\"../util/layout\");\r\n\r\nvar _number = require(\"../util/number\");\r\n\r\nvar parsePercent = _number.parsePercent;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar _nonShapeGraphicElements = {\r\n  // Reserved but not supported in graphic component.\r\n  path: null,\r\n  compoundPath: null,\r\n  // Supported in graphic component.\r\n  group: graphicUtil.Group,\r\n  image: graphicUtil.Image,\r\n  text: graphicUtil.Text\r\n}; // -------------\r\n// Preprocessor\r\n// -------------\r\n\r\necharts.registerPreprocessor(function (option) {\r\n  var graphicOption = option.graphic; // Convert\r\n  // {graphic: [{left: 10, type: 'circle'}, ...]}\r\n  // or\r\n  // {graphic: {left: 10, type: 'circle'}}\r\n  // to\r\n  // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}\r\n\r\n  if (zrUtil.isArray(graphicOption)) {\r\n    if (!graphicOption[0] || !graphicOption[0].elements) {\r\n      option.graphic = [{\r\n        elements: graphicOption\r\n      }];\r\n    } else {\r\n      // Only one graphic instance can be instantiated. (We dont\r\n      // want that too many views are created in echarts._viewMap)\r\n      option.graphic = [option.graphic[0]];\r\n    }\r\n  } else if (graphicOption && !graphicOption.elements) {\r\n    option.graphic = [{\r\n      elements: [graphicOption]\r\n    }];\r\n  }\r\n}); // ------\r\n// Model\r\n// ------\r\n\r\nvar GraphicModel = echarts.extendComponentModel({\r\n  type: 'graphic',\r\n  defaultOption: {\r\n    // Extra properties for each elements:\r\n    //\r\n    // left/right/top/bottom: (like 12, '22%', 'center', default undefined)\r\n    //      If left/rigth is set, shape.x/shape.cx/position will not be used.\r\n    //      If top/bottom is set, shape.y/shape.cy/position will not be used.\r\n    //      This mechanism is useful when you want to position a group/element\r\n    //      against the right side or the center of this container.\r\n    //\r\n    // width/height: (can only be pixel value, default 0)\r\n    //      Only be used to specify contianer(group) size, if needed. And\r\n    //      can not be percentage value (like '33%'). See the reason in the\r\n    //      layout algorithm below.\r\n    //\r\n    // bounding: (enum: 'all' (default) | 'raw')\r\n    //      Specify how to calculate boundingRect when locating.\r\n    //      'all': Get uioned and transformed boundingRect\r\n    //          from both itself and its descendants.\r\n    //          This mode simplies confining a group of elements in the bounding\r\n    //          of their ancester container (e.g., using 'right: 0').\r\n    //      'raw': Only use the boundingRect of itself and before transformed.\r\n    //          This mode is similar to css behavior, which is useful when you\r\n    //          want an element to be able to overflow its container. (Consider\r\n    //          a rotated circle needs to be located in a corner.)\r\n    // info: custom info. enables user to mount some info on elements and use them\r\n    //      in event handlers. Update them only when user specified, otherwise, remain.\r\n    // Note: elements is always behind its ancestors in this elements array.\r\n    elements: [],\r\n    parentId: null\r\n  },\r\n\r\n  /**\r\n   * Save el options for the sake of the performance (only update modified graphics).\r\n   * The order is the same as those in option. (ancesters -> descendants)\r\n   *\r\n   * @private\r\n   * @type {Array.<Object>}\r\n   */\r\n  _elOptionsToUpdate: null,\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  mergeOption: function (option) {\r\n    // Prevent default merge to elements\r\n    var elements = this.option.elements;\r\n    this.option.elements = null;\r\n    GraphicModel.superApply(this, 'mergeOption', arguments);\r\n    this.option.elements = elements;\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  optionUpdated: function (newOption, isInit) {\r\n    var thisOption = this.option;\r\n    var newList = (isInit ? thisOption : newOption).elements;\r\n    var existList = thisOption.elements = isInit ? [] : thisOption.elements;\r\n    var flattenedList = [];\r\n\r\n    this._flatten(newList, flattenedList);\r\n\r\n    var mappingResult = modelUtil.mappingToExists(existList, flattenedList);\r\n    modelUtil.makeIdAndName(mappingResult); // Clear elOptionsToUpdate\r\n\r\n    var elOptionsToUpdate = this._elOptionsToUpdate = [];\r\n    zrUtil.each(mappingResult, function (resultItem, index) {\r\n      var newElOption = resultItem.option;\r\n\r\n      if (!newElOption) {\r\n        return;\r\n      }\r\n\r\n      elOptionsToUpdate.push(newElOption);\r\n      setKeyInfoToNewElOption(resultItem, newElOption);\r\n      mergeNewElOptionToExist(existList, index, newElOption);\r\n      setLayoutInfoToExist(existList[index], newElOption);\r\n    }, this); // Clean\r\n\r\n    for (var i = existList.length - 1; i >= 0; i--) {\r\n      if (existList[i] == null) {\r\n        existList.splice(i, 1);\r\n      } else {\r\n        // $action should be volatile, otherwise option gotten from\r\n        // `getOption` will contain unexpected $action.\r\n        delete existList[i].$action;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Convert\r\n   * [{\r\n   *  type: 'group',\r\n   *  id: 'xx',\r\n   *  children: [{type: 'circle'}, {type: 'polygon'}]\r\n   * }]\r\n   * to\r\n   * [\r\n   *  {type: 'group', id: 'xx'},\r\n   *  {type: 'circle', parentId: 'xx'},\r\n   *  {type: 'polygon', parentId: 'xx'}\r\n   * ]\r\n   *\r\n   * @private\r\n   * @param {Array.<Object>} optionList option list\r\n   * @param {Array.<Object>} result result of flatten\r\n   * @param {Object} parentOption parent option\r\n   */\r\n  _flatten: function (optionList, result, parentOption) {\r\n    zrUtil.each(optionList, function (option) {\r\n      if (!option) {\r\n        return;\r\n      }\r\n\r\n      if (parentOption) {\r\n        option.parentOption = parentOption;\r\n      }\r\n\r\n      result.push(option);\r\n      var children = option.children;\r\n\r\n      if (option.type === 'group' && children) {\r\n        this._flatten(children, result, option);\r\n      } // Deleting for JSON output, and for not affecting group creation.\r\n\r\n\r\n      delete option.children;\r\n    }, this);\r\n  },\r\n  // FIXME\r\n  // Pass to view using payload? setOption has a payload?\r\n  useElOptionsToUpdate: function () {\r\n    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.\r\n\r\n    this._elOptionsToUpdate = null;\r\n    return els;\r\n  }\r\n}); // -----\r\n// View\r\n// -----\r\n\r\necharts.extendComponentView({\r\n  type: 'graphic',\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  init: function (ecModel, api) {\r\n    /**\r\n     * @private\r\n     * @type {module:zrender/core/util.HashMap}\r\n     */\r\n    this._elMap = zrUtil.createHashMap();\r\n    /**\r\n     * @private\r\n     * @type {module:echarts/graphic/GraphicModel}\r\n     */\r\n\r\n    this._lastGraphicModel;\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  render: function (graphicModel, ecModel, api) {\r\n    // Having leveraged between use cases and algorithm complexity, a very\r\n    // simple layout mechanism is used:\r\n    // The size(width/height) can be determined by itself or its parent (not\r\n    // implemented yet), but can not by its children. (Top-down travel)\r\n    // The location(x/y) can be determined by the bounding rect of itself\r\n    // (can including its descendants or not) and the size of its parent.\r\n    // (Bottom-up travel)\r\n    // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,\r\n    // view will be reused.\r\n    if (graphicModel !== this._lastGraphicModel) {\r\n      this._clear();\r\n    }\r\n\r\n    this._lastGraphicModel = graphicModel;\r\n\r\n    this._updateElements(graphicModel);\r\n\r\n    this._relocate(graphicModel, api);\r\n  },\r\n\r\n  /**\r\n   * Update graphic elements.\r\n   *\r\n   * @private\r\n   * @param {Object} graphicModel graphic model\r\n   */\r\n  _updateElements: function (graphicModel) {\r\n    var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();\r\n\r\n    if (!elOptionsToUpdate) {\r\n      return;\r\n    }\r\n\r\n    var elMap = this._elMap;\r\n    var rootGroup = this.group; // Top-down tranverse to assign graphic settings to each elements.\r\n\r\n    zrUtil.each(elOptionsToUpdate, function (elOption) {\r\n      var $action = elOption.$action;\r\n      var id = elOption.id;\r\n      var existEl = elMap.get(id);\r\n      var parentId = elOption.parentId;\r\n      var targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;\r\n      var elOptionStyle = elOption.style;\r\n\r\n      if (elOption.type === 'text' && elOptionStyle) {\r\n        // In top/bottom mode, textVerticalAlign should not be used, which cause\r\n        // inaccurately locating.\r\n        if (elOption.hv && elOption.hv[1]) {\r\n          elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = null;\r\n        } // Compatible with previous setting: both support fill and textFill,\r\n        // stroke and textStroke.\r\n\r\n\r\n        !elOptionStyle.hasOwnProperty('textFill') && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);\r\n        !elOptionStyle.hasOwnProperty('textStroke') && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);\r\n      } // Remove unnecessary props to avoid potential problems.\r\n\r\n\r\n      var elOptionCleaned = getCleanedElOption(elOption); // For simple, do not support parent change, otherwise reorder is needed.\r\n\r\n      if (!$action || $action === 'merge') {\r\n        existEl ? existEl.attr(elOptionCleaned) : createEl(id, targetElParent, elOptionCleaned, elMap);\r\n      } else if ($action === 'replace') {\r\n        removeEl(existEl, elMap);\r\n        createEl(id, targetElParent, elOptionCleaned, elMap);\r\n      } else if ($action === 'remove') {\r\n        removeEl(existEl, elMap);\r\n      }\r\n\r\n      var el = elMap.get(id);\r\n\r\n      if (el) {\r\n        el.__ecGraphicWidthOption = elOption.width;\r\n        el.__ecGraphicHeightOption = elOption.height;\r\n        setEventData(el, graphicModel, elOption);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Locate graphic elements.\r\n   *\r\n   * @private\r\n   * @param {Object} graphicModel graphic model\r\n   * @param {module:echarts/ExtensionAPI} api extension API\r\n   */\r\n  _relocate: function (graphicModel, api) {\r\n    var elOptions = graphicModel.option.elements;\r\n    var rootGroup = this.group;\r\n    var elMap = this._elMap;\r\n    var apiWidth = api.getWidth();\r\n    var apiHeight = api.getHeight(); // Top-down to calculate percentage width/height of group\r\n\r\n    for (var i = 0; i < elOptions.length; i++) {\r\n      var elOption = elOptions[i];\r\n      var el = elMap.get(elOption.id);\r\n\r\n      if (!el || !el.isGroup) {\r\n        continue;\r\n      }\r\n\r\n      var parentEl = el.parent;\r\n      var isParentRoot = parentEl === rootGroup; // Like 'position:absolut' in css, default 0.\r\n\r\n      el.__ecGraphicWidth = parsePercent(el.__ecGraphicWidthOption, isParentRoot ? apiWidth : parentEl.__ecGraphicWidth) || 0;\r\n      el.__ecGraphicHeight = parsePercent(el.__ecGraphicHeightOption, isParentRoot ? apiHeight : parentEl.__ecGraphicHeight) || 0;\r\n    } // Bottom-up tranvese all elements (consider ec resize) to locate elements.\r\n\r\n\r\n    for (var i = elOptions.length - 1; i >= 0; i--) {\r\n      var elOption = elOptions[i];\r\n      var el = elMap.get(elOption.id);\r\n\r\n      if (!el) {\r\n        continue;\r\n      }\r\n\r\n      var parentEl = el.parent;\r\n      var containerInfo = parentEl === rootGroup ? {\r\n        width: apiWidth,\r\n        height: apiHeight\r\n      } : {\r\n        width: parentEl.__ecGraphicWidth,\r\n        height: parentEl.__ecGraphicHeight\r\n      }; // PENDING\r\n      // Currently, when `bounding: 'all'`, the union bounding rect of the group\r\n      // does not include the rect of [0, 0, group.width, group.height], which\r\n      // is probably weird for users. Should we make a break change for it?\r\n\r\n      layoutUtil.positionElement(el, elOption, containerInfo, null, {\r\n        hv: elOption.hv,\r\n        boundingMode: elOption.bounding\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Clear all elements.\r\n   *\r\n   * @private\r\n   */\r\n  _clear: function () {\r\n    var elMap = this._elMap;\r\n    elMap.each(function (el) {\r\n      removeEl(el, elMap);\r\n    });\r\n    this._elMap = zrUtil.createHashMap();\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  dispose: function () {\r\n    this._clear();\r\n  }\r\n});\r\n\r\nfunction createEl(id, targetElParent, elOption, elMap) {\r\n  var graphicType = elOption.type;\r\n  var Clz = _nonShapeGraphicElements.hasOwnProperty(graphicType) // Those graphic elements are not shapes. They should not be\r\n  // overwritten by users, so do them first.\r\n  ? _nonShapeGraphicElements[graphicType] : graphicUtil.getShapeClass(graphicType);\r\n  var el = new Clz(elOption);\r\n  targetElParent.add(el);\r\n  elMap.set(id, el);\r\n  el.__ecGraphicId = id;\r\n}\r\n\r\nfunction removeEl(existEl, elMap) {\r\n  var existElParent = existEl && existEl.parent;\r\n\r\n  if (existElParent) {\r\n    existEl.type === 'group' && existEl.traverse(function (el) {\r\n      removeEl(el, elMap);\r\n    });\r\n    elMap.removeKey(existEl.__ecGraphicId);\r\n    existElParent.remove(existEl);\r\n  }\r\n} // Remove unnecessary props to avoid potential problems.\r\n\r\n\r\nfunction getCleanedElOption(elOption) {\r\n  elOption = zrUtil.extend({}, elOption);\r\n  zrUtil.each(['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS), function (name) {\r\n    delete elOption[name];\r\n  });\r\n  return elOption;\r\n}\r\n\r\nfunction isSetLoc(obj, props) {\r\n  var isSet;\r\n  zrUtil.each(props, function (prop) {\r\n    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\r\n  });\r\n  return isSet;\r\n}\r\n\r\nfunction setKeyInfoToNewElOption(resultItem, newElOption) {\r\n  var existElOption = resultItem.exist; // Set id and type after id assigned.\r\n\r\n  newElOption.id = resultItem.keyInfo.id;\r\n  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified\r\n\r\n  if (newElOption.parentId == null) {\r\n    var newElParentOption = newElOption.parentOption;\r\n\r\n    if (newElParentOption) {\r\n      newElOption.parentId = newElParentOption.id;\r\n    } else if (existElOption) {\r\n      newElOption.parentId = existElOption.parentId;\r\n    }\r\n  } // Clear\r\n\r\n\r\n  newElOption.parentOption = null;\r\n}\r\n\r\nfunction mergeNewElOptionToExist(existList, index, newElOption) {\r\n  // Update existing options, for `getOption` feature.\r\n  var newElOptCopy = zrUtil.extend({}, newElOption);\r\n  var existElOption = existList[index];\r\n  var $action = newElOption.$action || 'merge';\r\n\r\n  if ($action === 'merge') {\r\n    if (existElOption) {\r\n      // We can ensure that newElOptCopy and existElOption are not\r\n      // the same object, so `merge` will not change newElOptCopy.\r\n      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.\r\n\r\n      layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {\r\n        ignoreSize: true\r\n      }); // Will be used in render.\r\n\r\n      layoutUtil.copyLayoutParams(newElOption, existElOption);\r\n    } else {\r\n      existList[index] = newElOptCopy;\r\n    }\r\n  } else if ($action === 'replace') {\r\n    existList[index] = newElOptCopy;\r\n  } else if ($action === 'remove') {\r\n    // null will be cleaned later.\r\n    existElOption && (existList[index] = null);\r\n  }\r\n}\r\n\r\nfunction setLayoutInfoToExist(existItem, newElOption) {\r\n  if (!existItem) {\r\n    return;\r\n  }\r\n\r\n  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.\r\n  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.\r\n  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.\r\n\r\n  if (existItem.type === 'group') {\r\n    existItem.width == null && (existItem.width = newElOption.width = 0);\r\n    existItem.height == null && (existItem.height = newElOption.height = 0);\r\n  }\r\n}\r\n\r\nfunction setEventData(el, graphicModel, elOption) {\r\n  var eventData = el.eventData; // Simple optimize for large amount of elements that no need event.\r\n\r\n  if (!el.silent && !el.ignore && !eventData) {\r\n    eventData = el.eventData = {\r\n      componentType: 'graphic',\r\n      componentIndex: graphicModel.componentIndex,\r\n      name: el.name\r\n    };\r\n  } // `elOption.info` enables user to mount some info on\r\n  // elements and use them in event handlers.\r\n\r\n\r\n  if (eventData) {\r\n    eventData.info = el.info;\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}