{"ast":null,"code":"module.exports = function (hljs) {\n  var SV_KEYWORDS = {\n    keyword: 'accept_on alias always always_comb always_ff always_latch and assert assign ' + 'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' + 'byte case casex casez cell chandle checker class clocking cmos config const ' + 'constraint context continue cover covergroup coverpoint cross deassign default ' + 'defparam design disable dist do edge else end endcase endchecker endclass ' + 'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' + 'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' + 'endtask enum event eventually expect export extends extern final first_match for ' + 'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' + 'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' + 'initial inout input inside instance int integer interconnect interface intersect ' + 'join join_any join_none large let liblist library local localparam logic longint ' + 'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' + 'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' + 'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' + 'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' + 'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' + 'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' + 'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' + 'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' + 'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' + 'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' + 'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' + 'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',\n    literal: 'null',\n    built_in: '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' + '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' + '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' + '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' + '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' + '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' + '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' + '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' + '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' + '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' + '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' + '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' + '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' + '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' + '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' + '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' + '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' + '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' + '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' + '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' + '$write $readmemb $readmemh $writememh $value$plusargs ' + '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' + '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' + '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' + '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' + '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' + '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' + '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' + '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'\n  };\n  return {\n    aliases: ['v', 'sv', 'svh'],\n    case_insensitive: false,\n    keywords: SV_KEYWORDS,\n    lexemes: /[\\w\\$]+/,\n    contains: [hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE, hljs.QUOTE_STRING_MODE, {\n      className: 'number',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [{\n        begin: '\\\\b((\\\\d+\\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'\n      }, {\n        begin: '\\\\B((\\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'\n      }, {\n        begin: '\\\\b([0-9_])+',\n        relevance: 0\n      }]\n    },\n    /* parameters to instances */\n    {\n      className: 'variable',\n      variants: [{\n        begin: '#\\\\((?!parameter).+\\\\)'\n      }, {\n        begin: '\\\\.\\\\w+',\n        relevance: 0\n      }]\n    }, {\n      className: 'meta',\n      begin: '`',\n      end: '$',\n      keywords: {\n        'meta-keyword': 'define __FILE__ ' + '__LINE__ begin_keywords celldefine default_nettype define ' + 'else elsif end_keywords endcelldefine endif ifdef ifndef ' + 'include line nounconnected_drive pragma resetall timescale ' + 'unconnected_drive undef undefineall'\n      },\n      relevance: 0\n    }]\n  }; // return\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/highlight.js/lib/languages/verilog.js"],"names":["module","exports","hljs","SV_KEYWORDS","keyword","literal","built_in","aliases","case_insensitive","keywords","lexemes","contains","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","QUOTE_STRING_MODE","className","BACKSLASH_ESCAPE","variants","begin","relevance","end"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,MAAIC,WAAW,GAAG;AAChBC,IAAAA,OAAO,EACL,iFACA,+EADA,GAEA,8EAFA,GAGA,iFAHA,GAIA,4EAJA,GAKA,gFALA,GAMA,iFANA,GAOA,mFAPA,GAQA,sFARA,GASA,kFATA,GAUA,mFAVA,GAWA,mFAXA,GAYA,mFAZA,GAaA,gFAbA,GAcA,oFAdA,GAeA,qFAfA,GAgBA,mFAhBA,GAiBA,mFAjBA,GAkBA,sFAlBA,GAmBA,mFAnBA,GAoBA,oFApBA,GAqBA,sFArBA,GAsBA,wFAtBA,GAuBA,oEAzBc;AA0BhBC,IAAAA,OAAO,EACL,MA3Bc;AA4BhBC,IAAAA,QAAQ,EACN,sFACA,4EADA,GAEA,mFAFA,GAGA,6EAHA,GAIA,mFAJA,GAKA,uEALA,GAMA,yEANA,GAOA,6EAPA,GAQA,8EARA,GASA,+EATA,GAUA,4EAVA,GAWA,6EAXA,GAYA,sEAZA,GAaA,6EAbA,GAcA,yEAdA,GAeA,qEAfA,GAgBA,2EAhBA,GAiBA,sEAjBA,GAkBA,0EAlBA,GAmBA,4EAnBA,GAoBA,wDApBA,GAqBA,uEArBA,GAsBA,4EAtBA,GAuBA,qEAvBA,GAwBA,qEAxBA,GAyBA,mEAzBA,GA0BA,uEA1BA,GA2BA,wEA3BA,GA4BA;AAzDc,GAAlB;AA2DA,SAAO;AACLC,IAAAA,OAAO,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,CADJ;AAELC,IAAAA,gBAAgB,EAAE,KAFb;AAGLC,IAAAA,QAAQ,EAAEN,WAHL;AAGkBO,IAAAA,OAAO,EAAE,SAH3B;AAILC,IAAAA,QAAQ,EAAE,CACRT,IAAI,CAACU,oBADG,EAERV,IAAI,CAACW,mBAFG,EAGRX,IAAI,CAACY,iBAHG,EAIR;AACEC,MAAAA,SAAS,EAAE,QADb;AAEEJ,MAAAA,QAAQ,EAAE,CAACT,IAAI,CAACc,gBAAN,CAFZ;AAGEC,MAAAA,QAAQ,EAAE,CACR;AAACC,QAAAA,KAAK,EAAE;AAAR,OADQ,EAER;AAACA,QAAAA,KAAK,EAAE;AAAR,OAFQ,EAGR;AAACA,QAAAA,KAAK,EAAE,cAAR;AAAwBC,QAAAA,SAAS,EAAE;AAAnC,OAHQ;AAHZ,KAJQ;AAaR;AACA;AACEJ,MAAAA,SAAS,EAAE,UADb;AAEEE,MAAAA,QAAQ,EAAE,CACR;AAACC,QAAAA,KAAK,EAAE;AAAR,OADQ,EAER;AAACA,QAAAA,KAAK,EAAE,SAAR;AAAmBC,QAAAA,SAAS,EAAE;AAA9B,OAFQ;AAFZ,KAdQ,EAqBR;AACEJ,MAAAA,SAAS,EAAE,MADb;AAEEG,MAAAA,KAAK,EAAE,GAFT;AAEcE,MAAAA,GAAG,EAAE,GAFnB;AAGEX,MAAAA,QAAQ,EAAE;AAAC,wBAAgB,qBACzB,4DADyB,GAEzB,2DAFyB,GAGzB,6DAHyB,GAIzB;AAJQ,OAHZ;AAQEU,MAAAA,SAAS,EAAE;AARb,KArBQ;AAJL,GAAP,CA5D8B,CAgG3B;AACJ,CAjGD","sourcesContent":["module.exports = function(hljs) {\r\n  var SV_KEYWORDS = {\r\n    keyword:\r\n      'accept_on alias always always_comb always_ff always_latch and assert assign ' +\r\n      'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' +\r\n      'byte case casex casez cell chandle checker class clocking cmos config const ' +\r\n      'constraint context continue cover covergroup coverpoint cross deassign default ' +\r\n      'defparam design disable dist do edge else end endcase endchecker endclass ' +\r\n      'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' +\r\n      'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' +\r\n      'endtask enum event eventually expect export extends extern final first_match for ' +\r\n      'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' +\r\n      'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' +\r\n      'initial inout input inside instance int integer interconnect interface intersect ' +\r\n      'join join_any join_none large let liblist library local localparam logic longint ' +\r\n      'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' +\r\n      'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' +\r\n      'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' +\r\n      'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' +\r\n      'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' +\r\n      'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' +\r\n      'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' +\r\n      'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' +\r\n      'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' +\r\n      'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' +\r\n      'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' +\r\n      'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',\r\n    literal:\r\n      'null',\r\n    built_in:\r\n      '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' +\r\n      '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' +\r\n      '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' +\r\n      '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' +\r\n      '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' +\r\n      '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' +\r\n      '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' +\r\n      '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' +\r\n      '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' +\r\n      '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' +\r\n      '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' +\r\n      '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' +\r\n      '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' +\r\n      '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' +\r\n      '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' +\r\n      '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' +\r\n      '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' +\r\n      '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' +\r\n      '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' +\r\n      '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' +\r\n      '$write $readmemb $readmemh $writememh $value$plusargs ' +\r\n      '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' +\r\n      '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' +\r\n      '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' +\r\n      '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' +\r\n      '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' +\r\n      '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' +\r\n      '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' +\r\n      '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'\r\n    };\r\n  return {\r\n    aliases: ['v', 'sv', 'svh'],\r\n    case_insensitive: false,\r\n    keywords: SV_KEYWORDS, lexemes: /[\\w\\$]+/,\r\n    contains: [\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.QUOTE_STRING_MODE,\r\n      {\r\n        className: 'number',\r\n        contains: [hljs.BACKSLASH_ESCAPE],\r\n        variants: [\r\n          {begin: '\\\\b((\\\\d+\\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},\r\n          {begin: '\\\\B((\\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},\r\n          {begin: '\\\\b([0-9_])+', relevance: 0}\r\n        ]\r\n      },\r\n      /* parameters to instances */\r\n      {\r\n        className: 'variable',\r\n        variants: [\r\n          {begin: '#\\\\((?!parameter).+\\\\)'},\r\n          {begin: '\\\\.\\\\w+', relevance: 0},\r\n        ]\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: '`', end: '$',\r\n        keywords: {'meta-keyword': 'define __FILE__ ' +\r\n          '__LINE__ begin_keywords celldefine default_nettype define ' +\r\n          'else elsif end_keywords endcelldefine endif ifdef ifndef ' +\r\n          'include line nounconnected_drive pragma resetall timescale ' +\r\n          'unconnected_drive undef undefineall'},\r\n        relevance: 0\r\n      }\r\n    ]\r\n  }; // return\r\n};"]},"metadata":{},"sourceType":"script"}