{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n\nfunction retrieveTargetInfo(payload, validPayloadTypes, seriesModel) {\n  if (payload && zrUtil.indexOf(validPayloadTypes, payload.type) >= 0) {\n    var root = seriesModel.getData().tree.root;\n    var targetNode = payload.targetNode;\n\n    if (typeof targetNode === 'string') {\n      targetNode = root.getNodeById(targetNode);\n    }\n\n    if (targetNode && root.contains(targetNode)) {\n      return {\n        node: targetNode\n      };\n    }\n\n    var targetNodeId = payload.targetNodeId;\n\n    if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {\n      return {\n        node: targetNode\n      };\n    }\n  }\n} // Not includes the given node at the last item.\n\n\nfunction getPathToRoot(node) {\n  var path = [];\n\n  while (node) {\n    node = node.parentNode;\n    node && path.push(node);\n  }\n\n  return path.reverse();\n}\n\nfunction aboveViewRoot(viewRoot, node) {\n  var viewPath = getPathToRoot(viewRoot);\n  return zrUtil.indexOf(viewPath, node) >= 0;\n} // From root to the input node (the input node will be included).\n\n\nfunction wrapTreePathInfo(node, seriesModel) {\n  var treePathInfo = [];\n\n  while (node) {\n    var nodeDataIndex = node.dataIndex;\n    treePathInfo.push({\n      name: node.name,\n      dataIndex: nodeDataIndex,\n      value: seriesModel.getRawValue(nodeDataIndex)\n    });\n    node = node.parentNode;\n  }\n\n  treePathInfo.reverse();\n  return treePathInfo;\n}\n\nexports.retrieveTargetInfo = retrieveTargetInfo;\nexports.getPathToRoot = getPathToRoot;\nexports.aboveViewRoot = aboveViewRoot;\nexports.wrapTreePathInfo = wrapTreePathInfo;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/helper/treeHelper.js"],"names":["zrUtil","require","retrieveTargetInfo","payload","validPayloadTypes","seriesModel","indexOf","type","root","getData","tree","targetNode","getNodeById","contains","node","targetNodeId","getPathToRoot","path","parentNode","push","reverse","aboveViewRoot","viewRoot","viewPath","wrapTreePathInfo","treePathInfo","nodeDataIndex","dataIndex","name","value","getRawValue","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,iBAArC,EAAwDC,WAAxD,EAAqE;AACnE,MAAIF,OAAO,IAAIH,MAAM,CAACM,OAAP,CAAeF,iBAAf,EAAkCD,OAAO,CAACI,IAA1C,KAAmD,CAAlE,EAAqE;AACnE,QAAIC,IAAI,GAAGH,WAAW,CAACI,OAAZ,GAAsBC,IAAtB,CAA2BF,IAAtC;AACA,QAAIG,UAAU,GAAGR,OAAO,CAACQ,UAAzB;;AAEA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,MAAAA,UAAU,GAAGH,IAAI,CAACI,WAAL,CAAiBD,UAAjB,CAAb;AACD;;AAED,QAAIA,UAAU,IAAIH,IAAI,CAACK,QAAL,CAAcF,UAAd,CAAlB,EAA6C;AAC3C,aAAO;AACLG,QAAAA,IAAI,EAAEH;AADD,OAAP;AAGD;;AAED,QAAII,YAAY,GAAGZ,OAAO,CAACY,YAA3B;;AAEA,QAAIA,YAAY,IAAI,IAAhB,KAAyBJ,UAAU,GAAGH,IAAI,CAACI,WAAL,CAAiBG,YAAjB,CAAtC,CAAJ,EAA2E;AACzE,aAAO;AACLD,QAAAA,IAAI,EAAEH;AADD,OAAP;AAGD;AACF;AACF,C,CAAC;;;AAGF,SAASK,aAAT,CAAuBF,IAAvB,EAA6B;AAC3B,MAAIG,IAAI,GAAG,EAAX;;AAEA,SAAOH,IAAP,EAAa;AACXA,IAAAA,IAAI,GAAGA,IAAI,CAACI,UAAZ;AACAJ,IAAAA,IAAI,IAAIG,IAAI,CAACE,IAAL,CAAUL,IAAV,CAAR;AACD;;AAED,SAAOG,IAAI,CAACG,OAAL,EAAP;AACD;;AAED,SAASC,aAAT,CAAuBC,QAAvB,EAAiCR,IAAjC,EAAuC;AACrC,MAAIS,QAAQ,GAAGP,aAAa,CAACM,QAAD,CAA5B;AACA,SAAOtB,MAAM,CAACM,OAAP,CAAeiB,QAAf,EAAyBT,IAAzB,KAAkC,CAAzC;AACD,C,CAAC;;;AAGF,SAASU,gBAAT,CAA0BV,IAA1B,EAAgCT,WAAhC,EAA6C;AAC3C,MAAIoB,YAAY,GAAG,EAAnB;;AAEA,SAAOX,IAAP,EAAa;AACX,QAAIY,aAAa,GAAGZ,IAAI,CAACa,SAAzB;AACAF,IAAAA,YAAY,CAACN,IAAb,CAAkB;AAChBS,MAAAA,IAAI,EAAEd,IAAI,CAACc,IADK;AAEhBD,MAAAA,SAAS,EAAED,aAFK;AAGhBG,MAAAA,KAAK,EAAExB,WAAW,CAACyB,WAAZ,CAAwBJ,aAAxB;AAHS,KAAlB;AAKAZ,IAAAA,IAAI,GAAGA,IAAI,CAACI,UAAZ;AACD;;AAEDO,EAAAA,YAAY,CAACL,OAAb;AACA,SAAOK,YAAP;AACD;;AAEDM,OAAO,CAAC7B,kBAAR,GAA6BA,kBAA7B;AACA6B,OAAO,CAACf,aAAR,GAAwBA,aAAxB;AACAe,OAAO,CAACV,aAAR,GAAwBA,aAAxB;AACAU,OAAO,CAACP,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nfunction retrieveTargetInfo(payload, validPayloadTypes, seriesModel) {\r\n  if (payload && zrUtil.indexOf(validPayloadTypes, payload.type) >= 0) {\r\n    var root = seriesModel.getData().tree.root;\r\n    var targetNode = payload.targetNode;\r\n\r\n    if (typeof targetNode === 'string') {\r\n      targetNode = root.getNodeById(targetNode);\r\n    }\r\n\r\n    if (targetNode && root.contains(targetNode)) {\r\n      return {\r\n        node: targetNode\r\n      };\r\n    }\r\n\r\n    var targetNodeId = payload.targetNodeId;\r\n\r\n    if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {\r\n      return {\r\n        node: targetNode\r\n      };\r\n    }\r\n  }\r\n} // Not includes the given node at the last item.\r\n\r\n\r\nfunction getPathToRoot(node) {\r\n  var path = [];\r\n\r\n  while (node) {\r\n    node = node.parentNode;\r\n    node && path.push(node);\r\n  }\r\n\r\n  return path.reverse();\r\n}\r\n\r\nfunction aboveViewRoot(viewRoot, node) {\r\n  var viewPath = getPathToRoot(viewRoot);\r\n  return zrUtil.indexOf(viewPath, node) >= 0;\r\n} // From root to the input node (the input node will be included).\r\n\r\n\r\nfunction wrapTreePathInfo(node, seriesModel) {\r\n  var treePathInfo = [];\r\n\r\n  while (node) {\r\n    var nodeDataIndex = node.dataIndex;\r\n    treePathInfo.push({\r\n      name: node.name,\r\n      dataIndex: nodeDataIndex,\r\n      value: seriesModel.getRawValue(nodeDataIndex)\r\n    });\r\n    node = node.parentNode;\r\n  }\r\n\r\n  treePathInfo.reverse();\r\n  return treePathInfo;\r\n}\r\n\r\nexports.retrieveTargetInfo = retrieveTargetInfo;\r\nexports.getPathToRoot = getPathToRoot;\r\nexports.aboveViewRoot = aboveViewRoot;\r\nexports.wrapTreePathInfo = wrapTreePathInfo;"]},"metadata":{},"sourceType":"script"}