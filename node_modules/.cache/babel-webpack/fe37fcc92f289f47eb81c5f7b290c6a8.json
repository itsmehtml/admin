{"ast":null,"code":"module.exports = function (hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    aliases: ['ml'],\n    keywords: {\n      keyword: 'and as assert asr begin class constraint do done downto else end ' + 'exception external for fun function functor if in include ' + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' + 'mod module mutable new object of open! open or private rec sig struct ' + 'then to try type val! val virtual when while with ' +\n      /* camlp4 */\n      'parser value',\n      built_in:\n      /* built-in types */\n      'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n      /* (some) types in Pervasives */\n      'in_channel out_channel ref',\n      literal: 'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [{\n      className: 'literal',\n      begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n      relevance: 0\n    }, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)', {\n      contains: ['self']\n    }), {\n      /* type variable */\n      className: 'symbol',\n      begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n      /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n\n    }, {\n      /* polymorphic variant */\n      className: 'type',\n      begin: '`[A-Z][\\\\w\\']*'\n    }, {\n      /* module or constructor */\n      className: 'type',\n      begin: '\\\\b[A-Z][\\\\w\\']*',\n      relevance: 0\n    }, {\n      /* don't color identifiers, but safely catch all identifiers with '*/\n      begin: '[a-z_]\\\\w*\\'[\\\\w\\']*',\n      relevance: 0\n    }, hljs.inherit(hljs.APOS_STRING_MODE, {\n      className: 'string',\n      relevance: 0\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    }), {\n      className: 'number',\n      begin: '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' + '0[oO][0-7_]+[Lln]?|' + '0[bB][01_]+[Lln]?|' + '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n      relevance: 0\n    }, {\n      begin: /[-=]>/ // relevance booster\n\n    }]\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/highlight.js/lib/languages/ocaml.js"],"names":["module","exports","hljs","aliases","keywords","keyword","built_in","literal","illegal","lexemes","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B;AACA,SAAO;AACLC,IAAAA,OAAO,EAAE,CAAC,IAAD,CADJ;AAELC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EACL,sEACA,4DADA,GAEA,sFAFA,GAGA,wEAHA,GAIA,oDAJA;AAKA;AACA,oBARM;AASRC,MAAAA,QAAQ;AACN;AACA;AACA;AACA,kCAbM;AAcRC,MAAAA,OAAO,EACL;AAfM,KAFL;AAmBLC,IAAAA,OAAO,EAAE,SAnBJ;AAoBLC,IAAAA,OAAO,EAAE,cApBJ;AAqBLC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,SAAS,EAAE,SADb;AAEEC,MAAAA,KAAK,EAAE,wBAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADQ,EAMRX,IAAI,CAACY,OAAL,CACE,QADF,EAEE,QAFF,EAGE;AACEJ,MAAAA,QAAQ,EAAE,CAAC,MAAD;AADZ,KAHF,CANQ,EAaR;AAAE;AACAC,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EAAE;AACP;;AAHF,KAbQ,EAkBR;AAAE;AACAD,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE;AAFT,KAlBQ,EAsBR;AAAE;AACAD,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE,kBAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAtBQ,EA2BR;AAAE;AACAD,MAAAA,KAAK,EAAE,sBADT;AACiCC,MAAAA,SAAS,EAAE;AAD5C,KA3BQ,EA8BRX,IAAI,CAACa,OAAL,CAAab,IAAI,CAACc,gBAAlB,EAAoC;AAACL,MAAAA,SAAS,EAAE,QAAZ;AAAsBE,MAAAA,SAAS,EAAE;AAAjC,KAApC,CA9BQ,EA+BRX,IAAI,CAACa,OAAL,CAAab,IAAI,CAACe,iBAAlB,EAAqC;AAACT,MAAAA,OAAO,EAAE;AAAV,KAArC,CA/BQ,EAgCR;AACEG,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EACH,kCACA,qBADA,GAEA,oBAFA,GAGA,wDANJ;AAOEC,MAAAA,SAAS,EAAE;AAPb,KAhCQ,EAyCR;AACED,MAAAA,KAAK,EAAE,OADT,CACiB;;AADjB,KAzCQ;AArBL,GAAP;AAmED,CArED","sourcesContent":["module.exports = function(hljs) {\r\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\r\n  return {\r\n    aliases: ['ml'],\r\n    keywords: {\r\n      keyword:\r\n        'and as assert asr begin class constraint do done downto else end ' +\r\n        'exception external for fun function functor if in include ' +\r\n        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +\r\n        'mod module mutable new object of open! open or private rec sig struct ' +\r\n        'then to try type val! val virtual when while with ' +\r\n        /* camlp4 */\r\n        'parser value',\r\n      built_in:\r\n        /* built-in types */\r\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\r\n        /* (some) types in Pervasives */\r\n        'in_channel out_channel ref',\r\n      literal:\r\n        'true false'\r\n    },\r\n    illegal: /\\/\\/|>>/,\r\n    lexemes: '[a-z_]\\\\w*!?',\r\n    contains: [\r\n      {\r\n        className: 'literal',\r\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\r\n        relevance: 0\r\n      },\r\n      hljs.COMMENT(\r\n        '\\\\(\\\\*',\r\n        '\\\\*\\\\)',\r\n        {\r\n          contains: ['self']\r\n        }\r\n      ),\r\n      { /* type variable */\r\n        className: 'symbol',\r\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\r\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\r\n      },\r\n      { /* polymorphic variant */\r\n        className: 'type',\r\n        begin: '`[A-Z][\\\\w\\']*'\r\n      },\r\n      { /* module or constructor */\r\n        className: 'type',\r\n        begin: '\\\\b[A-Z][\\\\w\\']*',\r\n        relevance: 0\r\n      },\r\n      { /* don't color identifiers, but safely catch all identifiers with '*/\r\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*', relevance: 0\r\n      },\r\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\r\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\r\n      {\r\n        className: 'number',\r\n        begin:\r\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\r\n          '0[oO][0-7_]+[Lln]?|' +\r\n          '0[bB][01_]+[Lln]?|' +\r\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: /[-=]>/ // relevance booster\r\n      }\r\n    ]\r\n  }\r\n};"]},"metadata":{},"sourceType":"script"}