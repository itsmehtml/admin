{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar _dataStackHelper = require(\"../../data/helper/dataStackHelper\");\n\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nvar indexOf = zrUtil.indexOf;\n\nfunction hasXOrY(item) {\n  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\n}\n\nfunction hasXAndY(item) {\n  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\n} // Make it simple, do not visit all stacked value to count precision.\n// function getPrecision(data, valueAxisDim, dataIndex) {\n//     var precision = -1;\n//     var stackedDim = data.mapDimension(valueAxisDim);\n//     do {\n//         precision = Math.max(\n//             numberUtil.getPrecision(data.get(stackedDim, dataIndex)),\n//             precision\n//         );\n//         var stackedOnSeries = data.getCalculationInfo('stackedOnSeries');\n//         if (stackedOnSeries) {\n//             var byValue = data.get(data.getCalculationInfo('stackedByDimension'), dataIndex);\n//             data = stackedOnSeries.getData();\n//             dataIndex = data.indexOf(data.getCalculationInfo('stackedByDimension'), byValue);\n//             stackedDim = data.getCalculationInfo('stackedDimension');\n//         }\n//         else {\n//             data = null;\n//         }\n//     } while (data);\n//     return precision;\n// }\n\n\nfunction markerTypeCalculatorWithExtent(mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {\n  var coordArr = [];\n  var stacked = isDimensionStacked(data, targetDataDim\n  /*, otherDataDim*/\n  );\n  var calcDataDim = stacked ? data.getCalculationInfo('stackResultDimension') : targetDataDim;\n  var value = numCalculate(data, calcDataDim, mlType);\n  var dataIndex = data.indicesOfNearest(calcDataDim, value)[0];\n  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);\n  coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex); // Make it simple, do not visit all stacked value to count precision.\n\n  var precision = numberUtil.getPrecision(data.get(targetDataDim, dataIndex));\n  precision = Math.min(precision, 20);\n\n  if (precision >= 0) {\n    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\n  }\n\n  return coordArr;\n}\n\nvar curry = zrUtil.curry; // TODO Specified percent\n\nvar markerTypeCalculator = {\n  /**\r\n   * @method\r\n   * @param {module:echarts/data/List} data\r\n   * @param {string} baseAxisDim\r\n   * @param {string} valueAxisDim\r\n   */\n  min: curry(markerTypeCalculatorWithExtent, 'min'),\n\n  /**\r\n   * @method\r\n   * @param {module:echarts/data/List} data\r\n   * @param {string} baseAxisDim\r\n   * @param {string} valueAxisDim\r\n   */\n  max: curry(markerTypeCalculatorWithExtent, 'max'),\n\n  /**\r\n   * @method\r\n   * @param {module:echarts/data/List} data\r\n   * @param {string} baseAxisDim\r\n   * @param {string} valueAxisDim\r\n   */\n  average: curry(markerTypeCalculatorWithExtent, 'average')\n};\n/**\r\n * Transform markPoint data item to format used in List by do the following\r\n * 1. Calculate statistic like `max`, `min`, `average`\r\n * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\r\n * @param  {module:echarts/model/Series} seriesModel\r\n * @param  {module:echarts/coord/*} [coordSys]\r\n * @param  {Object} item\r\n * @return {Object}\r\n */\n\nfunction dataTransform(seriesModel, item) {\n  var data = seriesModel.getData();\n  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly\n  // 2. If `coord` is not a data array. Which uses `xAxis`,\n  // `yAxis` to specify the coord on each dimension\n  // parseFloat first because item.x and item.y can be percent string like '20%'\n\n  if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {\n    var dims = coordSys.dimensions;\n    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option\n    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\n\n    item = zrUtil.clone(item);\n\n    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {\n      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\n      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\n      item.coord = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex); // Force to use the value of calculated value.\n\n      item.value = item.coord[targetCoordIndex];\n    } else {\n      // FIXME Only has one of xAxis and yAxis.\n      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average\n\n      for (var i = 0; i < 2; i++) {\n        if (markerTypeCalculator[coord[i]]) {\n          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);\n        }\n      }\n\n      item.coord = coord;\n    }\n  }\n\n  return item;\n}\n\nfunction getAxisInfo(item, data, coordSys, seriesModel) {\n  var ret = {};\n\n  if (item.valueIndex != null || item.valueDim != null) {\n    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;\n    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));\n    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n  } else {\n    ret.baseAxis = seriesModel.getBaseAxis();\n    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);\n  }\n\n  return ret;\n}\n\nfunction dataDimToCoordDim(seriesModel, dataDim) {\n  var data = seriesModel.getData();\n  var dimensions = data.dimensions;\n  dataDim = data.getDimension(dataDim);\n\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimItem = data.getDimensionInfo(dimensions[i]);\n\n    if (dimItem.name === dataDim) {\n      return dimItem.coordDim;\n    }\n  }\n}\n/**\r\n * Filter data which is out of coordinateSystem range\r\n * [dataFilter description]\r\n * @param  {module:echarts/coord/*} [coordSys]\r\n * @param  {Object} item\r\n * @return {boolean}\r\n */\n\n\nfunction dataFilter(coordSys, item) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;\n}\n\nfunction dimValueGetter(item, dimName, dataIndex, dimIndex) {\n  // x, y, radius, angle\n  if (dimIndex < 2) {\n    return item.coord && item.coord[dimIndex];\n  }\n\n  return item.value;\n}\n\nfunction numCalculate(data, valueDataDim, type) {\n  if (type === 'average') {\n    var sum = 0;\n    var count = 0;\n    data.each(valueDataDim, function (val, idx) {\n      if (!isNaN(val)) {\n        sum += val;\n        count++;\n      }\n    });\n    return sum / count;\n  } else if (type === 'median') {\n    return data.getMedian(valueDataDim);\n  } else {\n    // max & min\n    return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];\n  }\n}\n\nexports.dataTransform = dataTransform;\nexports.getAxisInfo = getAxisInfo;\nexports.dataFilter = dataFilter;\nexports.dimValueGetter = dimValueGetter;\nexports.numCalculate = numCalculate;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/component/marker/markerHelper.js"],"names":["zrUtil","require","numberUtil","_dataStackHelper","isDimensionStacked","indexOf","hasXOrY","item","isNaN","parseFloat","x","y","hasXAndY","markerTypeCalculatorWithExtent","mlType","data","otherDataDim","targetDataDim","otherCoordIndex","targetCoordIndex","coordArr","stacked","calcDataDim","getCalculationInfo","value","numCalculate","dataIndex","indicesOfNearest","get","precision","getPrecision","Math","min","toFixed","curry","markerTypeCalculator","max","average","dataTransform","seriesModel","getData","coordSys","coordinateSystem","isArray","coord","dims","dimensions","axisInfo","getAxisInfo","clone","type","baseAxis","valueAxis","dim","baseDataDim","valueDataDim","xAxis","radiusAxis","yAxis","angleAxis","i","mapDimension","ret","valueIndex","valueDim","getDimension","getAxis","dataDimToCoordDim","getOtherAxis","getBaseAxis","dataDim","length","dimItem","getDimensionInfo","name","coordDim","dataFilter","containData","dimValueGetter","dimName","dimIndex","sum","count","each","val","idx","getMedian","getDataExtent","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\nvar numberUtil = require(\"../../util/number\");\r\n\r\nvar _dataStackHelper = require(\"../../data/helper/dataStackHelper\");\r\n\r\nvar isDimensionStacked = _dataStackHelper.isDimensionStacked;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar indexOf = zrUtil.indexOf;\r\n\r\nfunction hasXOrY(item) {\r\n  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\r\n}\r\n\r\nfunction hasXAndY(item) {\r\n  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\r\n} // Make it simple, do not visit all stacked value to count precision.\r\n// function getPrecision(data, valueAxisDim, dataIndex) {\r\n//     var precision = -1;\r\n//     var stackedDim = data.mapDimension(valueAxisDim);\r\n//     do {\r\n//         precision = Math.max(\r\n//             numberUtil.getPrecision(data.get(stackedDim, dataIndex)),\r\n//             precision\r\n//         );\r\n//         var stackedOnSeries = data.getCalculationInfo('stackedOnSeries');\r\n//         if (stackedOnSeries) {\r\n//             var byValue = data.get(data.getCalculationInfo('stackedByDimension'), dataIndex);\r\n//             data = stackedOnSeries.getData();\r\n//             dataIndex = data.indexOf(data.getCalculationInfo('stackedByDimension'), byValue);\r\n//             stackedDim = data.getCalculationInfo('stackedDimension');\r\n//         }\r\n//         else {\r\n//             data = null;\r\n//         }\r\n//     } while (data);\r\n//     return precision;\r\n// }\r\n\r\n\r\nfunction markerTypeCalculatorWithExtent(mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {\r\n  var coordArr = [];\r\n  var stacked = isDimensionStacked(data, targetDataDim\r\n  /*, otherDataDim*/\r\n  );\r\n  var calcDataDim = stacked ? data.getCalculationInfo('stackResultDimension') : targetDataDim;\r\n  var value = numCalculate(data, calcDataDim, mlType);\r\n  var dataIndex = data.indicesOfNearest(calcDataDim, value)[0];\r\n  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);\r\n  coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex); // Make it simple, do not visit all stacked value to count precision.\r\n\r\n  var precision = numberUtil.getPrecision(data.get(targetDataDim, dataIndex));\r\n  precision = Math.min(precision, 20);\r\n\r\n  if (precision >= 0) {\r\n    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\r\n  }\r\n\r\n  return coordArr;\r\n}\r\n\r\nvar curry = zrUtil.curry; // TODO Specified percent\r\n\r\nvar markerTypeCalculator = {\r\n  /**\r\n   * @method\r\n   * @param {module:echarts/data/List} data\r\n   * @param {string} baseAxisDim\r\n   * @param {string} valueAxisDim\r\n   */\r\n  min: curry(markerTypeCalculatorWithExtent, 'min'),\r\n\r\n  /**\r\n   * @method\r\n   * @param {module:echarts/data/List} data\r\n   * @param {string} baseAxisDim\r\n   * @param {string} valueAxisDim\r\n   */\r\n  max: curry(markerTypeCalculatorWithExtent, 'max'),\r\n\r\n  /**\r\n   * @method\r\n   * @param {module:echarts/data/List} data\r\n   * @param {string} baseAxisDim\r\n   * @param {string} valueAxisDim\r\n   */\r\n  average: curry(markerTypeCalculatorWithExtent, 'average')\r\n};\r\n/**\r\n * Transform markPoint data item to format used in List by do the following\r\n * 1. Calculate statistic like `max`, `min`, `average`\r\n * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\r\n * @param  {module:echarts/model/Series} seriesModel\r\n * @param  {module:echarts/coord/*} [coordSys]\r\n * @param  {Object} item\r\n * @return {Object}\r\n */\r\n\r\nfunction dataTransform(seriesModel, item) {\r\n  var data = seriesModel.getData();\r\n  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly\r\n  // 2. If `coord` is not a data array. Which uses `xAxis`,\r\n  // `yAxis` to specify the coord on each dimension\r\n  // parseFloat first because item.x and item.y can be percent string like '20%'\r\n\r\n  if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {\r\n    var dims = coordSys.dimensions;\r\n    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option\r\n    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\r\n\r\n    item = zrUtil.clone(item);\r\n\r\n    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {\r\n      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\r\n      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\r\n      item.coord = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex); // Force to use the value of calculated value.\r\n\r\n      item.value = item.coord[targetCoordIndex];\r\n    } else {\r\n      // FIXME Only has one of xAxis and yAxis.\r\n      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average\r\n\r\n      for (var i = 0; i < 2; i++) {\r\n        if (markerTypeCalculator[coord[i]]) {\r\n          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);\r\n        }\r\n      }\r\n\r\n      item.coord = coord;\r\n    }\r\n  }\r\n\r\n  return item;\r\n}\r\n\r\nfunction getAxisInfo(item, data, coordSys, seriesModel) {\r\n  var ret = {};\r\n\r\n  if (item.valueIndex != null || item.valueDim != null) {\r\n    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;\r\n    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));\r\n    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\r\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\r\n  } else {\r\n    ret.baseAxis = seriesModel.getBaseAxis();\r\n    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\r\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\r\n    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction dataDimToCoordDim(seriesModel, dataDim) {\r\n  var data = seriesModel.getData();\r\n  var dimensions = data.dimensions;\r\n  dataDim = data.getDimension(dataDim);\r\n\r\n  for (var i = 0; i < dimensions.length; i++) {\r\n    var dimItem = data.getDimensionInfo(dimensions[i]);\r\n\r\n    if (dimItem.name === dataDim) {\r\n      return dimItem.coordDim;\r\n    }\r\n  }\r\n}\r\n/**\r\n * Filter data which is out of coordinateSystem range\r\n * [dataFilter description]\r\n * @param  {module:echarts/coord/*} [coordSys]\r\n * @param  {Object} item\r\n * @return {boolean}\r\n */\r\n\r\n\r\nfunction dataFilter(coordSys, item) {\r\n  // Alwalys return true if there is no coordSys\r\n  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;\r\n}\r\n\r\nfunction dimValueGetter(item, dimName, dataIndex, dimIndex) {\r\n  // x, y, radius, angle\r\n  if (dimIndex < 2) {\r\n    return item.coord && item.coord[dimIndex];\r\n  }\r\n\r\n  return item.value;\r\n}\r\n\r\nfunction numCalculate(data, valueDataDim, type) {\r\n  if (type === 'average') {\r\n    var sum = 0;\r\n    var count = 0;\r\n    data.each(valueDataDim, function (val, idx) {\r\n      if (!isNaN(val)) {\r\n        sum += val;\r\n        count++;\r\n      }\r\n    });\r\n    return sum / count;\r\n  } else if (type === 'median') {\r\n    return data.getMedian(valueDataDim);\r\n  } else {\r\n    // max & min\r\n    return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];\r\n  }\r\n}\r\n\r\nexports.dataTransform = dataTransform;\r\nexports.getAxisInfo = getAxisInfo;\r\nexports.dataFilter = dataFilter;\r\nexports.dimValueGetter = dimValueGetter;\r\nexports.numCalculate = numCalculate;"]},"metadata":{},"sourceType":"script"}