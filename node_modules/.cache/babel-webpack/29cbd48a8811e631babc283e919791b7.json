{"ast":null,"code":"var _vector = require(\"../../core/vector\");\n\nvar v2Distance = _vector.distance;\n/**\r\n * Catmull-Rom spline 插值折线\r\n * @module zrender/shape/util/smoothSpline\r\n * @author pissang (https://www.github.com/pissang)\r\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n *         errorrik (errorrik@gmail.com)\r\n */\n\n/**\r\n * @inner\r\n */\n\nfunction interpolate(p0, p1, p2, p3, t, t2, t3) {\n  var v0 = (p2 - p0) * 0.5;\n  var v1 = (p3 - p1) * 0.5;\n  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n/**\r\n * @alias module:zrender/shape/util/smoothSpline\r\n * @param {Array} points 线段顶点数组\r\n * @param {boolean} isLoop\r\n * @return {Array}\r\n */\n\n\nfunction _default(points, isLoop) {\n  var len = points.length;\n  var ret = [];\n  var distance = 0;\n\n  for (var i = 1; i < len; i++) {\n    distance += v2Distance(points[i - 1], points[i]);\n  }\n\n  var segs = distance / 2;\n  segs = segs < len ? len : segs;\n\n  for (var i = 0; i < segs; i++) {\n    var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n    var idx = Math.floor(pos);\n    var w = pos - idx;\n    var p0;\n    var p1 = points[idx % len];\n    var p2;\n    var p3;\n\n    if (!isLoop) {\n      p0 = points[idx === 0 ? idx : idx - 1];\n      p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n      p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n    } else {\n      p0 = points[(idx - 1 + len) % len];\n      p2 = points[(idx + 1) % len];\n      p3 = points[(idx + 2) % len];\n    }\n\n    var w2 = w * w;\n    var w3 = w * w2;\n    ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);\n  }\n\n  return ret;\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/zrender/lib/graphic/helper/smoothSpline.js"],"names":["_vector","require","v2Distance","distance","interpolate","p0","p1","p2","p3","t","t2","t3","v0","v1","_default","points","isLoop","len","length","ret","i","segs","pos","idx","Math","floor","w","w2","w3","push","module","exports"],"mappings":"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","sourcesContent":["var _vector = require(\"../../core/vector\");\r\n\r\nvar v2Distance = _vector.distance;\r\n\r\n/**\r\n * Catmull-Rom spline 插值折线\r\n * @module zrender/shape/util/smoothSpline\r\n * @author pissang (https://www.github.com/pissang)\r\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\r\n *         errorrik (errorrik@gmail.com)\r\n */\r\n\r\n/**\r\n * @inner\r\n */\r\nfunction interpolate(p0, p1, p2, p3, t, t2, t3) {\r\n  var v0 = (p2 - p0) * 0.5;\r\n  var v1 = (p3 - p1) * 0.5;\r\n  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;\r\n}\r\n/**\r\n * @alias module:zrender/shape/util/smoothSpline\r\n * @param {Array} points 线段顶点数组\r\n * @param {boolean} isLoop\r\n * @return {Array}\r\n */\r\n\r\n\r\nfunction _default(points, isLoop) {\r\n  var len = points.length;\r\n  var ret = [];\r\n  var distance = 0;\r\n\r\n  for (var i = 1; i < len; i++) {\r\n    distance += v2Distance(points[i - 1], points[i]);\r\n  }\r\n\r\n  var segs = distance / 2;\r\n  segs = segs < len ? len : segs;\r\n\r\n  for (var i = 0; i < segs; i++) {\r\n    var pos = i / (segs - 1) * (isLoop ? len : len - 1);\r\n    var idx = Math.floor(pos);\r\n    var w = pos - idx;\r\n    var p0;\r\n    var p1 = points[idx % len];\r\n    var p2;\r\n    var p3;\r\n\r\n    if (!isLoop) {\r\n      p0 = points[idx === 0 ? idx : idx - 1];\r\n      p2 = points[idx > len - 2 ? len - 1 : idx + 1];\r\n      p3 = points[idx > len - 3 ? len - 1 : idx + 2];\r\n    } else {\r\n      p0 = points[(idx - 1 + len) % len];\r\n      p2 = points[(idx + 1) % len];\r\n      p3 = points[(idx + 2) % len];\r\n    }\r\n\r\n    var w2 = w * w;\r\n    var w3 = w * w2;\r\n    ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}