{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar createListSimply = require(\"../helper/createListSimply\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _dimensionHelper = require(\"../../data/helper/dimensionHelper\");\n\nvar getDimensionTypeByAxis = _dimensionHelper.getDimensionTypeByAxis;\n\nvar _sourceHelper = require(\"../../data/helper/sourceHelper\");\n\nvar makeSeriesEncodeForAxisCoordSys = _sourceHelper.makeSeriesEncodeForAxisCoordSys;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nvar seriesModelMixin = {\n  /**\r\n   * @private\r\n   * @type {string}\r\n   */\n  _baseAxisDim: null,\n\n  /**\r\n   * @override\r\n   */\n  getInitialData: function getInitialData(option, ecModel) {\n    // When both types of xAxis and yAxis are 'value', layout is\n    // needed to be specified by user. Otherwise, layout can be\n    // judged by which axis is category.\n    var ordinalMeta;\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n    var xAxisType = xAxisModel.get('type');\n    var yAxisType = yAxisModel.get('type');\n    var addOrdinal; // FIXME\n    // Consider time axis.\n\n    if (xAxisType === 'category') {\n      option.layout = 'horizontal';\n      ordinalMeta = xAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else if (yAxisType === 'category') {\n      option.layout = 'vertical';\n      ordinalMeta = yAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else {\n      option.layout = option.layout || 'horizontal';\n    }\n\n    var coordDims = ['x', 'y'];\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\n    var axisModels = [xAxisModel, yAxisModel];\n    var baseAxisType = axisModels[baseAxisDimIndex].get('type');\n    var otherAxisType = axisModels[1 - baseAxisDimIndex].get('type');\n    var data = option.data; // ??? FIXME make a stage to perform data transfrom.\n    // MUST create a new data, consider setOption({}) again.\n\n    if (data && addOrdinal) {\n      var newOptionData = [];\n      zrUtil.each(data, function (item, index) {\n        var newItem;\n\n        if (item.value && zrUtil.isArray(item.value)) {\n          newItem = item.value.slice();\n          item.value.unshift(index);\n        } else if (zrUtil.isArray(item)) {\n          newItem = item.slice();\n          item.unshift(index);\n        } else {\n          newItem = item;\n        }\n\n        newOptionData.push(newItem);\n      });\n      option.data = newOptionData;\n    }\n\n    var defaultValueDimensions = this.defaultValueDimensions;\n    var coordDimensions = [{\n      name: baseAxisDim,\n      type: getDimensionTypeByAxis(baseAxisType),\n      ordinalMeta: ordinalMeta,\n      otherDims: {\n        tooltip: false,\n        itemName: 0\n      },\n      dimsDef: ['base']\n    }, {\n      name: otherAxisDim,\n      type: getDimensionTypeByAxis(otherAxisType),\n      dimsDef: defaultValueDimensions.slice()\n    }];\n    return createListSimply(this, {\n      coordDimensions: coordDimensions,\n      dimensionsCount: defaultValueDimensions.length + 1,\n      encodeDefaulter: zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordDimensions, this)\n    });\n  },\n\n  /**\r\n   * If horizontal, base axis is x, otherwise y.\r\n   * @override\r\n   */\n  getBaseAxis: function getBaseAxis() {\n    var dim = this._baseAxisDim;\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n  }\n};\nexports.seriesModelMixin = seriesModelMixin;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/helper/whiskerBoxCommon.js"],"names":["createListSimply","require","zrUtil","_dimensionHelper","getDimensionTypeByAxis","_sourceHelper","makeSeriesEncodeForAxisCoordSys","seriesModelMixin","_baseAxisDim","getInitialData","option","ecModel","ordinalMeta","xAxisModel","getComponent","get","yAxisModel","xAxisType","yAxisType","addOrdinal","layout","getOrdinalMeta","coordDims","baseAxisDimIndex","baseAxisDim","otherAxisDim","axisModels","baseAxisType","otherAxisType","data","newOptionData","each","item","index","newItem","value","isArray","slice","unshift","push","defaultValueDimensions","coordDimensions","name","type","otherDims","tooltip","itemName","dimsDef","dimensionsCount","length","encodeDefaulter","curry","getBaseAxis","dim","axis","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar createListSimply = require(\"../helper/createListSimply\");\r\n\r\nvar zrUtil = require(\"zrender/lib/core/util\");\r\n\r\nvar _dimensionHelper = require(\"../../data/helper/dimensionHelper\");\r\n\r\nvar getDimensionTypeByAxis = _dimensionHelper.getDimensionTypeByAxis;\r\n\r\nvar _sourceHelper = require(\"../../data/helper/sourceHelper\");\r\n\r\nvar makeSeriesEncodeForAxisCoordSys = _sourceHelper.makeSeriesEncodeForAxisCoordSys;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar seriesModelMixin = {\r\n  /**\r\n   * @private\r\n   * @type {string}\r\n   */\r\n  _baseAxisDim: null,\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  getInitialData: function (option, ecModel) {\r\n    // When both types of xAxis and yAxis are 'value', layout is\r\n    // needed to be specified by user. Otherwise, layout can be\r\n    // judged by which axis is category.\r\n    var ordinalMeta;\r\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\r\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\r\n    var xAxisType = xAxisModel.get('type');\r\n    var yAxisType = yAxisModel.get('type');\r\n    var addOrdinal; // FIXME\r\n    // Consider time axis.\r\n\r\n    if (xAxisType === 'category') {\r\n      option.layout = 'horizontal';\r\n      ordinalMeta = xAxisModel.getOrdinalMeta();\r\n      addOrdinal = true;\r\n    } else if (yAxisType === 'category') {\r\n      option.layout = 'vertical';\r\n      ordinalMeta = yAxisModel.getOrdinalMeta();\r\n      addOrdinal = true;\r\n    } else {\r\n      option.layout = option.layout || 'horizontal';\r\n    }\r\n\r\n    var coordDims = ['x', 'y'];\r\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\r\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\r\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\r\n    var axisModels = [xAxisModel, yAxisModel];\r\n    var baseAxisType = axisModels[baseAxisDimIndex].get('type');\r\n    var otherAxisType = axisModels[1 - baseAxisDimIndex].get('type');\r\n    var data = option.data; // ??? FIXME make a stage to perform data transfrom.\r\n    // MUST create a new data, consider setOption({}) again.\r\n\r\n    if (data && addOrdinal) {\r\n      var newOptionData = [];\r\n      zrUtil.each(data, function (item, index) {\r\n        var newItem;\r\n\r\n        if (item.value && zrUtil.isArray(item.value)) {\r\n          newItem = item.value.slice();\r\n          item.value.unshift(index);\r\n        } else if (zrUtil.isArray(item)) {\r\n          newItem = item.slice();\r\n          item.unshift(index);\r\n        } else {\r\n          newItem = item;\r\n        }\r\n\r\n        newOptionData.push(newItem);\r\n      });\r\n      option.data = newOptionData;\r\n    }\r\n\r\n    var defaultValueDimensions = this.defaultValueDimensions;\r\n    var coordDimensions = [{\r\n      name: baseAxisDim,\r\n      type: getDimensionTypeByAxis(baseAxisType),\r\n      ordinalMeta: ordinalMeta,\r\n      otherDims: {\r\n        tooltip: false,\r\n        itemName: 0\r\n      },\r\n      dimsDef: ['base']\r\n    }, {\r\n      name: otherAxisDim,\r\n      type: getDimensionTypeByAxis(otherAxisType),\r\n      dimsDef: defaultValueDimensions.slice()\r\n    }];\r\n    return createListSimply(this, {\r\n      coordDimensions: coordDimensions,\r\n      dimensionsCount: defaultValueDimensions.length + 1,\r\n      encodeDefaulter: zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordDimensions, this)\r\n    });\r\n  },\r\n\r\n  /**\r\n   * If horizontal, base axis is x, otherwise y.\r\n   * @override\r\n   */\r\n  getBaseAxis: function () {\r\n    var dim = this._baseAxisDim;\r\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\r\n  }\r\n};\r\nexports.seriesModelMixin = seriesModelMixin;"]},"metadata":{},"sourceType":"script"}