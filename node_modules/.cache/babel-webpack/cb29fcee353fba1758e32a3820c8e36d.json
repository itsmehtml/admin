{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\n\nvar AxisView = require(\"../axis/AxisView\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n\nvar CartesianAxisPointer = BaseAxisPointer.extend({\n  /**\r\n   * @override\r\n   */\n  makeElOption: function makeElOption(elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisPointerType = axisPointerModel.get('type');\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  },\n\n  /**\r\n   * @override\r\n   */\n  getHandleTransform: function getHandleTransform(value, axisModel, axisPointerModel) {\n    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n    return {\n      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  },\n\n  /**\r\n   * @override\r\n   */\n  updateHandleTransform: function updateHandleTransform(transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisExtent = axis.getGlobalExtent(true);\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var dimIndex = axis.dim === 'x' ? 0 : 1;\n    var currPosition = transform.position;\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.\n\n    var tooltipOptions = [{\n      verticalAlign: 'middle'\n    }, {\n      align: 'center'\n    }];\n    return {\n      position: currPosition,\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: tooltipOptions[dimIndex]\n    };\n  }\n});\n\nfunction getCartesian(grid, axis) {\n  var opt = {};\n  opt[axis.dim + 'AxisIndex'] = axis.index;\n  return grid.getCartesian(opt);\n}\n\nvar pointerShapeBuilder = {\n  line: function line(axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function shadow(axis, pixelValue, otherExtent) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))\n    };\n  }\n};\n\nfunction getAxisDimIndex(axis) {\n  return axis.dim === 'x' ? 0 : 1;\n}\n\nAxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\nvar _default = CartesianAxisPointer;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js"],"names":["BaseAxisPointer","require","viewHelper","cartesianAxisHelper","AxisView","CartesianAxisPointer","extend","makeElOption","elOption","value","axisModel","axisPointerModel","api","axis","grid","axisPointerType","get","otherExtent","getCartesian","getOtherAxis","getGlobalExtent","pixelValue","toGlobalCoord","dataToCoord","elStyle","buildElStyle","pointerOption","pointerShapeBuilder","style","graphicKey","type","pointer","layoutInfo","layout","model","buildCartesianSingleLabelElOption","getHandleTransform","labelInside","labelMargin","position","getTransformedPosition","rotation","labelDirection","Math","PI","updateHandleTransform","transform","delta","axisExtent","dimIndex","dim","currPosition","min","max","cursorOtherValue","cursorPoint","tooltipOptions","verticalAlign","align","tooltipOption","opt","index","line","targetShape","makeLineShape","getAxisDimIndex","subPixelOptimize","shape","shadow","bandWidth","getBandWidth","span","makeRectShape","registerAxisPointerClass","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\r\n\r\nvar viewHelper = require(\"./viewHelper\");\r\n\r\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\r\n\r\nvar AxisView = require(\"../axis/AxisView\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar CartesianAxisPointer = BaseAxisPointer.extend({\r\n  /**\r\n   * @override\r\n   */\r\n  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\r\n    var axis = axisModel.axis;\r\n    var grid = axis.grid;\r\n    var axisPointerType = axisPointerModel.get('type');\r\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\r\n    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\r\n\r\n    if (axisPointerType && axisPointerType !== 'none') {\r\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\r\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\r\n      pointerOption.style = elStyle;\r\n      elOption.graphicKey = pointerOption.type;\r\n      elOption.pointer = pointerOption;\r\n    }\r\n\r\n    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\r\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  getHandleTransform: function (value, axisModel, axisPointerModel) {\r\n    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\r\n      labelInside: false\r\n    });\r\n    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\r\n    return {\r\n      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\r\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\r\n    };\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\r\n    var axis = axisModel.axis;\r\n    var grid = axis.grid;\r\n    var axisExtent = axis.getGlobalExtent(true);\r\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\r\n    var dimIndex = axis.dim === 'x' ? 0 : 1;\r\n    var currPosition = transform.position;\r\n    currPosition[dimIndex] += delta[dimIndex];\r\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\r\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\r\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\r\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\r\n    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.\r\n\r\n    var tooltipOptions = [{\r\n      verticalAlign: 'middle'\r\n    }, {\r\n      align: 'center'\r\n    }];\r\n    return {\r\n      position: currPosition,\r\n      rotation: transform.rotation,\r\n      cursorPoint: cursorPoint,\r\n      tooltipOption: tooltipOptions[dimIndex]\r\n    };\r\n  }\r\n});\r\n\r\nfunction getCartesian(grid, axis) {\r\n  var opt = {};\r\n  opt[axis.dim + 'AxisIndex'] = axis.index;\r\n  return grid.getCartesian(opt);\r\n}\r\n\r\nvar pointerShapeBuilder = {\r\n  line: function (axis, pixelValue, otherExtent) {\r\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));\r\n    return {\r\n      type: 'Line',\r\n      subPixelOptimize: true,\r\n      shape: targetShape\r\n    };\r\n  },\r\n  shadow: function (axis, pixelValue, otherExtent) {\r\n    var bandWidth = Math.max(1, axis.getBandWidth());\r\n    var span = otherExtent[1] - otherExtent[0];\r\n    return {\r\n      type: 'Rect',\r\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))\r\n    };\r\n  }\r\n};\r\n\r\nfunction getAxisDimIndex(axis) {\r\n  return axis.dim === 'x' ? 0 : 1;\r\n}\r\n\r\nAxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\r\nvar _default = CartesianAxisPointer;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}