{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nvar _default = SeriesModel.extend({\n  type: 'series.tree',\n  layoutInfo: null,\n  // can support the position parameters 'left', 'top','right','bottom', 'width',\n  // 'height' in the setOption() with 'merge' mode normal.\n  layoutMode: 'box',\n\n  /**\r\n   * Init a tree data structure from data in option series\r\n   * @param  {Object} option  the object used to config echarts view\r\n   * @return {module:echarts/data/List} storage initial data\r\n   */\n  getInitialData: function getInitialData(option) {\n    //create an virtual root\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    var leaves = option.leaves || {};\n    var treeOption = {};\n    treeOption.leaves = leaves;\n    var tree = Tree.createTree(root, this, treeOption, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var leavesModel = node.getLeavesModel();\n\n        if (!node.children.length || !node.isExpand) {\n          model.parentModel = leavesModel;\n        }\n\n        return model;\n      });\n    }\n\n    var treeDepth = 0;\n    tree.eachNode('preorder', function (node) {\n      if (node.depth > treeDepth) {\n        treeDepth = node.depth;\n      }\n    });\n    var expandAndCollapse = option.expandAndCollapse;\n    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;\n    tree.root.eachNode('preorder', function (node) {\n      var item = node.hostTree.data.getRawDataItem(node.dataIndex); // Add item.collapsed != null, because users can collapse node original in the series.data.\n\n      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;\n    });\n    return tree.data;\n  },\n\n  /**\r\n   * Make the configuration 'orient' backward compatibly, with 'horizontal = LR', 'vertical = TB'.\r\n   * @returns {string} orient\r\n   */\n  getOrient: function getOrient() {\n    var orient = this.get('orient');\n\n    if (orient === 'horizontal') {\n      orient = 'LR';\n    } else if (orient === 'vertical') {\n      orient = 'TB';\n    }\n\n    return orient;\n  },\n  setZoom: function setZoom(zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function setCenter(center) {\n    this.option.center = center;\n  },\n\n  /**\r\n   * @override\r\n   * @param {number} dataIndex\r\n   */\n  formatTooltip: function formatTooltip(dataIndex) {\n    var tree = this.getData().tree;\n    var realRoot = tree.root.children[0];\n    var node = tree.getNodeByDataIndex(dataIndex);\n    var value = node.getValue();\n    var name = node.name;\n\n    while (node && node !== realRoot) {\n      name = node.parentNode.name + '.' + name;\n      node = node.parentNode;\n    }\n\n    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    // the position of the whole view\n    left: '12%',\n    top: '12%',\n    right: '12%',\n    bottom: '12%',\n    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'\n    layout: 'orthogonal',\n    // true | false | 'move' | 'scale', see module:component/helper/RoamController.\n    roam: false,\n    // Symbol size scale ratio in roam\n    nodeScaleRatio: 0.4,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // The orient of orthoginal layout, can be setted to 'LR', 'TB', 'RL', 'BT'.\n    // and the backward compatibility configuration 'horizontal = LR', 'vertical = TB'.\n    orient: 'LR',\n    symbol: 'emptyCircle',\n    symbolSize: 7,\n    expandAndCollapse: true,\n    initialTreeDepth: 2,\n    lineStyle: {\n      color: '#ccc',\n      width: 1.5,\n      curveness: 0.5\n    },\n    itemStyle: {\n      color: 'lightsteelblue',\n      borderColor: '#c23531',\n      borderWidth: 1.5\n    },\n    label: {\n      show: true,\n      color: '#555'\n    },\n    leaves: {\n      label: {\n        show: true\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 700,\n    animationDurationUpdate: 1000\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/tree/TreeSeries.js"],"names":["SeriesModel","require","Tree","_format","encodeHTML","_default","extend","type","layoutInfo","layoutMode","getInitialData","option","root","name","children","data","leaves","treeOption","tree","createTree","beforeLink","nodeData","wrapMethod","model","idx","node","getNodeByDataIndex","leavesModel","getLeavesModel","length","isExpand","parentModel","treeDepth","eachNode","depth","expandAndCollapse","expandTreeDepth","initialTreeDepth","item","hostTree","getRawDataItem","dataIndex","collapsed","getOrient","orient","get","setZoom","zoom","setCenter","center","formatTooltip","getData","realRoot","value","getValue","parentNode","isNaN","defaultOption","zlevel","z","coordinateSystem","left","top","right","bottom","layout","roam","nodeScaleRatio","symbol","symbolSize","lineStyle","color","width","curveness","itemStyle","borderColor","borderWidth","label","show","animationEasing","animationDuration","animationDurationUpdate","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar SeriesModel = require(\"../../model/Series\");\r\n\r\nvar Tree = require(\"../../data/Tree\");\r\n\r\nvar _format = require(\"../../util/format\");\r\n\r\nvar encodeHTML = _format.encodeHTML;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar _default = SeriesModel.extend({\r\n  type: 'series.tree',\r\n  layoutInfo: null,\r\n  // can support the position parameters 'left', 'top','right','bottom', 'width',\r\n  // 'height' in the setOption() with 'merge' mode normal.\r\n  layoutMode: 'box',\r\n\r\n  /**\r\n   * Init a tree data structure from data in option series\r\n   * @param  {Object} option  the object used to config echarts view\r\n   * @return {module:echarts/data/List} storage initial data\r\n   */\r\n  getInitialData: function (option) {\r\n    //create an virtual root\r\n    var root = {\r\n      name: option.name,\r\n      children: option.data\r\n    };\r\n    var leaves = option.leaves || {};\r\n    var treeOption = {};\r\n    treeOption.leaves = leaves;\r\n    var tree = Tree.createTree(root, this, treeOption, beforeLink);\r\n\r\n    function beforeLink(nodeData) {\r\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\r\n        var node = tree.getNodeByDataIndex(idx);\r\n        var leavesModel = node.getLeavesModel();\r\n\r\n        if (!node.children.length || !node.isExpand) {\r\n          model.parentModel = leavesModel;\r\n        }\r\n\r\n        return model;\r\n      });\r\n    }\r\n\r\n    var treeDepth = 0;\r\n    tree.eachNode('preorder', function (node) {\r\n      if (node.depth > treeDepth) {\r\n        treeDepth = node.depth;\r\n      }\r\n    });\r\n    var expandAndCollapse = option.expandAndCollapse;\r\n    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;\r\n    tree.root.eachNode('preorder', function (node) {\r\n      var item = node.hostTree.data.getRawDataItem(node.dataIndex); // Add item.collapsed != null, because users can collapse node original in the series.data.\r\n\r\n      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;\r\n    });\r\n    return tree.data;\r\n  },\r\n\r\n  /**\r\n   * Make the configuration 'orient' backward compatibly, with 'horizontal = LR', 'vertical = TB'.\r\n   * @returns {string} orient\r\n   */\r\n  getOrient: function () {\r\n    var orient = this.get('orient');\r\n\r\n    if (orient === 'horizontal') {\r\n      orient = 'LR';\r\n    } else if (orient === 'vertical') {\r\n      orient = 'TB';\r\n    }\r\n\r\n    return orient;\r\n  },\r\n  setZoom: function (zoom) {\r\n    this.option.zoom = zoom;\r\n  },\r\n  setCenter: function (center) {\r\n    this.option.center = center;\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   * @param {number} dataIndex\r\n   */\r\n  formatTooltip: function (dataIndex) {\r\n    var tree = this.getData().tree;\r\n    var realRoot = tree.root.children[0];\r\n    var node = tree.getNodeByDataIndex(dataIndex);\r\n    var value = node.getValue();\r\n    var name = node.name;\r\n\r\n    while (node && node !== realRoot) {\r\n      name = node.parentNode.name + '.' + name;\r\n      node = node.parentNode;\r\n    }\r\n\r\n    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));\r\n  },\r\n  defaultOption: {\r\n    zlevel: 0,\r\n    z: 2,\r\n    coordinateSystem: 'view',\r\n    // the position of the whole view\r\n    left: '12%',\r\n    top: '12%',\r\n    right: '12%',\r\n    bottom: '12%',\r\n    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'\r\n    layout: 'orthogonal',\r\n    // true | false | 'move' | 'scale', see module:component/helper/RoamController.\r\n    roam: false,\r\n    // Symbol size scale ratio in roam\r\n    nodeScaleRatio: 0.4,\r\n    // Default on center of graph\r\n    center: null,\r\n    zoom: 1,\r\n    // The orient of orthoginal layout, can be setted to 'LR', 'TB', 'RL', 'BT'.\r\n    // and the backward compatibility configuration 'horizontal = LR', 'vertical = TB'.\r\n    orient: 'LR',\r\n    symbol: 'emptyCircle',\r\n    symbolSize: 7,\r\n    expandAndCollapse: true,\r\n    initialTreeDepth: 2,\r\n    lineStyle: {\r\n      color: '#ccc',\r\n      width: 1.5,\r\n      curveness: 0.5\r\n    },\r\n    itemStyle: {\r\n      color: 'lightsteelblue',\r\n      borderColor: '#c23531',\r\n      borderWidth: 1.5\r\n    },\r\n    label: {\r\n      show: true,\r\n      color: '#555'\r\n    },\r\n    leaves: {\r\n      label: {\r\n        show: true\r\n      }\r\n    },\r\n    animationEasing: 'linear',\r\n    animationDuration: 700,\r\n    animationDurationUpdate: 1000\r\n  }\r\n});\r\n\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}