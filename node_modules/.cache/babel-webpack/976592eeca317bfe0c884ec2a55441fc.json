{"ast":null,"code":"/*!\r\n * Ladda\r\n * http://lab.hakim.se/ladda\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2018 Hakim El Hattab, http://hakim.se\r\n */\nimport { Spinner } from 'spin.js'; // All currently instantiated instances of Ladda\n\nvar ALL_INSTANCES = [];\n/**\r\n * Creates a new instance of Ladda which wraps the\r\n * target button element.\r\n *\r\n * @return An API object that can be used to control\r\n * the loading animation state.\r\n */\n\nexport function create(button) {\n  if (typeof button === 'undefined') {\n    console.warn(\"Ladda button target must be defined.\");\n    return;\n  } // The button must have the class \"ladda-button\"\n\n\n  if (!button.classList.contains('ladda-button')) {\n    button.classList.add('ladda-button');\n  } // Style is required, default to \"expand-right\"\n\n\n  if (!button.hasAttribute('data-style')) {\n    button.setAttribute('data-style', 'expand-right');\n  } // The text contents must be wrapped in a ladda-label\n  // element, create one if it doesn't already exist\n\n\n  if (!button.querySelector('.ladda-label')) {\n    var laddaLabel = document.createElement('span');\n    laddaLabel.className = 'ladda-label';\n    wrapContent(button, laddaLabel);\n  } // The spinner component\n\n\n  var spinner,\n      spinnerWrapper = button.querySelector('.ladda-spinner'); // Wrapper element for the spinner\n\n  if (!spinnerWrapper) {\n    spinnerWrapper = document.createElement('span');\n    spinnerWrapper.className = 'ladda-spinner';\n  }\n\n  button.appendChild(spinnerWrapper); // Timer used to delay starting/stopping\n\n  var timer;\n  var instance = {\n    /**\r\n     * Enter the loading state.\r\n     */\n    start: function start() {\n      // Create the spinner if it doesn't already exist\n      if (!spinner) {\n        spinner = createSpinner(button);\n      }\n\n      button.disabled = true;\n      button.setAttribute('data-loading', '');\n      clearTimeout(timer);\n      spinner.spin(spinnerWrapper);\n      this.setProgress(0);\n      return this; // chain\n    },\n\n    /**\r\n     * Enter the loading state, after a delay.\r\n     */\n    startAfter: function startAfter(delay) {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        instance.start();\n      }, delay);\n      return this; // chain\n    },\n\n    /**\r\n     * Exit the loading state.\r\n     */\n    stop: function stop() {\n      if (instance.isLoading()) {\n        button.disabled = false;\n        button.removeAttribute('data-loading');\n      } // Kill the animation after a delay to make sure it\n      // runs for the duration of the button transition\n\n\n      clearTimeout(timer);\n\n      if (spinner) {\n        timer = setTimeout(function () {\n          spinner.stop();\n        }, 1000);\n      }\n\n      return this; // chain\n    },\n\n    /**\r\n     * Toggle the loading state on/off.\r\n     */\n    toggle: function toggle() {\n      return this.isLoading() ? this.stop() : this.start();\n    },\n\n    /**\r\n     * Sets the width of the visual progress bar inside of\r\n     * this Ladda button\r\n     *\r\n     * @param {Number} progress in the range of 0-1\r\n     */\n    setProgress: function setProgress(progress) {\n      // Cap it\n      progress = Math.max(Math.min(progress, 1), 0);\n      var progressElement = button.querySelector('.ladda-progress'); // Remove the progress bar if we're at 0 progress\n\n      if (progress === 0 && progressElement && progressElement.parentNode) {\n        progressElement.parentNode.removeChild(progressElement);\n      } else {\n        if (!progressElement) {\n          progressElement = document.createElement('div');\n          progressElement.className = 'ladda-progress';\n          button.appendChild(progressElement);\n        }\n\n        progressElement.style.width = (progress || 0) * button.offsetWidth + 'px';\n      }\n    },\n    isLoading: function isLoading() {\n      return button.hasAttribute('data-loading');\n    },\n    remove: function remove() {\n      clearTimeout(timer);\n      button.disabled = false;\n      button.removeAttribute('data-loading');\n\n      if (spinner) {\n        spinner.stop();\n        spinner = null;\n      }\n\n      ALL_INSTANCES.splice(ALL_INSTANCES.indexOf(instance), 1);\n    }\n  };\n  ALL_INSTANCES.push(instance);\n  return instance;\n}\n/**\r\n * Binds the target buttons to automatically enter the\r\n * loading state when clicked.\r\n *\r\n * @param target Either an HTML element or a CSS selector.\r\n * @param options\r\n *          - timeout Number of milliseconds to wait before\r\n *            automatically cancelling the animation.\r\n *          - callback A function to be called with the Ladda\r\n *            instance when a target button is clicked.\r\n */\n\nexport function bind(target, options) {\n  var targets;\n\n  if (typeof target === 'string') {\n    targets = document.querySelectorAll(target);\n  } else if (typeof target === 'object') {\n    targets = [target];\n  } else {\n    throw new Error('target must be string or object');\n  }\n\n  options = options || {};\n\n  for (var i = 0; i < targets.length; i++) {\n    bindElement(targets[i], options);\n  }\n}\n/**\r\n * Stops ALL current loading animations.\r\n */\n\nexport function stopAll() {\n  for (var i = 0, len = ALL_INSTANCES.length; i < len; i++) {\n    ALL_INSTANCES[i].stop();\n  }\n}\n/**\r\n* Get the first ancestor node from an element, having a\r\n* certain type.\r\n*\r\n* @param elem An HTML element\r\n* @param type an HTML tag type (uppercased)\r\n*\r\n* @return An HTML element\r\n*/\n\nfunction getAncestorOfTagType(elem, type) {\n  while (elem.parentNode && elem.tagName !== type) {\n    elem = elem.parentNode;\n  }\n\n  return type === elem.tagName ? elem : undefined;\n}\n\nfunction createSpinner(button) {\n  var height = button.offsetHeight,\n      spinnerColor,\n      spinnerLines;\n\n  if (height === 0) {\n    // We may have an element that is not visible so\n    // we attempt to get the height in a different way\n    height = parseFloat(window.getComputedStyle(button).height);\n  } // If the button is tall we can afford some padding\n\n\n  if (height > 32) {\n    height *= 0.8;\n  } // Prefer an explicit height if one is defined\n\n\n  if (button.hasAttribute('data-spinner-size')) {\n    height = parseInt(button.getAttribute('data-spinner-size'), 10);\n  } // Allow buttons to specify the color of the spinner element\n\n\n  if (button.hasAttribute('data-spinner-color')) {\n    spinnerColor = button.getAttribute('data-spinner-color');\n  } // Allow buttons to specify the number of lines of the spinner\n\n\n  if (button.hasAttribute('data-spinner-lines')) {\n    spinnerLines = parseInt(button.getAttribute('data-spinner-lines'), 10);\n  }\n\n  var radius = height * 0.2,\n      length = radius * 0.6,\n      width = radius < 7 ? 2 : 3;\n  return new Spinner({\n    color: spinnerColor || '#fff',\n    lines: spinnerLines || 12,\n    radius: radius,\n    length: length,\n    width: width,\n    animation: 'ladda-spinner-line-fade',\n    zIndex: 'auto',\n    top: 'auto',\n    left: 'auto',\n    className: ''\n  });\n}\n\nfunction wrapContent(node, wrapper) {\n  var r = document.createRange();\n  r.selectNodeContents(node);\n  r.surroundContents(wrapper);\n  node.appendChild(wrapper);\n}\n\nfunction bindElement(element, options) {\n  if (typeof element.addEventListener !== 'function') {\n    return;\n  }\n\n  var instance = create(element);\n  var timeout = -1;\n  element.addEventListener('click', function () {\n    // If the button belongs to a form, make sure all the\n    // fields in that form are filled out\n    var valid = true;\n    var form = getAncestorOfTagType(element, 'FORM');\n\n    if (typeof form !== 'undefined' && !form.hasAttribute('novalidate')) {\n      // Modern form validation\n      if (typeof form.checkValidity === 'function') {\n        valid = form.checkValidity();\n      }\n    }\n\n    if (valid) {\n      // This is asynchronous to avoid an issue where disabling\n      // the button prevents forms from submitting\n      instance.startAfter(1); // Set a loading timeout if one is specified\n\n      if (typeof options.timeout === 'number') {\n        clearTimeout(timeout);\n        timeout = setTimeout(instance.stop, options.timeout);\n      } // Invoke callbacks\n\n\n      if (typeof options.callback === 'function') {\n        options.callback.apply(null, [instance]);\n      }\n    }\n  }, false);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/ladda/js/ladda.js"],"names":["Spinner","ALL_INSTANCES","create","button","console","warn","classList","contains","add","hasAttribute","setAttribute","querySelector","laddaLabel","document","createElement","className","wrapContent","spinner","spinnerWrapper","appendChild","timer","instance","start","createSpinner","disabled","clearTimeout","spin","setProgress","startAfter","delay","setTimeout","stop","isLoading","removeAttribute","toggle","progress","Math","max","min","progressElement","parentNode","removeChild","style","width","offsetWidth","remove","splice","indexOf","push","bind","target","options","targets","querySelectorAll","Error","i","length","bindElement","stopAll","len","getAncestorOfTagType","elem","type","tagName","undefined","height","offsetHeight","spinnerColor","spinnerLines","parseFloat","window","getComputedStyle","parseInt","getAttribute","radius","color","lines","animation","zIndex","top","left","node","wrapper","r","createRange","selectNodeContents","surroundContents","element","addEventListener","timeout","valid","form","checkValidity","callback","apply"],"mappings":"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","sourcesContent":["/*!\r\n * Ladda\r\n * http://lab.hakim.se/ladda\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2018 Hakim El Hattab, http://hakim.se\r\n */\r\n\r\n import {Spinner} from 'spin.js';\r\n\r\n// All currently instantiated instances of Ladda\r\nvar ALL_INSTANCES = [];\r\n\r\n/**\r\n * Creates a new instance of Ladda which wraps the\r\n * target button element.\r\n *\r\n * @return An API object that can be used to control\r\n * the loading animation state.\r\n */\r\nexport function create( button ) {\r\n\r\n\tif( typeof button === 'undefined' ) {\r\n\t\tconsole.warn( \"Ladda button target must be defined.\" );\r\n\t\treturn;\r\n\t}\r\n\r\n\t// The button must have the class \"ladda-button\"\r\n\tif ( !button.classList.contains('ladda-button') ) {\r\n\t\tbutton.classList.add( 'ladda-button' );\r\n\t}\r\n\r\n\t// Style is required, default to \"expand-right\"\r\n\tif( !button.hasAttribute( 'data-style' ) ) {\r\n\t\tbutton.setAttribute( 'data-style', 'expand-right' );\r\n\t}\r\n\r\n\t// The text contents must be wrapped in a ladda-label\r\n\t// element, create one if it doesn't already exist\r\n\tif( !button.querySelector( '.ladda-label' ) ) {\r\n\t\tvar laddaLabel = document.createElement( 'span' );\r\n\t\tladdaLabel.className = 'ladda-label';\r\n\t\twrapContent( button, laddaLabel );\r\n\t}\r\n\r\n\t// The spinner component\r\n\tvar spinner,\r\n\t\tspinnerWrapper = button.querySelector( '.ladda-spinner' );\r\n\r\n\t// Wrapper element for the spinner\r\n\tif( !spinnerWrapper ) {\r\n\t\tspinnerWrapper = document.createElement( 'span' );\r\n\t\tspinnerWrapper.className = 'ladda-spinner';\r\n\t}\r\n\r\n\tbutton.appendChild( spinnerWrapper );\r\n\r\n\t// Timer used to delay starting/stopping\r\n\tvar timer;\r\n\r\n\tvar instance = {\r\n\r\n\t\t/**\r\n\t\t * Enter the loading state.\r\n\t\t */\r\n\t\tstart: function() {\r\n\r\n\t\t\t// Create the spinner if it doesn't already exist\r\n\t\t\tif( !spinner ) {\r\n\t\t\t\tspinner = createSpinner( button );\r\n\t\t\t}\r\n\r\n\t\t\tbutton.disabled = true;\r\n\t\t\tbutton.setAttribute( 'data-loading', '' );\r\n\r\n\t\t\tclearTimeout( timer );\r\n\t\t\tspinner.spin( spinnerWrapper );\r\n\r\n\t\t\tthis.setProgress( 0 );\r\n\r\n\t\t\treturn this; // chain\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enter the loading state, after a delay.\r\n\t\t */\r\n\t\tstartAfter: function( delay ) {\r\n\r\n\t\t\tclearTimeout( timer );\r\n\t\t\ttimer = setTimeout( function() { instance.start(); }, delay );\r\n\r\n\t\t\treturn this; // chain\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Exit the loading state.\r\n\t\t */\r\n\t\tstop: function() {\r\n\r\n\t\t\tif (instance.isLoading()) {\r\n\t\t\t\tbutton.disabled = false;\r\n\t\t\t\tbutton.removeAttribute( 'data-loading' );\t\r\n\t\t\t}\r\n\r\n\t\t\t// Kill the animation after a delay to make sure it\r\n\t\t\t// runs for the duration of the button transition\r\n\t\t\tclearTimeout( timer );\r\n\r\n\t\t\tif( spinner ) {\r\n\t\t\t\ttimer = setTimeout( function() { spinner.stop(); }, 1000 );\r\n\t\t\t}\r\n\r\n\t\t\treturn this; // chain\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Toggle the loading state on/off.\r\n\t\t */\r\n\t\ttoggle: function() {\r\n\t\t\treturn this.isLoading() ? this.stop() : this.start();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the width of the visual progress bar inside of\r\n\t\t * this Ladda button\r\n\t\t *\r\n\t\t * @param {Number} progress in the range of 0-1\r\n\t\t */\r\n\t\tsetProgress: function( progress ) {\r\n\r\n\t\t\t// Cap it\r\n\t\t\tprogress = Math.max( Math.min( progress, 1 ), 0 );\r\n\r\n\t\t\tvar progressElement = button.querySelector( '.ladda-progress' );\r\n\r\n\t\t\t// Remove the progress bar if we're at 0 progress\r\n\t\t\tif( progress === 0 && progressElement && progressElement.parentNode ) {\r\n\t\t\t\tprogressElement.parentNode.removeChild( progressElement );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif( !progressElement ) {\r\n\t\t\t\t\tprogressElement = document.createElement( 'div' );\r\n\t\t\t\t\tprogressElement.className = 'ladda-progress';\r\n\t\t\t\t\tbutton.appendChild( progressElement );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprogressElement.style.width = ( ( progress || 0 ) * button.offsetWidth ) + 'px';\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tisLoading: function() {\r\n\r\n\t\t\treturn button.hasAttribute( 'data-loading' );\r\n\r\n\t\t},\r\n\r\n\t\tremove: function() {\r\n\r\n\t\t\tclearTimeout( timer );\r\n\r\n\t\t\tbutton.disabled = false;\r\n\t\t\tbutton.removeAttribute( 'data-loading' );\r\n\r\n\t\t\tif( spinner ) {\r\n\t\t\t\tspinner.stop();\r\n\t\t\t\tspinner = null;\r\n\t\t\t}\r\n\r\n\t\t\tALL_INSTANCES.splice( ALL_INSTANCES.indexOf(instance), 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tALL_INSTANCES.push( instance );\r\n\r\n\treturn instance;\r\n\r\n}\r\n\r\n/**\r\n * Binds the target buttons to automatically enter the\r\n * loading state when clicked.\r\n *\r\n * @param target Either an HTML element or a CSS selector.\r\n * @param options\r\n *          - timeout Number of milliseconds to wait before\r\n *            automatically cancelling the animation.\r\n *          - callback A function to be called with the Ladda\r\n *            instance when a target button is clicked.\r\n */\r\nexport function bind( target, options ) {\r\n\r\n\tvar targets;\r\n\r\n\tif( typeof target === 'string' ) {\r\n\t\ttargets = document.querySelectorAll( target );\r\n\t}\r\n\telse if( typeof target === 'object' ) {\r\n\t\ttargets = [ target ];\r\n\t} else {\r\n\t\tthrow new Error('target must be string or object');\r\n\t}\r\n\r\n\toptions = options || {};\r\n\r\n\tfor( var i = 0; i < targets.length; i++ ) {\r\n\t\tbindElement(targets[i], options);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Stops ALL current loading animations.\r\n */\r\nexport function stopAll() {\r\n\r\n\tfor( var i = 0, len = ALL_INSTANCES.length; i < len; i++ ) {\r\n\t\tALL_INSTANCES[i].stop();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n* Get the first ancestor node from an element, having a\r\n* certain type.\r\n*\r\n* @param elem An HTML element\r\n* @param type an HTML tag type (uppercased)\r\n*\r\n* @return An HTML element\r\n*/\r\nfunction getAncestorOfTagType( elem, type ) {\r\n\r\n\twhile ( elem.parentNode && elem.tagName !== type ) {\r\n\t\telem = elem.parentNode;\r\n\t}\r\n\r\n\treturn ( type === elem.tagName ) ? elem : undefined;\r\n\r\n}\r\n\r\nfunction createSpinner( button ) {\r\n\r\n\tvar height = button.offsetHeight,\r\n\t\tspinnerColor,\r\n\t\tspinnerLines;\r\n\r\n\tif( height === 0 ) {\r\n\t\t// We may have an element that is not visible so\r\n\t\t// we attempt to get the height in a different way\r\n\t\theight = parseFloat( window.getComputedStyle( button ).height );\r\n\t}\r\n\r\n\t// If the button is tall we can afford some padding\r\n\tif( height > 32 ) {\r\n\t\theight *= 0.8;\r\n\t}\r\n\r\n\t// Prefer an explicit height if one is defined\r\n\tif( button.hasAttribute( 'data-spinner-size' ) ) {\r\n\t\theight = parseInt( button.getAttribute( 'data-spinner-size' ), 10 );\r\n\t}\r\n\r\n\t// Allow buttons to specify the color of the spinner element\r\n\tif( button.hasAttribute( 'data-spinner-color' ) ) {\r\n\t\tspinnerColor = button.getAttribute( 'data-spinner-color' );\r\n\t}\r\n\r\n\t// Allow buttons to specify the number of lines of the spinner\r\n\tif( button.hasAttribute( 'data-spinner-lines' ) ) {\r\n\t\tspinnerLines = parseInt( button.getAttribute( 'data-spinner-lines' ), 10 );\r\n\t}\r\n\r\n\tvar radius = height * 0.2,\r\n\t\tlength = radius * 0.6,\r\n\t\twidth = radius < 7 ? 2 : 3;\r\n\r\n\treturn new Spinner( {\r\n\t\tcolor: spinnerColor || '#fff',\r\n\t\tlines: spinnerLines || 12,\r\n\t\tradius: radius,\r\n\t\tlength: length,\r\n\t\twidth: width,\r\n\t\tanimation: 'ladda-spinner-line-fade',\r\n\t\tzIndex: 'auto',\r\n\t\ttop: 'auto',\r\n\t\tleft: 'auto',\r\n\t\tclassName: ''\r\n\t} );\r\n\r\n}\r\n\r\nfunction wrapContent( node, wrapper ) {\r\n\r\n\tvar r = document.createRange();\r\n\tr.selectNodeContents( node );\r\n\tr.surroundContents( wrapper );\r\n\tnode.appendChild( wrapper );\r\n\r\n}\r\n\r\nfunction bindElement( element, options ) {\r\n\tif( typeof element.addEventListener !== 'function' ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tvar instance = create( element );\r\n\tvar timeout = -1;\r\n\r\n\telement.addEventListener( 'click', function() {\r\n\r\n\t\t// If the button belongs to a form, make sure all the\r\n\t\t// fields in that form are filled out\r\n\t\tvar valid = true;\r\n\t\tvar form = getAncestorOfTagType( element, 'FORM' );\r\n\r\n\t\tif( typeof form !== 'undefined' && !form.hasAttribute('novalidate') ) {\r\n\t\t\t// Modern form validation\r\n\t\t\tif( typeof form.checkValidity === 'function' ) {\r\n\t\t\t\tvalid = form.checkValidity();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif( valid ) {\r\n\t\t\t// This is asynchronous to avoid an issue where disabling\r\n\t\t\t// the button prevents forms from submitting\r\n\t\t\tinstance.startAfter( 1 );\r\n\r\n\t\t\t// Set a loading timeout if one is specified\r\n\t\t\tif( typeof options.timeout === 'number' ) {\r\n\t\t\t\tclearTimeout( timeout );\r\n\t\t\t\ttimeout = setTimeout( instance.stop, options.timeout );\r\n\t\t\t}\r\n\r\n\t\t\t// Invoke callbacks\r\n\t\t\tif( typeof options.callback === 'function' ) {\r\n\t\t\t\toptions.callback.apply( null, [ instance ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}, false );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}