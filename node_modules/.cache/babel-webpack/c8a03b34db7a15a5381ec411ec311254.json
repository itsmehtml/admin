{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar graphic = require(\"../../util/graphic\");\n\nvar LineGroup = require(\"./Line\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * @module echarts/chart/helper/LineDraw\r\n */\n// import IncrementalDisplayable from 'zrender/src/graphic/IncrementalDisplayable';\n\n/**\r\n * @alias module:echarts/component/marker/LineDraw\r\n * @constructor\r\n */\n\n\nfunction LineDraw(ctor) {\n  this._ctor = ctor || LineGroup;\n  this.group = new graphic.Group();\n}\n\nvar lineDrawProto = LineDraw.prototype;\n\nlineDrawProto.isPersistent = function () {\n  return true;\n};\n/**\r\n * @param {module:echarts/data/List} lineData\r\n */\n\n\nlineDrawProto.updateData = function (lineData) {\n  var lineDraw = this;\n  var group = lineDraw.group;\n  var oldLineData = lineDraw._lineData;\n  lineDraw._lineData = lineData; // There is no oldLineData only when first rendering or switching from\n  // stream mode to normal mode, where previous elements should be removed.\n\n  if (!oldLineData) {\n    group.removeAll();\n  }\n\n  var seriesScope = makeSeriesScope(lineData);\n  lineData.diff(oldLineData).add(function (idx) {\n    doAdd(lineDraw, lineData, idx, seriesScope);\n  }).update(function (newIdx, oldIdx) {\n    doUpdate(lineDraw, oldLineData, lineData, oldIdx, newIdx, seriesScope);\n  }).remove(function (idx) {\n    group.remove(oldLineData.getItemGraphicEl(idx));\n  }).execute();\n};\n\nfunction doAdd(lineDraw, lineData, idx, seriesScope) {\n  var itemLayout = lineData.getItemLayout(idx);\n\n  if (!lineNeedsDraw(itemLayout)) {\n    return;\n  }\n\n  var el = new lineDraw._ctor(lineData, idx, seriesScope);\n  lineData.setItemGraphicEl(idx, el);\n  lineDraw.group.add(el);\n}\n\nfunction doUpdate(lineDraw, oldLineData, newLineData, oldIdx, newIdx, seriesScope) {\n  var itemEl = oldLineData.getItemGraphicEl(oldIdx);\n\n  if (!lineNeedsDraw(newLineData.getItemLayout(newIdx))) {\n    lineDraw.group.remove(itemEl);\n    return;\n  }\n\n  if (!itemEl) {\n    itemEl = new lineDraw._ctor(newLineData, newIdx, seriesScope);\n  } else {\n    itemEl.updateData(newLineData, newIdx, seriesScope);\n  }\n\n  newLineData.setItemGraphicEl(newIdx, itemEl);\n  lineDraw.group.add(itemEl);\n}\n\nlineDrawProto.updateLayout = function () {\n  var lineData = this._lineData; // Do not support update layout in incremental mode.\n\n  if (!lineData) {\n    return;\n  }\n\n  lineData.eachItemGraphicEl(function (el, idx) {\n    el.updateLayout(lineData, idx);\n  }, this);\n};\n\nlineDrawProto.incrementalPrepareUpdate = function (lineData) {\n  this._seriesScope = makeSeriesScope(lineData);\n  this._lineData = null;\n  this.group.removeAll();\n};\n\nlineDrawProto.incrementalUpdate = function (taskParams, lineData) {\n  function updateIncrementalAndHover(el) {\n    if (!el.isGroup) {\n      el.incremental = el.useHoverLayer = true;\n    }\n  }\n\n  for (var idx = taskParams.start; idx < taskParams.end; idx++) {\n    var itemLayout = lineData.getItemLayout(idx);\n\n    if (lineNeedsDraw(itemLayout)) {\n      var el = new this._ctor(lineData, idx, this._seriesScope);\n      el.traverse(updateIncrementalAndHover);\n      this.group.add(el);\n      lineData.setItemGraphicEl(idx, el);\n    }\n  }\n};\n\nfunction makeSeriesScope(lineData) {\n  var hostModel = lineData.hostModel;\n  return {\n    lineStyle: hostModel.getModel('lineStyle').getLineStyle(),\n    hoverLineStyle: hostModel.getModel('emphasis.lineStyle').getLineStyle(),\n    labelModel: hostModel.getModel('label'),\n    hoverLabelModel: hostModel.getModel('emphasis.label')\n  };\n}\n\nlineDrawProto.remove = function () {\n  this._clearIncremental();\n\n  this._incremental = null;\n  this.group.removeAll();\n};\n\nlineDrawProto._clearIncremental = function () {\n  var incremental = this._incremental;\n\n  if (incremental) {\n    incremental.clearDisplaybles();\n  }\n};\n\nfunction isPointNaN(pt) {\n  return isNaN(pt[0]) || isNaN(pt[1]);\n}\n\nfunction lineNeedsDraw(pts) {\n  return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);\n}\n\nvar _default = LineDraw;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/helper/LineDraw.js"],"names":["graphic","require","LineGroup","LineDraw","ctor","_ctor","group","Group","lineDrawProto","prototype","isPersistent","updateData","lineData","lineDraw","oldLineData","_lineData","removeAll","seriesScope","makeSeriesScope","diff","add","idx","doAdd","update","newIdx","oldIdx","doUpdate","remove","getItemGraphicEl","execute","itemLayout","getItemLayout","lineNeedsDraw","el","setItemGraphicEl","newLineData","itemEl","updateLayout","eachItemGraphicEl","incrementalPrepareUpdate","_seriesScope","incrementalUpdate","taskParams","updateIncrementalAndHover","isGroup","incremental","useHoverLayer","start","end","traverse","hostModel","lineStyle","getModel","getLineStyle","hoverLineStyle","labelModel","hoverLabelModel","_clearIncremental","_incremental","clearDisplaybles","isPointNaN","pt","isNaN","pts","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar graphic = require(\"../../util/graphic\");\r\n\r\nvar LineGroup = require(\"./Line\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * @module echarts/chart/helper/LineDraw\r\n */\r\n// import IncrementalDisplayable from 'zrender/src/graphic/IncrementalDisplayable';\r\n\r\n/**\r\n * @alias module:echarts/component/marker/LineDraw\r\n * @constructor\r\n */\r\nfunction LineDraw(ctor) {\r\n  this._ctor = ctor || LineGroup;\r\n  this.group = new graphic.Group();\r\n}\r\n\r\nvar lineDrawProto = LineDraw.prototype;\r\n\r\nlineDrawProto.isPersistent = function () {\r\n  return true;\r\n};\r\n/**\r\n * @param {module:echarts/data/List} lineData\r\n */\r\n\r\n\r\nlineDrawProto.updateData = function (lineData) {\r\n  var lineDraw = this;\r\n  var group = lineDraw.group;\r\n  var oldLineData = lineDraw._lineData;\r\n  lineDraw._lineData = lineData; // There is no oldLineData only when first rendering or switching from\r\n  // stream mode to normal mode, where previous elements should be removed.\r\n\r\n  if (!oldLineData) {\r\n    group.removeAll();\r\n  }\r\n\r\n  var seriesScope = makeSeriesScope(lineData);\r\n  lineData.diff(oldLineData).add(function (idx) {\r\n    doAdd(lineDraw, lineData, idx, seriesScope);\r\n  }).update(function (newIdx, oldIdx) {\r\n    doUpdate(lineDraw, oldLineData, lineData, oldIdx, newIdx, seriesScope);\r\n  }).remove(function (idx) {\r\n    group.remove(oldLineData.getItemGraphicEl(idx));\r\n  }).execute();\r\n};\r\n\r\nfunction doAdd(lineDraw, lineData, idx, seriesScope) {\r\n  var itemLayout = lineData.getItemLayout(idx);\r\n\r\n  if (!lineNeedsDraw(itemLayout)) {\r\n    return;\r\n  }\r\n\r\n  var el = new lineDraw._ctor(lineData, idx, seriesScope);\r\n  lineData.setItemGraphicEl(idx, el);\r\n  lineDraw.group.add(el);\r\n}\r\n\r\nfunction doUpdate(lineDraw, oldLineData, newLineData, oldIdx, newIdx, seriesScope) {\r\n  var itemEl = oldLineData.getItemGraphicEl(oldIdx);\r\n\r\n  if (!lineNeedsDraw(newLineData.getItemLayout(newIdx))) {\r\n    lineDraw.group.remove(itemEl);\r\n    return;\r\n  }\r\n\r\n  if (!itemEl) {\r\n    itemEl = new lineDraw._ctor(newLineData, newIdx, seriesScope);\r\n  } else {\r\n    itemEl.updateData(newLineData, newIdx, seriesScope);\r\n  }\r\n\r\n  newLineData.setItemGraphicEl(newIdx, itemEl);\r\n  lineDraw.group.add(itemEl);\r\n}\r\n\r\nlineDrawProto.updateLayout = function () {\r\n  var lineData = this._lineData; // Do not support update layout in incremental mode.\r\n\r\n  if (!lineData) {\r\n    return;\r\n  }\r\n\r\n  lineData.eachItemGraphicEl(function (el, idx) {\r\n    el.updateLayout(lineData, idx);\r\n  }, this);\r\n};\r\n\r\nlineDrawProto.incrementalPrepareUpdate = function (lineData) {\r\n  this._seriesScope = makeSeriesScope(lineData);\r\n  this._lineData = null;\r\n  this.group.removeAll();\r\n};\r\n\r\nlineDrawProto.incrementalUpdate = function (taskParams, lineData) {\r\n  function updateIncrementalAndHover(el) {\r\n    if (!el.isGroup) {\r\n      el.incremental = el.useHoverLayer = true;\r\n    }\r\n  }\r\n\r\n  for (var idx = taskParams.start; idx < taskParams.end; idx++) {\r\n    var itemLayout = lineData.getItemLayout(idx);\r\n\r\n    if (lineNeedsDraw(itemLayout)) {\r\n      var el = new this._ctor(lineData, idx, this._seriesScope);\r\n      el.traverse(updateIncrementalAndHover);\r\n      this.group.add(el);\r\n      lineData.setItemGraphicEl(idx, el);\r\n    }\r\n  }\r\n};\r\n\r\nfunction makeSeriesScope(lineData) {\r\n  var hostModel = lineData.hostModel;\r\n  return {\r\n    lineStyle: hostModel.getModel('lineStyle').getLineStyle(),\r\n    hoverLineStyle: hostModel.getModel('emphasis.lineStyle').getLineStyle(),\r\n    labelModel: hostModel.getModel('label'),\r\n    hoverLabelModel: hostModel.getModel('emphasis.label')\r\n  };\r\n}\r\n\r\nlineDrawProto.remove = function () {\r\n  this._clearIncremental();\r\n\r\n  this._incremental = null;\r\n  this.group.removeAll();\r\n};\r\n\r\nlineDrawProto._clearIncremental = function () {\r\n  var incremental = this._incremental;\r\n\r\n  if (incremental) {\r\n    incremental.clearDisplaybles();\r\n  }\r\n};\r\n\r\nfunction isPointNaN(pt) {\r\n  return isNaN(pt[0]) || isNaN(pt[1]);\r\n}\r\n\r\nfunction lineNeedsDraw(pts) {\r\n  return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);\r\n}\r\n\r\nvar _default = LineDraw;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}