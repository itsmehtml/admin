{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar echarts = require(\"../../echarts\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * payload: {\r\n *      brushIndex: number, or,\r\n *      brushId: string, or,\r\n *      brushName: string,\r\n *      globalRanges: Array\r\n * }\r\n */\n\n\necharts.registerAction({\n  type: 'brush',\n  event: 'brush'\n  /*, update: 'updateView' */\n\n}, function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'brush',\n    query: payload\n  }, function (brushModel) {\n    brushModel.setAreas(payload.areas);\n  });\n});\n/**\r\n * payload: {\r\n *      brushComponents: [\r\n *          {\r\n *              brushId,\r\n *              brushIndex,\r\n *              brushName,\r\n *              series: [\r\n *                  {\r\n *                      seriesId,\r\n *                      seriesIndex,\r\n *                      seriesName,\r\n *                      rawIndices: [21, 34, ...]\r\n *                  },\r\n *                  ...\r\n *              ]\r\n *          },\r\n *          ...\r\n *      ]\r\n * }\r\n */\n\necharts.registerAction({\n  type: 'brushSelect',\n  event: 'brushSelected',\n  update: 'none'\n}, function () {});\necharts.registerAction({\n  type: 'brushEnd',\n  event: 'brushEnd',\n  update: 'none'\n}, function () {});","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/component/brush/brushAction.js"],"names":["echarts","require","registerAction","type","event","payload","ecModel","eachComponent","mainType","query","brushModel","setAreas","areas","update"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,OAAO,CAACE,cAAR,CAAuB;AACrBC,EAAAA,IAAI,EAAE,OADe;AAErBC,EAAAA,KAAK,EAAE;AACP;;AAHqB,CAAvB,EAKG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC7BA,EAAAA,OAAO,CAACC,aAAR,CAAsB;AACpBC,IAAAA,QAAQ,EAAE,OADU;AAEpBC,IAAAA,KAAK,EAAEJ;AAFa,GAAtB,EAGG,UAAUK,UAAV,EAAsB;AACvBA,IAAAA,UAAU,CAACC,QAAX,CAAoBN,OAAO,CAACO,KAA5B;AACD,GALD;AAMD,CAZD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,OAAO,CAACE,cAAR,CAAuB;AACrBC,EAAAA,IAAI,EAAE,aADe;AAErBC,EAAAA,KAAK,EAAE,eAFc;AAGrBS,EAAAA,MAAM,EAAE;AAHa,CAAvB,EAIG,YAAY,CAAE,CAJjB;AAKAb,OAAO,CAACE,cAAR,CAAuB;AACrBC,EAAAA,IAAI,EAAE,UADe;AAErBC,EAAAA,KAAK,EAAE,UAFc;AAGrBS,EAAAA,MAAM,EAAE;AAHa,CAAvB,EAIG,YAAY,CAAE,CAJjB","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar echarts = require(\"../../echarts\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * payload: {\r\n *      brushIndex: number, or,\r\n *      brushId: string, or,\r\n *      brushName: string,\r\n *      globalRanges: Array\r\n * }\r\n */\r\necharts.registerAction({\r\n  type: 'brush',\r\n  event: 'brush'\r\n  /*, update: 'updateView' */\r\n\r\n}, function (payload, ecModel) {\r\n  ecModel.eachComponent({\r\n    mainType: 'brush',\r\n    query: payload\r\n  }, function (brushModel) {\r\n    brushModel.setAreas(payload.areas);\r\n  });\r\n});\r\n/**\r\n * payload: {\r\n *      brushComponents: [\r\n *          {\r\n *              brushId,\r\n *              brushIndex,\r\n *              brushName,\r\n *              series: [\r\n *                  {\r\n *                      seriesId,\r\n *                      seriesIndex,\r\n *                      seriesName,\r\n *                      rawIndices: [21, 34, ...]\r\n *                  },\r\n *                  ...\r\n *              ]\r\n *          },\r\n *          ...\r\n *      ]\r\n * }\r\n */\r\n\r\necharts.registerAction({\r\n  type: 'brushSelect',\r\n  event: 'brushSelected',\r\n  update: 'none'\r\n}, function () {});\r\necharts.registerAction({\r\n  type: 'brushEnd',\r\n  event: 'brushEnd',\r\n  update: 'none'\r\n}, function () {});"]},"metadata":{},"sourceType":"script"}