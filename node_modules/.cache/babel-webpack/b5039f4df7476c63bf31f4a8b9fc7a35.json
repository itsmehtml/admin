{"ast":null,"code":"var util = require(\"../core/util\");\n\nvar _event = require(\"../core/event\");\n\nvar Dispatcher = _event.Dispatcher;\n\nvar requestAnimationFrame = require(\"./requestAnimationFrame\");\n\nvar Animator = require(\"./Animator\");\n/**\r\n * 动画主类, 调度和管理所有动画控制器\r\n *\r\n * @module zrender/animation/Animation\r\n * @author pissang(https://github.com/pissang)\r\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n/**\r\n * @typedef {Object} IZRenderStage\r\n * @property {Function} update\r\n */\n\n/**\r\n * @alias module:zrender/animation/Animation\r\n * @constructor\r\n * @param {Object} [options]\r\n * @param {Function} [options.onframe]\r\n * @param {IZRenderStage} [options.stage]\r\n * @example\r\n *     var animation = new Animation();\r\n *     var obj = {\r\n *         x: 100,\r\n *         y: 100\r\n *     };\r\n *     animation.animate(node.position)\r\n *         .when(1000, {\r\n *             x: 500,\r\n *             y: 500\r\n *         })\r\n *         .when(2000, {\r\n *             x: 100,\r\n *             y: 100\r\n *         })\r\n *         .start('spline');\r\n */\n\n\nvar Animation = function Animation(options) {\n  options = options || {};\n  this.stage = options.stage || {};\n\n  this.onframe = options.onframe || function () {}; // private properties\n\n\n  this._clips = [];\n  this._running = false;\n  this._time;\n  this._pausedTime;\n  this._pauseStart;\n  this._paused = false;\n  Dispatcher.call(this);\n};\n\nAnimation.prototype = {\n  constructor: Animation,\n\n  /**\r\n   * 添加 clip\r\n   * @param {module:zrender/animation/Clip} clip\r\n   */\n  addClip: function addClip(clip) {\n    this._clips.push(clip);\n  },\n\n  /**\r\n   * 添加 animator\r\n   * @param {module:zrender/animation/Animator} animator\r\n   */\n  addAnimator: function addAnimator(animator) {\n    animator.animation = this;\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.addClip(clips[i]);\n    }\n  },\n\n  /**\r\n   * 删除动画片段\r\n   * @param {module:zrender/animation/Clip} clip\r\n   */\n  removeClip: function removeClip(clip) {\n    var idx = util.indexOf(this._clips, clip);\n\n    if (idx >= 0) {\n      this._clips.splice(idx, 1);\n    }\n  },\n\n  /**\r\n   * 删除动画片段\r\n   * @param {module:zrender/animation/Animator} animator\r\n   */\n  removeAnimator: function removeAnimator(animator) {\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.removeClip(clips[i]);\n    }\n\n    animator.animation = null;\n  },\n  _update: function _update() {\n    var time = new Date().getTime() - this._pausedTime;\n\n    var delta = time - this._time;\n    var clips = this._clips;\n    var len = clips.length;\n    var deferredEvents = [];\n    var deferredClips = [];\n\n    for (var i = 0; i < len; i++) {\n      var clip = clips[i];\n      var e = clip.step(time, delta); // Throw out the events need to be called after\n      // stage.update, like destroy\n\n      if (e) {\n        deferredEvents.push(e);\n        deferredClips.push(clip);\n      }\n    } // Remove the finished clip\n\n\n    for (var i = 0; i < len;) {\n      if (clips[i]._needsRemove) {\n        clips[i] = clips[len - 1];\n        clips.pop();\n        len--;\n      } else {\n        i++;\n      }\n    }\n\n    len = deferredEvents.length;\n\n    for (var i = 0; i < len; i++) {\n      deferredClips[i].fire(deferredEvents[i]);\n    }\n\n    this._time = time;\n    this.onframe(delta); // 'frame' should be triggered before stage, because upper application\n    // depends on the sequence (e.g., echarts-stream and finish\n    // event judge)\n\n    this.trigger('frame', delta);\n\n    if (this.stage.update) {\n      this.stage.update();\n    }\n  },\n  _startLoop: function _startLoop() {\n    var self = this;\n    this._running = true;\n\n    function step() {\n      if (self._running) {\n        requestAnimationFrame(step);\n        !self._paused && self._update();\n      }\n    }\n\n    requestAnimationFrame(step);\n  },\n\n  /**\r\n   * Start animation.\r\n   */\n  start: function start() {\n    this._time = new Date().getTime();\n    this._pausedTime = 0;\n\n    this._startLoop();\n  },\n\n  /**\r\n   * Stop animation.\r\n   */\n  stop: function stop() {\n    this._running = false;\n  },\n\n  /**\r\n   * Pause animation.\r\n   */\n  pause: function pause() {\n    if (!this._paused) {\n      this._pauseStart = new Date().getTime();\n      this._paused = true;\n    }\n  },\n\n  /**\r\n   * Resume animation.\r\n   */\n  resume: function resume() {\n    if (this._paused) {\n      this._pausedTime += new Date().getTime() - this._pauseStart;\n      this._paused = false;\n    }\n  },\n\n  /**\r\n   * Clear animation.\r\n   */\n  clear: function clear() {\n    this._clips = [];\n  },\n\n  /**\r\n   * Whether animation finished.\r\n   */\n  isFinished: function isFinished() {\n    return !this._clips.length;\n  },\n\n  /**\r\n   * Creat animator for a target, whose props can be animated.\r\n   *\r\n   * @param  {Object} target\r\n   * @param  {Object} options\r\n   * @param  {boolean} [options.loop=false] Whether loop animation.\r\n   * @param  {Function} [options.getter=null] Get value from target.\r\n   * @param  {Function} [options.setter=null] Set value to target.\r\n   * @return {module:zrender/animation/Animation~Animator}\r\n   */\n  // TODO Gap\n  animate: function animate(target, options) {\n    options = options || {};\n    var animator = new Animator(target, options.loop, options.getter, options.setter);\n    this.addAnimator(animator);\n    return animator;\n  }\n};\nutil.mixin(Animation, Dispatcher);\nvar _default = Animation;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/zrender/lib/animation/Animation.js"],"names":["util","require","_event","Dispatcher","requestAnimationFrame","Animator","Animation","options","stage","onframe","_clips","_running","_time","_pausedTime","_pauseStart","_paused","call","prototype","constructor","addClip","clip","push","addAnimator","animator","animation","clips","getClips","i","length","removeClip","idx","indexOf","splice","removeAnimator","_update","time","Date","getTime","delta","len","deferredEvents","deferredClips","e","step","_needsRemove","pop","fire","trigger","update","_startLoop","self","start","stop","pause","resume","clear","isFinished","animate","target","loop","getter","setter","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var util = require(\"../core/util\");\r\n\r\nvar _event = require(\"../core/event\");\r\n\r\nvar Dispatcher = _event.Dispatcher;\r\n\r\nvar requestAnimationFrame = require(\"./requestAnimationFrame\");\r\n\r\nvar Animator = require(\"./Animator\");\r\n\r\n/**\r\n * 动画主类, 调度和管理所有动画控制器\r\n *\r\n * @module zrender/animation/Animation\r\n * @author pissang(https://github.com/pissang)\r\n */\r\n// TODO Additive animation\r\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\r\n// https://developer.apple.com/videos/wwdc2014/#236\r\n\r\n/**\r\n * @typedef {Object} IZRenderStage\r\n * @property {Function} update\r\n */\r\n\r\n/**\r\n * @alias module:zrender/animation/Animation\r\n * @constructor\r\n * @param {Object} [options]\r\n * @param {Function} [options.onframe]\r\n * @param {IZRenderStage} [options.stage]\r\n * @example\r\n *     var animation = new Animation();\r\n *     var obj = {\r\n *         x: 100,\r\n *         y: 100\r\n *     };\r\n *     animation.animate(node.position)\r\n *         .when(1000, {\r\n *             x: 500,\r\n *             y: 500\r\n *         })\r\n *         .when(2000, {\r\n *             x: 100,\r\n *             y: 100\r\n *         })\r\n *         .start('spline');\r\n */\r\nvar Animation = function (options) {\r\n  options = options || {};\r\n  this.stage = options.stage || {};\r\n\r\n  this.onframe = options.onframe || function () {}; // private properties\r\n\r\n\r\n  this._clips = [];\r\n  this._running = false;\r\n  this._time;\r\n  this._pausedTime;\r\n  this._pauseStart;\r\n  this._paused = false;\r\n  Dispatcher.call(this);\r\n};\r\n\r\nAnimation.prototype = {\r\n  constructor: Animation,\r\n\r\n  /**\r\n   * 添加 clip\r\n   * @param {module:zrender/animation/Clip} clip\r\n   */\r\n  addClip: function (clip) {\r\n    this._clips.push(clip);\r\n  },\r\n\r\n  /**\r\n   * 添加 animator\r\n   * @param {module:zrender/animation/Animator} animator\r\n   */\r\n  addAnimator: function (animator) {\r\n    animator.animation = this;\r\n    var clips = animator.getClips();\r\n\r\n    for (var i = 0; i < clips.length; i++) {\r\n      this.addClip(clips[i]);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 删除动画片段\r\n   * @param {module:zrender/animation/Clip} clip\r\n   */\r\n  removeClip: function (clip) {\r\n    var idx = util.indexOf(this._clips, clip);\r\n\r\n    if (idx >= 0) {\r\n      this._clips.splice(idx, 1);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 删除动画片段\r\n   * @param {module:zrender/animation/Animator} animator\r\n   */\r\n  removeAnimator: function (animator) {\r\n    var clips = animator.getClips();\r\n\r\n    for (var i = 0; i < clips.length; i++) {\r\n      this.removeClip(clips[i]);\r\n    }\r\n\r\n    animator.animation = null;\r\n  },\r\n  _update: function () {\r\n    var time = new Date().getTime() - this._pausedTime;\r\n\r\n    var delta = time - this._time;\r\n    var clips = this._clips;\r\n    var len = clips.length;\r\n    var deferredEvents = [];\r\n    var deferredClips = [];\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      var clip = clips[i];\r\n      var e = clip.step(time, delta); // Throw out the events need to be called after\r\n      // stage.update, like destroy\r\n\r\n      if (e) {\r\n        deferredEvents.push(e);\r\n        deferredClips.push(clip);\r\n      }\r\n    } // Remove the finished clip\r\n\r\n\r\n    for (var i = 0; i < len;) {\r\n      if (clips[i]._needsRemove) {\r\n        clips[i] = clips[len - 1];\r\n        clips.pop();\r\n        len--;\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    len = deferredEvents.length;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      deferredClips[i].fire(deferredEvents[i]);\r\n    }\r\n\r\n    this._time = time;\r\n    this.onframe(delta); // 'frame' should be triggered before stage, because upper application\r\n    // depends on the sequence (e.g., echarts-stream and finish\r\n    // event judge)\r\n\r\n    this.trigger('frame', delta);\r\n\r\n    if (this.stage.update) {\r\n      this.stage.update();\r\n    }\r\n  },\r\n  _startLoop: function () {\r\n    var self = this;\r\n    this._running = true;\r\n\r\n    function step() {\r\n      if (self._running) {\r\n        requestAnimationFrame(step);\r\n        !self._paused && self._update();\r\n      }\r\n    }\r\n\r\n    requestAnimationFrame(step);\r\n  },\r\n\r\n  /**\r\n   * Start animation.\r\n   */\r\n  start: function () {\r\n    this._time = new Date().getTime();\r\n    this._pausedTime = 0;\r\n\r\n    this._startLoop();\r\n  },\r\n\r\n  /**\r\n   * Stop animation.\r\n   */\r\n  stop: function () {\r\n    this._running = false;\r\n  },\r\n\r\n  /**\r\n   * Pause animation.\r\n   */\r\n  pause: function () {\r\n    if (!this._paused) {\r\n      this._pauseStart = new Date().getTime();\r\n      this._paused = true;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Resume animation.\r\n   */\r\n  resume: function () {\r\n    if (this._paused) {\r\n      this._pausedTime += new Date().getTime() - this._pauseStart;\r\n      this._paused = false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Clear animation.\r\n   */\r\n  clear: function () {\r\n    this._clips = [];\r\n  },\r\n\r\n  /**\r\n   * Whether animation finished.\r\n   */\r\n  isFinished: function () {\r\n    return !this._clips.length;\r\n  },\r\n\r\n  /**\r\n   * Creat animator for a target, whose props can be animated.\r\n   *\r\n   * @param  {Object} target\r\n   * @param  {Object} options\r\n   * @param  {boolean} [options.loop=false] Whether loop animation.\r\n   * @param  {Function} [options.getter=null] Get value from target.\r\n   * @param  {Function} [options.setter=null] Set value to target.\r\n   * @return {module:zrender/animation/Animation~Animator}\r\n   */\r\n  // TODO Gap\r\n  animate: function (target, options) {\r\n    options = options || {};\r\n    var animator = new Animator(target, options.loop, options.getter, options.setter);\r\n    this.addAnimator(animator);\r\n    return animator;\r\n  }\r\n};\r\nutil.mixin(Animation, Dispatcher);\r\nvar _default = Animation;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}