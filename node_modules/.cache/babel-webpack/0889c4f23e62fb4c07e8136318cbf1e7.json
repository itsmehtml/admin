{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * LegendVisualProvider is an bridge that pick encoded color from data and\r\n * provide to the legend component.\r\n * @param {Function} getDataWithEncodedVisual Function to get data after filtered. It stores all the encoding info\r\n * @param {Function} getRawData Function to get raw data before filtered.\r\n */\nfunction LegendVisualProvider(getDataWithEncodedVisual, getRawData) {\n  this.getAllNames = function () {\n    var rawData = getRawData(); // We find the name from the raw data. In case it's filtered by the legend component.\n    // Normally, the name can be found in rawData, but can't be found in filtered data will display as gray.\n\n    return rawData.mapArray(rawData.getName);\n  };\n\n  this.containName = function (name) {\n    var rawData = getRawData();\n    return rawData.indexOfName(name) >= 0;\n  };\n\n  this.indexOfName = function (name) {\n    // Only get data when necessary.\n    // Because LegendVisualProvider constructor may be new in the stage that data is not prepared yet.\n    // Invoking Series#getData immediately will throw an error.\n    var dataWithEncodedVisual = getDataWithEncodedVisual();\n    return dataWithEncodedVisual.indexOfName(name);\n  };\n\n  this.getItemVisual = function (dataIndex, key) {\n    // Get encoded visual properties from final filtered data.\n    var dataWithEncodedVisual = getDataWithEncodedVisual();\n    return dataWithEncodedVisual.getItemVisual(dataIndex, key);\n  };\n}\n\nvar _default = LegendVisualProvider;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/visual/LegendVisualProvider.js"],"names":["LegendVisualProvider","getDataWithEncodedVisual","getRawData","getAllNames","rawData","mapArray","getName","containName","name","indexOfName","dataWithEncodedVisual","getItemVisual","dataIndex","key","_default","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAT,CAA8BC,wBAA9B,EAAwDC,UAAxD,EAAoE;AAClE,OAAKC,WAAL,GAAmB,YAAY;AAC7B,QAAIC,OAAO,GAAGF,UAAU,EAAxB,CAD6B,CACD;AAC5B;;AAEA,WAAOE,OAAO,CAACC,QAAR,CAAiBD,OAAO,CAACE,OAAzB,CAAP;AACD,GALD;;AAOA,OAAKC,WAAL,GAAmB,UAAUC,IAAV,EAAgB;AACjC,QAAIJ,OAAO,GAAGF,UAAU,EAAxB;AACA,WAAOE,OAAO,CAACK,WAAR,CAAoBD,IAApB,KAA6B,CAApC;AACD,GAHD;;AAKA,OAAKC,WAAL,GAAmB,UAAUD,IAAV,EAAgB;AACjC;AACA;AACA;AACA,QAAIE,qBAAqB,GAAGT,wBAAwB,EAApD;AACA,WAAOS,qBAAqB,CAACD,WAAtB,CAAkCD,IAAlC,CAAP;AACD,GAND;;AAQA,OAAKG,aAAL,GAAqB,UAAUC,SAAV,EAAqBC,GAArB,EAA0B;AAC7C;AACA,QAAIH,qBAAqB,GAAGT,wBAAwB,EAApD;AACA,WAAOS,qBAAqB,CAACC,aAAtB,CAAoCC,SAApC,EAA+CC,GAA/C,CAAP;AACD,GAJD;AAKD;;AAED,IAAIC,QAAQ,GAAGd,oBAAf;AACAe,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/**\r\n * LegendVisualProvider is an bridge that pick encoded color from data and\r\n * provide to the legend component.\r\n * @param {Function} getDataWithEncodedVisual Function to get data after filtered. It stores all the encoding info\r\n * @param {Function} getRawData Function to get raw data before filtered.\r\n */\r\nfunction LegendVisualProvider(getDataWithEncodedVisual, getRawData) {\r\n  this.getAllNames = function () {\r\n    var rawData = getRawData(); // We find the name from the raw data. In case it's filtered by the legend component.\r\n    // Normally, the name can be found in rawData, but can't be found in filtered data will display as gray.\r\n\r\n    return rawData.mapArray(rawData.getName);\r\n  };\r\n\r\n  this.containName = function (name) {\r\n    var rawData = getRawData();\r\n    return rawData.indexOfName(name) >= 0;\r\n  };\r\n\r\n  this.indexOfName = function (name) {\r\n    // Only get data when necessary.\r\n    // Because LegendVisualProvider constructor may be new in the stage that data is not prepared yet.\r\n    // Invoking Series#getData immediately will throw an error.\r\n    var dataWithEncodedVisual = getDataWithEncodedVisual();\r\n    return dataWithEncodedVisual.indexOfName(name);\r\n  };\r\n\r\n  this.getItemVisual = function (dataIndex, key) {\r\n    // Get encoded visual properties from final filtered data.\r\n    var dataWithEncodedVisual = getDataWithEncodedVisual();\r\n    return dataWithEncodedVisual.getItemVisual(dataIndex, key);\r\n  };\r\n}\r\n\r\nvar _default = LegendVisualProvider;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}