{"ast":null,"code":"module.exports = function (hljs) {\n  return {\n    aliases: ['ml'],\n    keywords: {\n      keyword:\n      /* according to Definition of Standard ML 97  */\n      'abstype and andalso as case datatype do else end eqtype ' + 'exception fn fun functor handle if in include infix infixr ' + 'let local nonfix of op open orelse raise rec sharing sig ' + 'signature struct structure then type val with withtype where while',\n      built_in:\n      /* built-in types according to basis library */\n      'array bool char exn int list option order real ref string substring vector unit word',\n      literal: 'true false NONE SOME LESS EQUAL GREATER nil'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [{\n      className: 'literal',\n      begin: /\\[(\\|\\|)?\\]|\\(\\)/,\n      relevance: 0\n    }, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)', {\n      contains: ['self']\n    }), {\n      /* type variable */\n      className: 'symbol',\n      begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n      /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n\n    }, {\n      /* polymorphic variant */\n      className: 'type',\n      begin: '`[A-Z][\\\\w\\']*'\n    }, {\n      /* module or constructor */\n      className: 'type',\n      begin: '\\\\b[A-Z][\\\\w\\']*',\n      relevance: 0\n    }, {\n      /* don't color identifiers, but safely catch all identifiers with '*/\n      begin: '[a-z_]\\\\w*\\'[\\\\w\\']*'\n    }, hljs.inherit(hljs.APOS_STRING_MODE, {\n      className: 'string',\n      relevance: 0\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    }), {\n      className: 'number',\n      begin: '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' + '0[oO][0-7_]+[Lln]?|' + '0[bB][01_]+[Lln]?|' + '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n      relevance: 0\n    }, {\n      begin: /[-=]>/ // relevance booster\n\n    }]\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/highlight.js/lib/languages/sml.js"],"names":["module","exports","hljs","aliases","keywords","keyword","built_in","literal","illegal","lexemes","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,SAAO;AACLC,IAAAA,OAAO,EAAE,CAAC,IAAD,CADJ;AAELC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO;AACL;AACA,mEACA,6DADA,GAEA,2DAFA,GAGA,oEANM;AAORC,MAAAA,QAAQ;AACN;AACA,4FATM;AAURC,MAAAA,OAAO,EACL;AAXM,KAFL;AAeLC,IAAAA,OAAO,EAAE,SAfJ;AAgBLC,IAAAA,OAAO,EAAE,cAhBJ;AAiBLC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,SAAS,EAAE,SADb;AAEEC,MAAAA,KAAK,EAAE,kBAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADQ,EAMRX,IAAI,CAACY,OAAL,CACE,QADF,EAEE,QAFF,EAGE;AACEJ,MAAAA,QAAQ,EAAE,CAAC,MAAD;AADZ,KAHF,CANQ,EAaR;AAAE;AACAC,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EAAE;AACP;;AAHF,KAbQ,EAkBR;AAAE;AACAD,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE;AAFT,KAlBQ,EAsBR;AAAE;AACAD,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE,kBAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAtBQ,EA2BR;AAAE;AACAD,MAAAA,KAAK,EAAE;AADT,KA3BQ,EA8BRV,IAAI,CAACa,OAAL,CAAab,IAAI,CAACc,gBAAlB,EAAoC;AAACL,MAAAA,SAAS,EAAE,QAAZ;AAAsBE,MAAAA,SAAS,EAAE;AAAjC,KAApC,CA9BQ,EA+BRX,IAAI,CAACa,OAAL,CAAab,IAAI,CAACe,iBAAlB,EAAqC;AAACT,MAAAA,OAAO,EAAE;AAAV,KAArC,CA/BQ,EAgCR;AACEG,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EACH,kCACA,qBADA,GAEA,oBAFA,GAGA,wDANJ;AAOEC,MAAAA,SAAS,EAAE;AAPb,KAhCQ,EAyCR;AACED,MAAAA,KAAK,EAAE,OADT,CACiB;;AADjB,KAzCQ;AAjBL,GAAP;AA+DD,CAhED","sourcesContent":["module.exports = function(hljs) {\r\n  return {\r\n    aliases: ['ml'],\r\n    keywords: {\r\n      keyword:\r\n        /* according to Definition of Standard ML 97  */\r\n        'abstype and andalso as case datatype do else end eqtype ' +\r\n        'exception fn fun functor handle if in include infix infixr ' +\r\n        'let local nonfix of op open orelse raise rec sharing sig ' +\r\n        'signature struct structure then type val with withtype where while',\r\n      built_in:\r\n        /* built-in types according to basis library */\r\n        'array bool char exn int list option order real ref string substring vector unit word',\r\n      literal:\r\n        'true false NONE SOME LESS EQUAL GREATER nil'\r\n    },\r\n    illegal: /\\/\\/|>>/,\r\n    lexemes: '[a-z_]\\\\w*!?',\r\n    contains: [\r\n      {\r\n        className: 'literal',\r\n        begin: /\\[(\\|\\|)?\\]|\\(\\)/,\r\n        relevance: 0\r\n      },\r\n      hljs.COMMENT(\r\n        '\\\\(\\\\*',\r\n        '\\\\*\\\\)',\r\n        {\r\n          contains: ['self']\r\n        }\r\n      ),\r\n      { /* type variable */\r\n        className: 'symbol',\r\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\r\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\r\n      },\r\n      { /* polymorphic variant */\r\n        className: 'type',\r\n        begin: '`[A-Z][\\\\w\\']*'\r\n      },\r\n      { /* module or constructor */\r\n        className: 'type',\r\n        begin: '\\\\b[A-Z][\\\\w\\']*',\r\n        relevance: 0\r\n      },\r\n      { /* don't color identifiers, but safely catch all identifiers with '*/\r\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*'\r\n      },\r\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\r\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\r\n      {\r\n        className: 'number',\r\n        begin:\r\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\r\n          '0[oO][0-7_]+[Lln]?|' +\r\n          '0[bB][01_]+[Lln]?|' +\r\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: /[-=]>/ // relevance booster\r\n      }\r\n    ]\r\n  };\r\n};"]},"metadata":{},"sourceType":"script"}