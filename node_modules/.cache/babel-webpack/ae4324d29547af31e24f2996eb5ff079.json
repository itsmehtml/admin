{"ast":null,"code":"/**\r\n * The algoritm is learnt from\r\n * https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\r\n * And we made some optimization for matrix inversion.\r\n * Other similar approaches:\r\n * \"cv::getPerspectiveTransform\", \"Direct Linear Transformation\".\r\n */\nvar LN2 = Math.log(2);\n\nfunction determinant(rows, rank, rowStart, rowMask, colMask, detCache) {\n  var cacheKey = rowMask + '-' + colMask;\n  var fullRank = rows.length;\n\n  if (detCache.hasOwnProperty(cacheKey)) {\n    return detCache[cacheKey];\n  }\n\n  if (rank === 1) {\n    // In this case the colMask must be like: `11101111`. We can find the place of `0`.\n    var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);\n    return rows[rowStart][colStart];\n  }\n\n  var subRowMask = rowMask | 1 << rowStart;\n  var subRowStart = rowStart + 1;\n\n  while (rowMask & 1 << subRowStart) {\n    subRowStart++;\n  }\n\n  var sum = 0;\n\n  for (var j = 0, colLocalIdx = 0; j < fullRank; j++) {\n    var colTag = 1 << j;\n\n    if (!(colTag & colMask)) {\n      sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] // det(subMatrix(0, j))\n      * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);\n      colLocalIdx++;\n    }\n  }\n\n  detCache[cacheKey] = sum;\n  return sum;\n}\n/**\r\n * Usage:\r\n * ```js\r\n * var transformer = buildTransformer(\r\n *     [10, 44, 100, 44, 100, 300, 10, 300],\r\n *     [50, 54, 130, 14, 140, 330, 14, 220]\r\n * );\r\n * var out = [];\r\n * transformer && transformer([11, 33], out);\r\n * ```\r\n *\r\n * Notice: `buildTransformer` may take more than 10ms in some Android device.\r\n *\r\n * @param {Array.<number>} src source four points, [x0, y0, x1, y1, x2, y2, x3, y3]\r\n * @param {Array.<number>} dest destination four points, [x0, y0, x1, y1, x2, y2, x3, y3]\r\n * @return {Function} transformer If fail, return null/undefined.\r\n */\n\n\nfunction buildTransformer(src, dest) {\n  var mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];\n  var detCache = {};\n  var det = determinant(mA, 8, 0, 0, 0, detCache);\n\n  if (det === 0) {\n    return;\n  } // `invert(mA) * dest`, that is, `adj(mA) / det * dest`.\n\n\n  var vh = [];\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      vh[j] == null && (vh[j] = 0);\n      vh[j] += ((i + j) % 2 ? -1 : 1) * // det(subMatrix(i, j))\n      determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];\n    }\n  }\n\n  return function (out, srcPointX, srcPointY) {\n    var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;\n    out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;\n    out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;\n  };\n}\n\nexports.buildTransformer = buildTransformer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/zrender/lib/core/fourPointsTransform.js"],"names":["LN2","Math","log","determinant","rows","rank","rowStart","rowMask","colMask","detCache","cacheKey","fullRank","length","hasOwnProperty","colStart","round","subRowMask","subRowStart","sum","j","colLocalIdx","colTag","buildTransformer","src","dest","mA","det","vh","i","out","srcPointX","srcPointY","pk","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,CAAV;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,OAA3C,EAAoDC,OAApD,EAA6DC,QAA7D,EAAuE;AACrE,MAAIC,QAAQ,GAAGH,OAAO,GAAG,GAAV,GAAgBC,OAA/B;AACA,MAAIG,QAAQ,GAAGP,IAAI,CAACQ,MAApB;;AAEA,MAAIH,QAAQ,CAACI,cAAT,CAAwBH,QAAxB,CAAJ,EAAuC;AACrC,WAAOD,QAAQ,CAACC,QAAD,CAAf;AACD;;AAED,MAAIL,IAAI,KAAK,CAAb,EAAgB;AACd;AACA,QAAIS,QAAQ,GAAGb,IAAI,CAACc,KAAL,CAAWd,IAAI,CAACC,GAAL,CAAS,CAAC,KAAKS,QAAN,IAAkB,CAAlB,GAAsB,CAACH,OAAhC,IAA2CR,GAAtD,CAAf;AACA,WAAOI,IAAI,CAACE,QAAD,CAAJ,CAAeQ,QAAf,CAAP;AACD;;AAED,MAAIE,UAAU,GAAGT,OAAO,GAAG,KAAKD,QAAhC;AACA,MAAIW,WAAW,GAAGX,QAAQ,GAAG,CAA7B;;AAEA,SAAOC,OAAO,GAAG,KAAKU,WAAtB,EAAmC;AACjCA,IAAAA,WAAW;AACZ;;AAED,MAAIC,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,WAAW,GAAG,CAA9B,EAAiCD,CAAC,GAAGR,QAArC,EAA+CQ,CAAC,EAAhD,EAAoD;AAClD,QAAIE,MAAM,GAAG,KAAKF,CAAlB;;AAEA,QAAI,EAAEE,MAAM,GAAGb,OAAX,CAAJ,EAAyB;AACvBU,MAAAA,GAAG,IAAI,CAACE,WAAW,GAAG,CAAd,GAAkB,CAAC,CAAnB,GAAuB,CAAxB,IAA6BhB,IAAI,CAACE,QAAD,CAAJ,CAAea,CAAf,CAA7B,CAA+C;AAA/C,QACLhB,WAAW,CAACC,IAAD,EAAOC,IAAI,GAAG,CAAd,EAAiBY,WAAjB,EAA8BD,UAA9B,EAA0CR,OAAO,GAAGa,MAApD,EAA4DZ,QAA5D,CADb;AAEAW,MAAAA,WAAW;AACZ;AACF;;AAEDX,EAAAA,QAAQ,CAACC,QAAD,CAAR,GAAqBQ,GAArB;AACA,SAAOA,GAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASI,gBAAT,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,EAAE,GAAG,CAAC,CAACF,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAAD,EAAqE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUA,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAArE,EAAyI,CAACA,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAAzI,EAA6M,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUA,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAA7M,EAAiR,CAACA,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAAjR,EAAqV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUA,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAArV,EAAyZ,CAACA,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAAzZ,EAA6d,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUA,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,EAA0B,CAA1B,EAA6B,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA3C,EAAgD,CAACC,IAAI,CAAC,CAAD,CAAL,GAAWD,GAAG,CAAC,CAAD,CAA9D,CAA7d,CAAT;AACA,MAAId,QAAQ,GAAG,EAAf;AACA,MAAIiB,GAAG,GAAGvB,WAAW,CAACsB,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiBhB,QAAjB,CAArB;;AAEA,MAAIiB,GAAG,KAAK,CAAZ,EAAe;AACb;AACD,GAPkC,CAOjC;;;AAGF,MAAIC,EAAE,GAAG,EAAT;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BQ,MAAAA,EAAE,CAACR,CAAD,CAAF,IAAS,IAAT,KAAkBQ,EAAE,CAACR,CAAD,CAAF,GAAQ,CAA1B;AACAQ,MAAAA,EAAE,CAACR,CAAD,CAAF,IAAS,CAAC,CAACS,CAAC,GAAGT,CAAL,IAAU,CAAV,GAAc,CAAC,CAAf,GAAmB,CAApB,IAAyB;AAClChB,MAAAA,WAAW,CAACsB,EAAD,EAAK,CAAL,EAAQG,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAAtB,EAAyB,KAAKA,CAA9B,EAAiC,KAAKT,CAAtC,EAAyCV,QAAzC,CADF,GACuDiB,GADvD,GAC6DF,IAAI,CAACI,CAAD,CAD1E;AAED;AACF;;AAED,SAAO,UAAUC,GAAV,EAAeC,SAAf,EAA0BC,SAA1B,EAAqC;AAC1C,QAAIC,EAAE,GAAGF,SAAS,GAAGH,EAAE,CAAC,CAAD,CAAd,GAAoBI,SAAS,GAAGJ,EAAE,CAAC,CAAD,CAAlC,GAAwC,CAAjD;AACAE,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACC,SAAS,GAAGH,EAAE,CAAC,CAAD,CAAd,GAAoBI,SAAS,GAAGJ,EAAE,CAAC,CAAD,CAAlC,GAAwCA,EAAE,CAAC,CAAD,CAA3C,IAAkDK,EAA3D;AACAH,IAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACC,SAAS,GAAGH,EAAE,CAAC,CAAD,CAAd,GAAoBI,SAAS,GAAGJ,EAAE,CAAC,CAAD,CAAlC,GAAwCA,EAAE,CAAC,CAAD,CAA3C,IAAkDK,EAA3D;AACD,GAJD;AAKD;;AAEDC,OAAO,CAACX,gBAAR,GAA2BA,gBAA3B","sourcesContent":["/**\r\n * The algoritm is learnt from\r\n * https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\r\n * And we made some optimization for matrix inversion.\r\n * Other similar approaches:\r\n * \"cv::getPerspectiveTransform\", \"Direct Linear Transformation\".\r\n */\r\nvar LN2 = Math.log(2);\r\n\r\nfunction determinant(rows, rank, rowStart, rowMask, colMask, detCache) {\r\n  var cacheKey = rowMask + '-' + colMask;\r\n  var fullRank = rows.length;\r\n\r\n  if (detCache.hasOwnProperty(cacheKey)) {\r\n    return detCache[cacheKey];\r\n  }\r\n\r\n  if (rank === 1) {\r\n    // In this case the colMask must be like: `11101111`. We can find the place of `0`.\r\n    var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);\r\n    return rows[rowStart][colStart];\r\n  }\r\n\r\n  var subRowMask = rowMask | 1 << rowStart;\r\n  var subRowStart = rowStart + 1;\r\n\r\n  while (rowMask & 1 << subRowStart) {\r\n    subRowStart++;\r\n  }\r\n\r\n  var sum = 0;\r\n\r\n  for (var j = 0, colLocalIdx = 0; j < fullRank; j++) {\r\n    var colTag = 1 << j;\r\n\r\n    if (!(colTag & colMask)) {\r\n      sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] // det(subMatrix(0, j))\r\n      * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);\r\n      colLocalIdx++;\r\n    }\r\n  }\r\n\r\n  detCache[cacheKey] = sum;\r\n  return sum;\r\n}\r\n/**\r\n * Usage:\r\n * ```js\r\n * var transformer = buildTransformer(\r\n *     [10, 44, 100, 44, 100, 300, 10, 300],\r\n *     [50, 54, 130, 14, 140, 330, 14, 220]\r\n * );\r\n * var out = [];\r\n * transformer && transformer([11, 33], out);\r\n * ```\r\n *\r\n * Notice: `buildTransformer` may take more than 10ms in some Android device.\r\n *\r\n * @param {Array.<number>} src source four points, [x0, y0, x1, y1, x2, y2, x3, y3]\r\n * @param {Array.<number>} dest destination four points, [x0, y0, x1, y1, x2, y2, x3, y3]\r\n * @return {Function} transformer If fail, return null/undefined.\r\n */\r\n\r\n\r\nfunction buildTransformer(src, dest) {\r\n  var mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];\r\n  var detCache = {};\r\n  var det = determinant(mA, 8, 0, 0, 0, detCache);\r\n\r\n  if (det === 0) {\r\n    return;\r\n  } // `invert(mA) * dest`, that is, `adj(mA) / det * dest`.\r\n\r\n\r\n  var vh = [];\r\n\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 0; j < 8; j++) {\r\n      vh[j] == null && (vh[j] = 0);\r\n      vh[j] += ((i + j) % 2 ? -1 : 1) * // det(subMatrix(i, j))\r\n      determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];\r\n    }\r\n  }\r\n\r\n  return function (out, srcPointX, srcPointY) {\r\n    var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;\r\n    out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;\r\n    out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;\r\n  };\r\n}\r\n\r\nexports.buildTransformer = buildTransformer;"]},"metadata":{},"sourceType":"script"}