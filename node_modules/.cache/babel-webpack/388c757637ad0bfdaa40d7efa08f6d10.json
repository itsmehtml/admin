{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar Model = require(\"../../model/Model\");\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\nvar SankeySeries = SeriesModel.extend({\n  type: 'series.sankey',\n  layoutInfo: null,\n  levelModels: null,\n\n  /**\r\n   * Init a graph data structure from data in option series\r\n   *\r\n   * @param  {Object} option  the object used to config echarts view\r\n   * @return {module:echarts/data/List} storage initial data\r\n   */\n  getInitialData: function getInitialData(option, ecModel) {\n    var links = option.edges || option.links;\n    var nodes = option.data || option.nodes;\n    var levels = option.levels;\n    var levelModels = this.levelModels = {};\n\n    for (var i = 0; i < levels.length; i++) {\n      if (levels[i].depth != null && levels[i].depth >= 0) {\n        levelModels[levels[i].depth] = new Model(levels[i], this, ecModel);\n      } else {}\n    }\n\n    if (nodes && links) {\n      var graph = createGraphFromNodeEdge(nodes, links, this, true, beforeLink);\n      return graph.data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        model.customizeGetParent(function (path) {\n          var parentModel = this.parentModel;\n          var nodeDepth = parentModel.getData().getItemLayout(idx).depth;\n          var levelModel = parentModel.levelModels[nodeDepth];\n          return levelModel || this.parentModel;\n        });\n        return model;\n      });\n      edgeData.wrapMethod('getItemModel', function (model, idx) {\n        model.customizeGetParent(function (path) {\n          var parentModel = this.parentModel;\n          var edge = parentModel.getGraph().getEdgeByIndex(idx);\n          var depth = edge.node1.getLayout().depth;\n          var levelModel = parentModel.levelModels[depth];\n          return levelModel || this.parentModel;\n        });\n        return model;\n      });\n    }\n  },\n  setNodePosition: function setNodePosition(dataIndex, localPosition) {\n    var dataItem = this.option.data[dataIndex];\n    dataItem.localX = localPosition[0];\n    dataItem.localY = localPosition[1];\n  },\n\n  /**\r\n   * Return the graphic data structure\r\n   *\r\n   * @return {module:echarts/data/Graph} graphic data structure\r\n   */\n  getGraph: function getGraph() {\n    return this.getData().graph;\n  },\n\n  /**\r\n   * Get edge data of graphic data structure\r\n   *\r\n   * @return {module:echarts/data/List} data structure of list\r\n   */\n  getEdgeData: function getEdgeData() {\n    return this.getGraph().edgeData;\n  },\n\n  /**\r\n   * @override\r\n   */\n  formatTooltip: function formatTooltip(dataIndex, multipleSeries, dataType) {\n    // dataType === 'node' or empty do not show tooltip by default\n    if (dataType === 'edge') {\n      var params = this.getDataParams(dataIndex, dataType);\n      var rawDataOpt = params.data;\n      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\n\n      if (params.value) {\n        html += ' : ' + params.value;\n      }\n\n      return encodeHTML(html);\n    } else if (dataType === 'node') {\n      var node = this.getGraph().getNodeByIndex(dataIndex);\n      var value = node.getLayout().value;\n      var name = this.getDataParams(dataIndex, dataType).data.name;\n\n      if (value) {\n        var html = name + ' : ' + value;\n      }\n\n      return encodeHTML(html);\n    }\n\n    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\n  },\n  optionUpdated: function optionUpdated() {\n    var option = this.option;\n\n    if (option.focusNodeAdjacency === true) {\n      option.focusNodeAdjacency = 'allEdges';\n    }\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    layout: null,\n    // The position of the whole view\n    left: '5%',\n    top: '5%',\n    right: '20%',\n    bottom: '5%',\n    // Value can be 'vertical'\n    orient: 'horizontal',\n    // The dx of the node\n    nodeWidth: 20,\n    // The vertical distance between two nodes\n    nodeGap: 8,\n    // Control if the node can move or not\n    draggable: true,\n    // Value can be 'inEdges', 'outEdges', 'allEdges', true (the same as 'allEdges').\n    focusNodeAdjacency: false,\n    // The number of iterations to change the position of the node\n    layoutIterations: 32,\n    label: {\n      show: true,\n      position: 'right',\n      color: '#000',\n      fontSize: 12\n    },\n    levels: [],\n    // Value can be 'left' or 'right'\n    nodeAlign: 'justify',\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: '#333'\n    },\n    lineStyle: {\n      color: '#314656',\n      opacity: 0.2,\n      curveness: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      },\n      lineStyle: {\n        opacity: 0.6\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 1000\n  }\n});\nvar _default = SankeySeries;\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/sankey/SankeySeries.js"],"names":["SeriesModel","require","createGraphFromNodeEdge","_format","encodeHTML","Model","_config","__DEV__","SankeySeries","extend","type","layoutInfo","levelModels","getInitialData","option","ecModel","links","edges","nodes","data","levels","i","length","depth","graph","beforeLink","nodeData","edgeData","wrapMethod","model","idx","customizeGetParent","path","parentModel","nodeDepth","getData","getItemLayout","levelModel","edge","getGraph","getEdgeByIndex","node1","getLayout","setNodePosition","dataIndex","localPosition","dataItem","localX","localY","getEdgeData","formatTooltip","multipleSeries","dataType","params","getDataParams","rawDataOpt","html","source","target","value","node","getNodeByIndex","name","superCall","optionUpdated","focusNodeAdjacency","defaultOption","zlevel","z","coordinateSystem","layout","left","top","right","bottom","orient","nodeWidth","nodeGap","draggable","layoutIterations","label","show","position","color","fontSize","nodeAlign","itemStyle","borderWidth","borderColor","lineStyle","opacity","curveness","emphasis","animationEasing","animationDuration","_default","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar SeriesModel = require(\"../../model/Series\");\r\n\r\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\r\n\r\nvar _format = require(\"../../util/format\");\r\n\r\nvar encodeHTML = _format.encodeHTML;\r\n\r\nvar Model = require(\"../../model/Model\");\r\n\r\nvar _config = require(\"../../config\");\r\n\r\nvar __DEV__ = _config.__DEV__;\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nvar SankeySeries = SeriesModel.extend({\r\n  type: 'series.sankey',\r\n  layoutInfo: null,\r\n  levelModels: null,\r\n\r\n  /**\r\n   * Init a graph data structure from data in option series\r\n   *\r\n   * @param  {Object} option  the object used to config echarts view\r\n   * @return {module:echarts/data/List} storage initial data\r\n   */\r\n  getInitialData: function (option, ecModel) {\r\n    var links = option.edges || option.links;\r\n    var nodes = option.data || option.nodes;\r\n    var levels = option.levels;\r\n    var levelModels = this.levelModels = {};\r\n\r\n    for (var i = 0; i < levels.length; i++) {\r\n      if (levels[i].depth != null && levels[i].depth >= 0) {\r\n        levelModels[levels[i].depth] = new Model(levels[i], this, ecModel);\r\n      } else {}\r\n    }\r\n\r\n    if (nodes && links) {\r\n      var graph = createGraphFromNodeEdge(nodes, links, this, true, beforeLink);\r\n      return graph.data;\r\n    }\r\n\r\n    function beforeLink(nodeData, edgeData) {\r\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\r\n        model.customizeGetParent(function (path) {\r\n          var parentModel = this.parentModel;\r\n          var nodeDepth = parentModel.getData().getItemLayout(idx).depth;\r\n          var levelModel = parentModel.levelModels[nodeDepth];\r\n          return levelModel || this.parentModel;\r\n        });\r\n        return model;\r\n      });\r\n      edgeData.wrapMethod('getItemModel', function (model, idx) {\r\n        model.customizeGetParent(function (path) {\r\n          var parentModel = this.parentModel;\r\n          var edge = parentModel.getGraph().getEdgeByIndex(idx);\r\n          var depth = edge.node1.getLayout().depth;\r\n          var levelModel = parentModel.levelModels[depth];\r\n          return levelModel || this.parentModel;\r\n        });\r\n        return model;\r\n      });\r\n    }\r\n  },\r\n  setNodePosition: function (dataIndex, localPosition) {\r\n    var dataItem = this.option.data[dataIndex];\r\n    dataItem.localX = localPosition[0];\r\n    dataItem.localY = localPosition[1];\r\n  },\r\n\r\n  /**\r\n   * Return the graphic data structure\r\n   *\r\n   * @return {module:echarts/data/Graph} graphic data structure\r\n   */\r\n  getGraph: function () {\r\n    return this.getData().graph;\r\n  },\r\n\r\n  /**\r\n   * Get edge data of graphic data structure\r\n   *\r\n   * @return {module:echarts/data/List} data structure of list\r\n   */\r\n  getEdgeData: function () {\r\n    return this.getGraph().edgeData;\r\n  },\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\r\n    // dataType === 'node' or empty do not show tooltip by default\r\n    if (dataType === 'edge') {\r\n      var params = this.getDataParams(dataIndex, dataType);\r\n      var rawDataOpt = params.data;\r\n      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\r\n\r\n      if (params.value) {\r\n        html += ' : ' + params.value;\r\n      }\r\n\r\n      return encodeHTML(html);\r\n    } else if (dataType === 'node') {\r\n      var node = this.getGraph().getNodeByIndex(dataIndex);\r\n      var value = node.getLayout().value;\r\n      var name = this.getDataParams(dataIndex, dataType).data.name;\r\n\r\n      if (value) {\r\n        var html = name + ' : ' + value;\r\n      }\r\n\r\n      return encodeHTML(html);\r\n    }\r\n\r\n    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\r\n  },\r\n  optionUpdated: function () {\r\n    var option = this.option;\r\n\r\n    if (option.focusNodeAdjacency === true) {\r\n      option.focusNodeAdjacency = 'allEdges';\r\n    }\r\n  },\r\n  defaultOption: {\r\n    zlevel: 0,\r\n    z: 2,\r\n    coordinateSystem: 'view',\r\n    layout: null,\r\n    // The position of the whole view\r\n    left: '5%',\r\n    top: '5%',\r\n    right: '20%',\r\n    bottom: '5%',\r\n    // Value can be 'vertical'\r\n    orient: 'horizontal',\r\n    // The dx of the node\r\n    nodeWidth: 20,\r\n    // The vertical distance between two nodes\r\n    nodeGap: 8,\r\n    // Control if the node can move or not\r\n    draggable: true,\r\n    // Value can be 'inEdges', 'outEdges', 'allEdges', true (the same as 'allEdges').\r\n    focusNodeAdjacency: false,\r\n    // The number of iterations to change the position of the node\r\n    layoutIterations: 32,\r\n    label: {\r\n      show: true,\r\n      position: 'right',\r\n      color: '#000',\r\n      fontSize: 12\r\n    },\r\n    levels: [],\r\n    // Value can be 'left' or 'right'\r\n    nodeAlign: 'justify',\r\n    itemStyle: {\r\n      borderWidth: 1,\r\n      borderColor: '#333'\r\n    },\r\n    lineStyle: {\r\n      color: '#314656',\r\n      opacity: 0.2,\r\n      curveness: 0.5\r\n    },\r\n    emphasis: {\r\n      label: {\r\n        show: true\r\n      },\r\n      lineStyle: {\r\n        opacity: 0.6\r\n      }\r\n    },\r\n    animationEasing: 'linear',\r\n    animationDuration: 1000\r\n  }\r\n});\r\nvar _default = SankeySeries;\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}