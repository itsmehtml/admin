{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar createRenderPlanner = require(\"../helper/createRenderPlanner\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/* global Float32Array */\n\n\nvar _default = {\n  seriesType: 'lines',\n  plan: createRenderPlanner(),\n  reset: function reset(seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var isPolyline = seriesModel.get('polyline');\n    var isLarge = seriesModel.pipelineContext.large;\n\n    function progress(params, lineData) {\n      var lineCoords = [];\n\n      if (isLarge) {\n        var points;\n        var segCount = params.end - params.start;\n\n        if (isPolyline) {\n          var totalCoordsCount = 0;\n\n          for (var i = params.start; i < params.end; i++) {\n            totalCoordsCount += seriesModel.getLineCoordsCount(i);\n          }\n\n          points = new Float32Array(segCount + totalCoordsCount * 2);\n        } else {\n          points = new Float32Array(segCount * 4);\n        }\n\n        var offset = 0;\n        var pt = [];\n\n        for (var i = params.start; i < params.end; i++) {\n          var len = seriesModel.getLineCoords(i, lineCoords);\n\n          if (isPolyline) {\n            points[offset++] = len;\n          }\n\n          for (var k = 0; k < len; k++) {\n            pt = coordSys.dataToPoint(lineCoords[k], false, pt);\n            points[offset++] = pt[0];\n            points[offset++] = pt[1];\n          }\n        }\n\n        lineData.setLayout('linesPoints', points);\n      } else {\n        for (var i = params.start; i < params.end; i++) {\n          var itemModel = lineData.getItemModel(i);\n          var len = seriesModel.getLineCoords(i, lineCoords);\n          var pts = [];\n\n          if (isPolyline) {\n            for (var j = 0; j < len; j++) {\n              pts.push(coordSys.dataToPoint(lineCoords[j]));\n            }\n          } else {\n            pts[0] = coordSys.dataToPoint(lineCoords[0]);\n            pts[1] = coordSys.dataToPoint(lineCoords[1]);\n            var curveness = itemModel.get('lineStyle.curveness');\n\n            if (+curveness) {\n              pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];\n            }\n          }\n\n          lineData.setItemLayout(i, pts);\n        }\n      }\n    }\n\n    return {\n      progress: progress\n    };\n  }\n};\nmodule.exports = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/lines/linesLayout.js"],"names":["createRenderPlanner","require","_default","seriesType","plan","reset","seriesModel","coordSys","coordinateSystem","isPolyline","get","isLarge","pipelineContext","large","progress","params","lineData","lineCoords","points","segCount","end","start","totalCoordsCount","i","getLineCoordsCount","Float32Array","offset","pt","len","getLineCoords","k","dataToPoint","setLayout","itemModel","getItemModel","pts","j","push","curveness","setItemLayout","module","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar createRenderPlanner = require(\"../helper/createRenderPlanner\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/* global Float32Array */\r\nvar _default = {\r\n  seriesType: 'lines',\r\n  plan: createRenderPlanner(),\r\n  reset: function (seriesModel) {\r\n    var coordSys = seriesModel.coordinateSystem;\r\n    var isPolyline = seriesModel.get('polyline');\r\n    var isLarge = seriesModel.pipelineContext.large;\r\n\r\n    function progress(params, lineData) {\r\n      var lineCoords = [];\r\n\r\n      if (isLarge) {\r\n        var points;\r\n        var segCount = params.end - params.start;\r\n\r\n        if (isPolyline) {\r\n          var totalCoordsCount = 0;\r\n\r\n          for (var i = params.start; i < params.end; i++) {\r\n            totalCoordsCount += seriesModel.getLineCoordsCount(i);\r\n          }\r\n\r\n          points = new Float32Array(segCount + totalCoordsCount * 2);\r\n        } else {\r\n          points = new Float32Array(segCount * 4);\r\n        }\r\n\r\n        var offset = 0;\r\n        var pt = [];\r\n\r\n        for (var i = params.start; i < params.end; i++) {\r\n          var len = seriesModel.getLineCoords(i, lineCoords);\r\n\r\n          if (isPolyline) {\r\n            points[offset++] = len;\r\n          }\r\n\r\n          for (var k = 0; k < len; k++) {\r\n            pt = coordSys.dataToPoint(lineCoords[k], false, pt);\r\n            points[offset++] = pt[0];\r\n            points[offset++] = pt[1];\r\n          }\r\n        }\r\n\r\n        lineData.setLayout('linesPoints', points);\r\n      } else {\r\n        for (var i = params.start; i < params.end; i++) {\r\n          var itemModel = lineData.getItemModel(i);\r\n          var len = seriesModel.getLineCoords(i, lineCoords);\r\n          var pts = [];\r\n\r\n          if (isPolyline) {\r\n            for (var j = 0; j < len; j++) {\r\n              pts.push(coordSys.dataToPoint(lineCoords[j]));\r\n            }\r\n          } else {\r\n            pts[0] = coordSys.dataToPoint(lineCoords[0]);\r\n            pts[1] = coordSys.dataToPoint(lineCoords[1]);\r\n            var curveness = itemModel.get('lineStyle.curveness');\r\n\r\n            if (+curveness) {\r\n              pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];\r\n            }\r\n          }\r\n\r\n          lineData.setItemLayout(i, pts);\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      progress: progress\r\n    };\r\n  }\r\n};\r\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}