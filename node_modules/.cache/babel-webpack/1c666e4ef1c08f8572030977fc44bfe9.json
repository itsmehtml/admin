{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nvar layout = require(\"../../util/layout\");\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/*\r\n* A third-party license is embeded for some of the code in this file:\r\n* The tree layoutHelper implementation was originally copied from\r\n* \"d3.js\"(https://github.com/d3/d3-hierarchy) with\r\n* some modifications made for this project.\r\n* (see more details in the comment of the specific method below.)\r\n* The use of the source code of this file is also subject to the terms\r\n* and consitions of the licence of \"d3.js\" (BSD-3Clause, see\r\n* </licenses/LICENSE-d3>).\r\n*/\n\n/**\r\n * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing\r\n *       the tree.\r\n */\n\n/**\r\n * Initialize all computational message for following algorithm.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} root   The virtual root of the tree.\r\n */\n\n\nfunction init(root) {\n  root.hierNode = {\n    defaultAncestor: null,\n    ancestor: root,\n    prelim: 0,\n    modifier: 0,\n    change: 0,\n    shift: 0,\n    i: 0,\n    thread: null\n  };\n  var nodes = [root];\n  var node;\n  var children;\n\n  while (node = nodes.pop()) {\n    // jshint ignore:line\n    children = node.children;\n\n    if (node.isExpand && children.length) {\n      var n = children.length;\n\n      for (var i = n - 1; i >= 0; i--) {\n        var child = children[i];\n        child.hierNode = {\n          defaultAncestor: null,\n          ancestor: child,\n          prelim: 0,\n          modifier: 0,\n          change: 0,\n          shift: 0,\n          i: i,\n          thread: null\n        };\n        nodes.push(child);\n      }\n    }\n  }\n}\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * Computes a preliminary x coordinate for node. Before that, this function is\r\n * applied recursively to the children of node, as well as the function\r\n * apportion(). After spacing out the children by calling executeShifts(), the\r\n * node is placed to the midpoint of its outermost children.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @param {Function} separation\r\n */\n\n\nfunction firstWalk(node, separation) {\n  var children = node.isExpand ? node.children : [];\n  var siblings = node.parentNode.children;\n  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;\n\n  if (children.length) {\n    executeShifts(node);\n    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;\n\n    if (subtreeW) {\n      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n      node.hierNode.modifier = node.hierNode.prelim - midPoint;\n    } else {\n      node.hierNode.prelim = midPoint;\n    }\n  } else if (subtreeW) {\n    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n  }\n\n  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);\n}\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * Computes all real x-coordinates by summing up the modifiers recursively.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n */\n\n\nfunction secondWalk(node) {\n  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;\n  node.setLayout({\n    x: nodeX\n  }, true);\n  node.hierNode.modifier += node.parentNode.hierNode.modifier;\n}\n\nfunction separation(cb) {\n  return arguments.length ? cb : defaultSeparation;\n}\n/**\r\n * Transform the common coordinate to radial coordinate.\r\n *\r\n * @param  {number} x\r\n * @param  {number} y\r\n * @return {Object}\r\n */\n\n\nfunction radialCoordinate(x, y) {\n  var radialCoor = {};\n  x -= Math.PI / 2;\n  radialCoor.x = y * Math.cos(x);\n  radialCoor.y = y * Math.sin(x);\n  return radialCoor;\n}\n/**\r\n * Get the layout position of the whole view.\r\n *\r\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\r\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\r\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\r\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n/**\r\n * All other shifts, applied to the smaller subtrees between w- and w+, are\r\n * performed by this function.\r\n *\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n */\n\n\nfunction executeShifts(node) {\n  var children = node.children;\n  var n = children.length;\n  var shift = 0;\n  var change = 0;\n\n  while (--n >= 0) {\n    var child = children[n];\n    child.hierNode.prelim += shift;\n    child.hierNode.modifier += shift;\n    change += child.hierNode.change;\n    shift += child.hierNode.shift + change;\n  }\n}\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * The core of the algorithm. Here, a new subtree is combined with the\r\n * previous subtrees. Threads are used to traverse the inside and outside\r\n * contours of the left and right subtree up to the highest common level.\r\n * Whenever two nodes of the inside contours conflict, we compute the left\r\n * one of the greatest uncommon ancestors using the function nextAncestor()\r\n * and call moveSubtree() to shift the subtree and prepare the shifts of\r\n * smaller subtrees. Finally, we add a new thread (if necessary).\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} subtreeV\r\n * @param  {module:echarts/data/Tree~TreeNode} subtreeW\r\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\r\n * @param  {Function} separation\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\n\n\nfunction apportion(subtreeV, subtreeW, ancestor, separation) {\n  if (subtreeW) {\n    var nodeOutRight = subtreeV;\n    var nodeInRight = subtreeV;\n    var nodeOutLeft = nodeInRight.parentNode.children[0];\n    var nodeInLeft = subtreeW;\n    var sumOutRight = nodeOutRight.hierNode.modifier;\n    var sumInRight = nodeInRight.hierNode.modifier;\n    var sumOutLeft = nodeOutLeft.hierNode.modifier;\n    var sumInLeft = nodeInLeft.hierNode.modifier;\n\n    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {\n      nodeOutRight = nextRight(nodeOutRight);\n      nodeOutLeft = nextLeft(nodeOutLeft);\n      nodeOutRight.hierNode.ancestor = subtreeV;\n      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);\n\n      if (shift > 0) {\n        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);\n        sumInRight += shift;\n        sumOutRight += shift;\n      }\n\n      sumInLeft += nodeInLeft.hierNode.modifier;\n      sumInRight += nodeInRight.hierNode.modifier;\n      sumOutRight += nodeOutRight.hierNode.modifier;\n      sumOutLeft += nodeOutLeft.hierNode.modifier;\n    }\n\n    if (nodeInLeft && !nextRight(nodeOutRight)) {\n      nodeOutRight.hierNode.thread = nodeInLeft;\n      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;\n    }\n\n    if (nodeInRight && !nextLeft(nodeOutLeft)) {\n      nodeOutLeft.hierNode.thread = nodeInRight;\n      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;\n      ancestor = subtreeV;\n    }\n  }\n\n  return ancestor;\n}\n/**\r\n * This function is used to traverse the right contour of a subtree.\r\n * It returns the rightmost child of node or the thread of node. The function\r\n * returns null if and only if node is on the highest depth of its subtree.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\n\n\nfunction nextRight(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;\n}\n/**\r\n * This function is used to traverse the left contour of a subtree (or a subforest).\r\n * It returns the leftmost child of node or the thread of node. The function\r\n * returns null if and only if node is on the highest depth of its subtree.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\n\n\nfunction nextLeft(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[0] : node.hierNode.thread;\n}\n/**\r\n * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.\r\n * Otherwise, returns the specified ancestor.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} nodeInLeft\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\n\n\nfunction nextAncestor(nodeInLeft, node, ancestor) {\n  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;\n}\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * Shifts the current subtree rooted at wr.\r\n * This is done by increasing prelim(w+) and modifier(w+) by shift.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} wl\r\n * @param  {module:echarts/data/Tree~TreeNode} wr\r\n * @param  {number} shift [description]\r\n */\n\n\nfunction moveSubtree(wl, wr, shift) {\n  var change = shift / (wr.hierNode.i - wl.hierNode.i);\n  wr.hierNode.change -= change;\n  wr.hierNode.shift += shift;\n  wr.hierNode.modifier += shift;\n  wr.hierNode.prelim += shift;\n  wl.hierNode.change += change;\n}\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n */\n\n\nfunction defaultSeparation(node1, node2) {\n  return node1.parentNode === node2.parentNode ? 1 : 2;\n}\n\nexports.init = init;\nexports.firstWalk = firstWalk;\nexports.secondWalk = secondWalk;\nexports.separation = separation;\nexports.radialCoordinate = radialCoordinate;\nexports.getViewRect = getViewRect;","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/echarts/lib/chart/tree/layoutHelper.js"],"names":["layout","require","init","root","hierNode","defaultAncestor","ancestor","prelim","modifier","change","shift","i","thread","nodes","node","children","pop","isExpand","length","n","child","push","firstWalk","separation","siblings","parentNode","subtreeW","executeShifts","midPoint","apportion","secondWalk","nodeX","setLayout","x","cb","arguments","defaultSeparation","radialCoordinate","y","radialCoor","Math","PI","cos","sin","getViewRect","seriesModel","api","getLayoutRect","getBoxLayoutParams","width","getWidth","height","getHeight","subtreeV","nodeOutRight","nodeInRight","nodeOutLeft","nodeInLeft","sumOutRight","sumInRight","sumOutLeft","sumInLeft","nextRight","nextLeft","moveSubtree","nextAncestor","wl","wr","node1","node2","exports"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\nvar layout = require(\"../../util/layout\");\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n/*\r\n* A third-party license is embeded for some of the code in this file:\r\n* The tree layoutHelper implementation was originally copied from\r\n* \"d3.js\"(https://github.com/d3/d3-hierarchy) with\r\n* some modifications made for this project.\r\n* (see more details in the comment of the specific method below.)\r\n* The use of the source code of this file is also subject to the terms\r\n* and consitions of the licence of \"d3.js\" (BSD-3Clause, see\r\n* </licenses/LICENSE-d3>).\r\n*/\r\n\r\n/**\r\n * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing\r\n *       the tree.\r\n */\r\n\r\n/**\r\n * Initialize all computational message for following algorithm.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} root   The virtual root of the tree.\r\n */\r\nfunction init(root) {\r\n  root.hierNode = {\r\n    defaultAncestor: null,\r\n    ancestor: root,\r\n    prelim: 0,\r\n    modifier: 0,\r\n    change: 0,\r\n    shift: 0,\r\n    i: 0,\r\n    thread: null\r\n  };\r\n  var nodes = [root];\r\n  var node;\r\n  var children;\r\n\r\n  while (node = nodes.pop()) {\r\n    // jshint ignore:line\r\n    children = node.children;\r\n\r\n    if (node.isExpand && children.length) {\r\n      var n = children.length;\r\n\r\n      for (var i = n - 1; i >= 0; i--) {\r\n        var child = children[i];\r\n        child.hierNode = {\r\n          defaultAncestor: null,\r\n          ancestor: child,\r\n          prelim: 0,\r\n          modifier: 0,\r\n          change: 0,\r\n          shift: 0,\r\n          i: i,\r\n          thread: null\r\n        };\r\n        nodes.push(child);\r\n      }\r\n    }\r\n  }\r\n}\r\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * Computes a preliminary x coordinate for node. Before that, this function is\r\n * applied recursively to the children of node, as well as the function\r\n * apportion(). After spacing out the children by calling executeShifts(), the\r\n * node is placed to the midpoint of its outermost children.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @param {Function} separation\r\n */\r\n\r\n\r\nfunction firstWalk(node, separation) {\r\n  var children = node.isExpand ? node.children : [];\r\n  var siblings = node.parentNode.children;\r\n  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;\r\n\r\n  if (children.length) {\r\n    executeShifts(node);\r\n    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;\r\n\r\n    if (subtreeW) {\r\n      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\r\n      node.hierNode.modifier = node.hierNode.prelim - midPoint;\r\n    } else {\r\n      node.hierNode.prelim = midPoint;\r\n    }\r\n  } else if (subtreeW) {\r\n    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\r\n  }\r\n\r\n  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);\r\n}\r\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * Computes all real x-coordinates by summing up the modifiers recursively.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n */\r\n\r\n\r\nfunction secondWalk(node) {\r\n  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;\r\n  node.setLayout({\r\n    x: nodeX\r\n  }, true);\r\n  node.hierNode.modifier += node.parentNode.hierNode.modifier;\r\n}\r\n\r\nfunction separation(cb) {\r\n  return arguments.length ? cb : defaultSeparation;\r\n}\r\n/**\r\n * Transform the common coordinate to radial coordinate.\r\n *\r\n * @param  {number} x\r\n * @param  {number} y\r\n * @return {Object}\r\n */\r\n\r\n\r\nfunction radialCoordinate(x, y) {\r\n  var radialCoor = {};\r\n  x -= Math.PI / 2;\r\n  radialCoor.x = y * Math.cos(x);\r\n  radialCoor.y = y * Math.sin(x);\r\n  return radialCoor;\r\n}\r\n/**\r\n * Get the layout position of the whole view.\r\n *\r\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\r\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\r\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\r\n */\r\n\r\n\r\nfunction getViewRect(seriesModel, api) {\r\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\r\n    width: api.getWidth(),\r\n    height: api.getHeight()\r\n  });\r\n}\r\n/**\r\n * All other shifts, applied to the smaller subtrees between w- and w+, are\r\n * performed by this function.\r\n *\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n */\r\n\r\n\r\nfunction executeShifts(node) {\r\n  var children = node.children;\r\n  var n = children.length;\r\n  var shift = 0;\r\n  var change = 0;\r\n\r\n  while (--n >= 0) {\r\n    var child = children[n];\r\n    child.hierNode.prelim += shift;\r\n    child.hierNode.modifier += shift;\r\n    change += child.hierNode.change;\r\n    shift += child.hierNode.shift + change;\r\n  }\r\n}\r\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * The core of the algorithm. Here, a new subtree is combined with the\r\n * previous subtrees. Threads are used to traverse the inside and outside\r\n * contours of the left and right subtree up to the highest common level.\r\n * Whenever two nodes of the inside contours conflict, we compute the left\r\n * one of the greatest uncommon ancestors using the function nextAncestor()\r\n * and call moveSubtree() to shift the subtree and prepare the shifts of\r\n * smaller subtrees. Finally, we add a new thread (if necessary).\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} subtreeV\r\n * @param  {module:echarts/data/Tree~TreeNode} subtreeW\r\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\r\n * @param  {Function} separation\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\r\n\r\n\r\nfunction apportion(subtreeV, subtreeW, ancestor, separation) {\r\n  if (subtreeW) {\r\n    var nodeOutRight = subtreeV;\r\n    var nodeInRight = subtreeV;\r\n    var nodeOutLeft = nodeInRight.parentNode.children[0];\r\n    var nodeInLeft = subtreeW;\r\n    var sumOutRight = nodeOutRight.hierNode.modifier;\r\n    var sumInRight = nodeInRight.hierNode.modifier;\r\n    var sumOutLeft = nodeOutLeft.hierNode.modifier;\r\n    var sumInLeft = nodeInLeft.hierNode.modifier;\r\n\r\n    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {\r\n      nodeOutRight = nextRight(nodeOutRight);\r\n      nodeOutLeft = nextLeft(nodeOutLeft);\r\n      nodeOutRight.hierNode.ancestor = subtreeV;\r\n      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);\r\n\r\n      if (shift > 0) {\r\n        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);\r\n        sumInRight += shift;\r\n        sumOutRight += shift;\r\n      }\r\n\r\n      sumInLeft += nodeInLeft.hierNode.modifier;\r\n      sumInRight += nodeInRight.hierNode.modifier;\r\n      sumOutRight += nodeOutRight.hierNode.modifier;\r\n      sumOutLeft += nodeOutLeft.hierNode.modifier;\r\n    }\r\n\r\n    if (nodeInLeft && !nextRight(nodeOutRight)) {\r\n      nodeOutRight.hierNode.thread = nodeInLeft;\r\n      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;\r\n    }\r\n\r\n    if (nodeInRight && !nextLeft(nodeOutLeft)) {\r\n      nodeOutLeft.hierNode.thread = nodeInRight;\r\n      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;\r\n      ancestor = subtreeV;\r\n    }\r\n  }\r\n\r\n  return ancestor;\r\n}\r\n/**\r\n * This function is used to traverse the right contour of a subtree.\r\n * It returns the rightmost child of node or the thread of node. The function\r\n * returns null if and only if node is on the highest depth of its subtree.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\r\n\r\n\r\nfunction nextRight(node) {\r\n  var children = node.children;\r\n  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;\r\n}\r\n/**\r\n * This function is used to traverse the left contour of a subtree (or a subforest).\r\n * It returns the leftmost child of node or the thread of node. The function\r\n * returns null if and only if node is on the highest depth of its subtree.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\r\n\r\n\r\nfunction nextLeft(node) {\r\n  var children = node.children;\r\n  return children.length && node.isExpand ? children[0] : node.hierNode.thread;\r\n}\r\n/**\r\n * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.\r\n * Otherwise, returns the specified ancestor.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} nodeInLeft\r\n * @param  {module:echarts/data/Tree~TreeNode} node\r\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\r\n * @return {module:echarts/data/Tree~TreeNode}\r\n */\r\n\r\n\r\nfunction nextAncestor(nodeInLeft, node, ancestor) {\r\n  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;\r\n}\r\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n *\r\n * Shifts the current subtree rooted at wr.\r\n * This is done by increasing prelim(w+) and modifier(w+) by shift.\r\n *\r\n * @param  {module:echarts/data/Tree~TreeNode} wl\r\n * @param  {module:echarts/data/Tree~TreeNode} wr\r\n * @param  {number} shift [description]\r\n */\r\n\r\n\r\nfunction moveSubtree(wl, wr, shift) {\r\n  var change = shift / (wr.hierNode.i - wl.hierNode.i);\r\n  wr.hierNode.change -= change;\r\n  wr.hierNode.shift += shift;\r\n  wr.hierNode.modifier += shift;\r\n  wr.hierNode.prelim += shift;\r\n  wl.hierNode.change += change;\r\n}\r\n/**\r\n * The implementation of this function was originally copied from \"d3.js\"\r\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\r\n * with some modifications made for this program.\r\n * See the license statement at the head of this file.\r\n */\r\n\r\n\r\nfunction defaultSeparation(node1, node2) {\r\n  return node1.parentNode === node2.parentNode ? 1 : 2;\r\n}\r\n\r\nexports.init = init;\r\nexports.firstWalk = firstWalk;\r\nexports.secondWalk = secondWalk;\r\nexports.separation = separation;\r\nexports.radialCoordinate = radialCoordinate;\r\nexports.getViewRect = getViewRect;"]},"metadata":{},"sourceType":"script"}