{"ast":null,"code":"module.exports = function (hljs) {\n  var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  var BUILTINS = {\n    'builtin-name': 'case-lambda call/cc class define-class exit-handler field import ' + 'inherit init-field interface let*-values let-values let/ec mixin ' + 'opt-lambda override protect provide public rename require ' + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' + 'when with-syntax and begin call-with-current-continuation ' + 'call-with-input-file call-with-output-file case cond define ' + 'define-syntax delay do dynamic-wind else for-each if lambda let let* ' + 'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' + 'boolean? caar cadr call-with-input-file call-with-output-file ' + 'call-with-values car cdddar cddddr cdr ceiling char->integer ' + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' + 'char? close-input-port close-output-port complex? cons cos ' + 'current-input-port current-output-port denominator display eof-object? ' + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' + 'force gcd imag-part inexact->exact inexact? input-port? integer->char ' + 'integer? interaction-environment lcm length list list->string ' + 'list->vector list-ref list-tail list? load log magnitude make-polar ' + 'make-rectangular make-string make-vector max member memq memv min ' + 'modulo negative? newline not null-environment null? number->string ' + 'number? numerator odd? open-input-file open-output-file output-port? ' + 'pair? peek-char port? positive? procedure? quasiquote quote quotient ' + 'rational? rationalize read read-char real-part real? remainder reverse ' + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' + 'string->list string->number string->symbol string-append string-ci<=? ' + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' + 'string-fill! string-length string-ref string-set! string<=? string<? ' + 'string=? string>=? string>? string? substring symbol->string symbol? ' + 'tan transcript-off transcript-on truncate values vector ' + 'vector->list vector-fill! vector-length vector-ref vector-set! ' + 'with-input-from-file with-output-to-file write write-char zero?'\n  };\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$'\n  };\n  var LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: SCHEME_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: SCHEME_COMPLEX_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#b[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#o[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\n    }]\n  };\n  var STRING = hljs.QUOTE_STRING_MODE;\n  var REGULAR_EXPRESSION = {\n    className: 'regexp',\n    begin: '#[pr]x\"',\n    end: '[^\\\\\\\\]\"'\n  };\n  var COMMENT_MODES = [hljs.COMMENT(';', '$', {\n    relevance: 0\n  }), hljs.COMMENT('#\\\\|', '\\\\|#')];\n  var IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n  var QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var QUOTED_LIST = {\n    variants: [{\n      begin: /'/\n    }, {\n      begin: '`'\n    }],\n    contains: [{\n      begin: '\\\\(',\n      end: '\\\\)',\n      contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n    }]\n  };\n  var NAME = {\n    className: 'name',\n    begin: SCHEME_IDENT_RE,\n    lexemes: SCHEME_IDENT_RE,\n    keywords: BUILTINS\n  };\n  var LAMBDA = {\n    begin: /lambda/,\n    endsWithParent: true,\n    returnBegin: true,\n    contains: [NAME, {\n      begin: /\\(/,\n      end: /\\)/,\n      endsParent: true,\n      contains: [IDENT]\n    }]\n  };\n  var LIST = {\n    variants: [{\n      begin: '\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\[',\n      end: '\\\\]'\n    }],\n    contains: [LAMBDA, NAME, BODY]\n  };\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n  return {\n    illegal: /\\S/,\n    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Admin/node_modules/highlight.js/lib/languages/scheme.js"],"names":["module","exports","hljs","SCHEME_IDENT_RE","SCHEME_SIMPLE_NUMBER_RE","SCHEME_COMPLEX_NUMBER_RE","BUILTINS","SHEBANG","className","begin","end","LITERAL","NUMBER","variants","relevance","STRING","QUOTE_STRING_MODE","REGULAR_EXPRESSION","COMMENT_MODES","COMMENT","IDENT","QUOTED_IDENT","BODY","endsWithParent","QUOTED_LIST","contains","NAME","lexemes","keywords","LAMBDA","returnBegin","endsParent","LIST","concat","illegal"],"mappings":"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","sourcesContent":["module.exports = function(hljs) {\r\n  var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\r\n  var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\r\n  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\r\n  var BUILTINS = {\r\n    'builtin-name':\r\n      'case-lambda call/cc class define-class exit-handler field import ' +\r\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\r\n      'opt-lambda override protect provide public rename require ' +\r\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\r\n      'when with-syntax and begin call-with-current-continuation ' +\r\n      'call-with-input-file call-with-output-file case cond define ' +\r\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\r\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\r\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\r\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\r\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\r\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\r\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\r\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\r\n      'char? close-input-port close-output-port complex? cons cos ' +\r\n      'current-input-port current-output-port denominator display eof-object? ' +\r\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\r\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\r\n      'integer? interaction-environment lcm length list list->string ' +\r\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\r\n      'make-rectangular make-string make-vector max member memq memv min ' +\r\n      'modulo negative? newline not null-environment null? number->string ' +\r\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\r\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\r\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\r\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\r\n      'string->list string->number string->symbol string-append string-ci<=? ' +\r\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\r\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\r\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\r\n      'tan transcript-off transcript-on truncate values vector ' +\r\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\r\n      'with-input-from-file with-output-to-file write write-char zero?'\r\n  };\r\n\r\n  var SHEBANG = {\r\n    className: 'meta',\r\n    begin: '^#!',\r\n    end: '$'\r\n  };\r\n\r\n  var LITERAL = {\r\n    className: 'literal',\r\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\r\n  };\r\n\r\n  var NUMBER = {\r\n    className: 'number',\r\n    variants: [\r\n      { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },\r\n      { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },\r\n      { begin: '#b[0-1]+(/[0-1]+)?' },\r\n      { begin: '#o[0-7]+(/[0-7]+)?' },\r\n      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }\r\n    ]\r\n  };\r\n\r\n  var STRING = hljs.QUOTE_STRING_MODE;\r\n\r\n  var REGULAR_EXPRESSION = {\r\n    className: 'regexp',\r\n    begin: '#[pr]x\"',\r\n    end: '[^\\\\\\\\]\"'\r\n  };\r\n\r\n  var COMMENT_MODES = [\r\n    hljs.COMMENT(\r\n      ';',\r\n      '$',\r\n      {\r\n        relevance: 0\r\n      }\r\n    ),\r\n    hljs.COMMENT('#\\\\|', '\\\\|#')\r\n  ];\r\n\r\n  var IDENT = {\r\n    begin: SCHEME_IDENT_RE,\r\n    relevance: 0\r\n  };\r\n\r\n  var QUOTED_IDENT = {\r\n    className: 'symbol',\r\n    begin: '\\'' + SCHEME_IDENT_RE\r\n  };\r\n\r\n  var BODY = {\r\n    endsWithParent: true,\r\n    relevance: 0\r\n  };\r\n\r\n  var QUOTED_LIST = {\r\n    variants: [\r\n      { begin: /'/ },\r\n      { begin: '`' }\r\n    ],\r\n    contains: [\r\n      {\r\n        begin: '\\\\(', end: '\\\\)',\r\n        contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\r\n      }\r\n    ]\r\n  };\r\n\r\n  var NAME = {\r\n    className: 'name',\r\n    begin: SCHEME_IDENT_RE,\r\n    lexemes: SCHEME_IDENT_RE,\r\n    keywords: BUILTINS\r\n  };\r\n\r\n  var LAMBDA = {\r\n    begin: /lambda/, endsWithParent: true, returnBegin: true,\r\n    contains: [\r\n      NAME,\r\n      {\r\n        begin: /\\(/, end: /\\)/, endsParent: true,\r\n        contains: [IDENT],\r\n      }\r\n    ]\r\n  };\r\n\r\n  var LIST = {\r\n    variants: [\r\n      { begin: '\\\\(', end: '\\\\)' },\r\n      { begin: '\\\\[', end: '\\\\]' }\r\n    ],\r\n    contains: [LAMBDA, NAME, BODY]\r\n  };\r\n\r\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\r\n\r\n  return {\r\n    illegal: /\\S/,\r\n    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\r\n  };\r\n};"]},"metadata":{},"sourceType":"script"}