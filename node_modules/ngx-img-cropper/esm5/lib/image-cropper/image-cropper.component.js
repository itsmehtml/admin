import { __decorate, __metadata, __param } from "tslib";
import { Component, AfterViewInit, OnChanges, OnDestroy, ViewChild, ElementRef, Input, Output, EventEmitter, Renderer2, SimpleChanges, Inject } from '@angular/core';
import { CropperSettings } from './cropper-settings';
import { ImageCropper } from './imageCropper';
import { CropPosition } from './model/cropPosition';
import { Exif } from './exif';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["cropcanvas"];
var _c1 = ["fileInput"];
function ImageCropperComponent_input_1_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 4, 5);
    ɵngcc0.ɵɵlistener("change", function ImageCropperComponent_input_1_Template_input_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.fileChangeListener($event); });
    ɵngcc0.ɵɵelementEnd();
} }
var ImageCropperComponent = /** @class */ (function () {
    function ImageCropperComponent(renderer, document) {
        this.document = document;
        this.cropPositionChange = new EventEmitter();
        this.exif = new Exif();
        // tslint:disable-next-line:no-output-on-prefix
        this.onCrop = new EventEmitter();
        this.imageSet = new EventEmitter();
        this.dragUnsubscribers = [];
        this.renderer = renderer;
    }
    ImageCropperComponent.prototype.ngAfterViewInit = function () {
        var canvas = this.cropcanvas.nativeElement;
        if (!this.settings) {
            this.settings = new CropperSettings();
        }
        if (this.settings.cropperClass) {
            this.renderer.setAttribute(canvas, 'class', this.settings.cropperClass);
        }
        if (!this.settings.dynamicSizing) {
            this.renderer.setAttribute(canvas, 'width', this.settings.canvasWidth.toString());
            this.renderer.setAttribute(canvas, 'height', this.settings.canvasHeight.toString());
        }
        else {
            this.windowListener = this.resize.bind(this);
            window.addEventListener('resize', this.windowListener);
        }
        if (!this.cropper) {
            this.cropper = new ImageCropper(this.settings);
        }
        this.cropper.prepare(canvas);
    };
    ImageCropperComponent.prototype.ngOnChanges = function (changes) {
        if (this.isCropPositionChanged(changes)) {
            this.cropper.updateCropPosition(this.cropPosition.toBounds());
            if (this.cropper.isImageSet()) {
                var bounds = this.cropper.getCropBounds();
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(bounds);
            }
            this.updateCropBounds();
        }
        if (changes.inputImage) {
            this.setImage(changes.inputImage.currentValue);
        }
        if (changes.settings && this.cropper) {
            this.cropper.updateSettings(this.settings);
            if (this.cropper.isImageSet()) {
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(this.cropper.getCropBounds());
            }
        }
    };
    ImageCropperComponent.prototype.ngOnDestroy = function () {
        this.removeDragListeners();
        if (this.settings.dynamicSizing && this.windowListener) {
            window.removeEventListener('resize', this.windowListener);
        }
    };
    ImageCropperComponent.prototype.onTouchMove = function (event) {
        this.cropper.onTouchMove(event);
    };
    ImageCropperComponent.prototype.onTouchStart = function (event) {
        this.cropper.onTouchStart(event);
    };
    ImageCropperComponent.prototype.onTouchEnd = function (event) {
        this.cropper.onTouchEnd(event);
        if (this.cropper.isImageSet()) {
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    };
    ImageCropperComponent.prototype.onMouseDown = function (event) {
        this.dragUnsubscribers.push(this.renderer.listen(this.document, 'mousemove', this.onMouseMove.bind(this)));
        this.dragUnsubscribers.push(this.renderer.listen(this.document, 'mouseup', this.onMouseUp.bind(this)));
        this.cropper.onMouseDown(event);
        // if (!this.cropper.isImageSet() && !this.settings.noFileInput) {
        //   // load img
        //   this.fileInput.nativeElement.click();
        // }
    };
    ImageCropperComponent.prototype.removeDragListeners = function () {
        this.dragUnsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });
    };
    ImageCropperComponent.prototype.onMouseUp = function (event) {
        this.removeDragListeners();
        if (this.cropper.isImageSet()) {
            this.cropper.onMouseUp(event);
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    };
    ImageCropperComponent.prototype.onMouseMove = function (event) {
        this.cropper.onMouseMove(event);
    };
    ImageCropperComponent.prototype.fileChangeListener = function ($event) {
        var _this = this;
        if ($event.target.files.length === 0) {
            return;
        }
        var file = $event.target.files[0];
        if (this.settings.allowedFilesRegex.test(file.name)) {
            var image_1 = new Image();
            var fileReader = new FileReader();
            fileReader.addEventListener('loadend', function (loadEvent) {
                image_1.addEventListener('load', function () {
                    _this.setImage(image_1);
                });
                image_1.src = loadEvent.target.result;
            });
            fileReader.readAsDataURL(file);
        }
    };
    ImageCropperComponent.prototype.resize = function () {
        var canvas = this.cropcanvas.nativeElement;
        this.settings.canvasWidth = canvas.offsetWidth;
        this.settings.canvasHeight = canvas.offsetHeight;
        this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, true);
    };
    ImageCropperComponent.prototype.reset = function () {
        this.cropper.reset();
        this.renderer.setAttribute(this.cropcanvas.nativeElement, 'class', this.settings.cropperClass);
        this.image.image = this.cropper.getCroppedImageHelper().src;
    };
    ImageCropperComponent.prototype.setImage = function (image, newBounds) {
        var _this = this;
        if (newBounds === void 0) { newBounds = null; }
        this.imageSet.emit(true);
        this.renderer.setAttribute(this.cropcanvas.nativeElement, 'class', this.settings.cropperClass + " " + this.settings.croppingClass);
        this.raf = window.requestAnimationFrame(function () {
            if (_this.raf) {
                window.cancelAnimationFrame(_this.raf);
            }
            if (image.naturalHeight > 0 && image.naturalWidth > 0) {
                image.height = image.naturalHeight;
                image.width = image.naturalWidth;
                window.cancelAnimationFrame(_this.raf);
                _this.getOrientedImage(image, function (img) {
                    if (_this.settings.dynamicSizing) {
                        var canvas = _this.cropcanvas.nativeElement;
                        _this.settings.canvasWidth = canvas.offsetWidth;
                        _this.settings.canvasHeight = canvas.offsetHeight;
                        _this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, false);
                    }
                    _this.cropper.setImage(img);
                    if (_this.cropPosition && _this.cropPosition.isInitialized()) {
                        _this.cropper.updateCropPosition(_this.cropPosition.toBounds());
                    }
                    _this.image.original = img;
                    var bounds = _this.cropper.getCropBounds();
                    _this.image.image = _this.cropper.getCroppedImageHelper().src;
                    if (!_this.image) {
                        _this.image = image;
                    }
                    if (newBounds != null) {
                        bounds = newBounds;
                        _this.cropper.setBounds(bounds);
                        _this.cropper.updateCropPosition(bounds);
                    }
                    _this.onCrop.emit(bounds);
                });
            }
        });
    };
    ImageCropperComponent.prototype.isCropPositionChanged = function (changes) {
        if (this.cropper &&
            changes.cropPosition &&
            this.isCropPositionUpdateNeeded) {
            return true;
        }
        else {
            this.isCropPositionUpdateNeeded = true;
            return false;
        }
    };
    ImageCropperComponent.prototype.updateCropBounds = function () {
        var cropBound = this.cropper.getCropBounds();
        this.cropPositionChange.emit(new CropPosition(cropBound.left, cropBound.top, cropBound.width, cropBound.height));
        this.isCropPositionUpdateNeeded = false;
    };
    ImageCropperComponent.prototype.getOrientedImage = function (image, callback) {
        var _this = this;
        var img;
        this.exif.getData(image, function () {
            var orientation = _this.exif.getTag(image, 'Orientation');
            if ([3, 6, 8].indexOf(orientation) > -1) {
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');
                var cw = image.width;
                var ch = image.height;
                var cx = 0;
                var cy = 0;
                var deg = 0;
                switch (orientation) {
                    case 3:
                        cx = -image.width;
                        cy = -image.height;
                        deg = 180;
                        break;
                    case 6:
                        cw = image.height;
                        ch = image.width;
                        cy = -image.height;
                        deg = 90;
                        break;
                    case 8:
                        cw = image.height;
                        ch = image.width;
                        cx = -image.width;
                        deg = 270;
                        break;
                    default:
                        break;
                }
                canvas.width = cw;
                canvas.height = ch;
                ctx.rotate((deg * Math.PI) / 180);
                ctx.drawImage(image, cx, cy);
                img = document.createElement('img');
                img.width = cw;
                img.height = ch;
                img.addEventListener('load', function () {
                    callback(img);
                });
                img.src = canvas.toDataURL('image/png');
            }
            else {
                img = image;
                callback(img);
            }
        });
    };
    ImageCropperComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        ViewChild('cropcanvas', { static: true }),
        __metadata("design:type", ElementRef)
    ], ImageCropperComponent.prototype, "cropcanvas", void 0);
    __decorate([
        ViewChild('fileInput'),
        __metadata("design:type", ElementRef)
    ], ImageCropperComponent.prototype, "fileInput", void 0);
    __decorate([
        Input(),
        __metadata("design:type", CropperSettings)
    ], ImageCropperComponent.prototype, "settings", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ImageCropperComponent.prototype, "image", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ImageCropperComponent.prototype, "inputImage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", ImageCropper)
    ], ImageCropperComponent.prototype, "cropper", void 0);
    __decorate([
        Input(),
        __metadata("design:type", CropPosition)
    ], ImageCropperComponent.prototype, "cropPosition", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImageCropperComponent.prototype, "cropPositionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImageCropperComponent.prototype, "onCrop", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], ImageCropperComponent.prototype, "imageSet", void 0);
    ImageCropperComponent = __decorate([ __param(1, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Renderer2, Object])
    ], ImageCropperComponent);
ImageCropperComponent.ɵfac = function ImageCropperComponent_Factory(t) { return new (t || ImageCropperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ImageCropperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ImageCropperComponent, selectors: [["img-cropper"]], viewQuery: function ImageCropperComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cropcanvas = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, inputs: { settings: "settings", cropper: "cropper", image: "image", inputImage: "inputImage", cropPosition: "cropPosition" }, outputs: { cropPositionChange: "cropPositionChange", onCrop: "onCrop", imageSet: "imageSet" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 1, consts: [[1, "ng2-imgcrop"], ["type", "file", "accept", "image/*", 3, "change", 4, "ngIf"], [3, "mousedown", "touchmove", "touchend", "touchstart"], ["cropcanvas", ""], ["type", "file", "accept", "image/*", 3, "change"], ["fileInput", ""]], template: function ImageCropperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtemplate(1, ImageCropperComponent_input_1_Template, 2, 0, "input", 1);
        ɵngcc0.ɵɵelementStart(2, "canvas", 2, 3);
        ɵngcc0.ɵɵlistener("mousedown", function ImageCropperComponent_Template_canvas_mousedown_2_listener($event) { return ctx.onMouseDown($event); })("touchmove", function ImageCropperComponent_Template_canvas_touchmove_2_listener($event) { return ctx.onTouchMove($event); })("touchend", function ImageCropperComponent_Template_canvas_touchend_2_listener($event) { return ctx.onTouchEnd($event); })("touchstart", function ImageCropperComponent_Template_canvas_touchstart_2_listener($event) { return ctx.onTouchStart($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.settings.noFileInput);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageCropperComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'img-cropper',
                template: "<span class=\"ng2-imgcrop\">\r\n  <input\r\n    *ngIf=\"!settings.noFileInput\"\r\n    #fileInput\r\n    type=\"file\"\r\n    accept=\"image/*\"\r\n    (change)=\"fileChangeListener($event)\"\r\n  />\r\n  <canvas\r\n    #cropcanvas\r\n    (mousedown)=\"onMouseDown($event)\"\r\n    (touchmove)=\"onTouchMove($event)\"\r\n    (touchend)=\"onTouchEnd($event)\"\r\n    (touchstart)=\"onTouchStart($event)\"\r\n  >\r\n  </canvas>\r\n</span>\r\n"
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { cropPositionChange: [{
            type: Output
        }], onCrop: [{
            type: Output
        }], imageSet: [{
            type: Output
        }], settings: [{
            type: Input
        }], cropper: [{
            type: Input
        }], cropcanvas: [{
            type: ViewChild,
            args: ['cropcanvas', { static: true }]
        }], fileInput: [{
            type: ViewChild,
            args: ['fileInput']
        }], image: [{
            type: Input
        }], inputImage: [{
            type: Input
        }], cropPosition: [{
            type: Input
        }] }); })();
    return ImageCropperComponent;
}());
export { ImageCropperComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,