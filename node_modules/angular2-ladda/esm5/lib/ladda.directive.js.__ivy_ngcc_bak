import { __decorate, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID } from '@angular/core';
import { LaddaConfig, LaddaConfigArgs, configAttributes } from './ladda-config';
import { create as createLadda } from 'ladda';
var LaddaDirective = /** @class */ (function () {
    function LaddaDirective(el, config, platformId) {
        this.platformId = platformId;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (var attribute in configAttributes) {
            var configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                var value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    LaddaDirective.prototype.ngOnChanges = function (changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    };
    LaddaDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(function () { _this.updateLadda(false); }, 0);
    };
    LaddaDirective.prototype.ngOnDestroy = function () {
        if (this.ladda) {
            this.ladda.remove();
        }
    };
    LaddaDirective.prototype.updateLadda = function (previousValue) {
        var loading = typeof this.loading === 'number' || !!this.loading;
        var wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    };
    LaddaDirective.prototype.updateDisabled = function () {
        this.el.disabled = this.disabled;
    };
    LaddaDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('ladda')
    ], LaddaDirective.prototype, "loading", void 0);
    __decorate([
        Input()
    ], LaddaDirective.prototype, "disabled", void 0);
    LaddaDirective = __decorate([
        Directive({
            selector: '[ladda]'
        }),
        __param(1, Inject(LaddaConfig)), __param(1, Optional()),
        __param(2, Inject(PLATFORM_ID))
    ], LaddaDirective);
    return LaddaDirective;
}());
export { LaddaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFkZGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItbGFkZGEvIiwic291cmNlcyI6WyJsaWIvbGFkZGEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZJLE9BQU8sRUFBQyxXQUFXLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUUsT0FBTyxFQUFDLE1BQU0sSUFBSSxXQUFXLEVBQWMsTUFBTSxPQUFPLENBQUM7QUFPekQ7SUFPSSx3QkFDSSxFQUFjLEVBQ21CLE1BQXVCLEVBQzNCLFVBQWtCO1FBQWxCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFFL0MsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBRTNCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPO1NBQ1Y7UUFFRCxrRUFBa0U7UUFDbEUsS0FBSyxJQUFJLFNBQVMsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQyxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUV0RCxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNkLFNBQVMsQ0FBQyx5Q0FBeUM7YUFDdEQ7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ2xDLHVEQUF1RDtnQkFDdkQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxPQUFPLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7Z0JBQ3JGLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMxQztTQUNKO0lBQ0wsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sQ0FBQyxxREFBcUQ7U0FDaEU7UUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN6QjtJQUNMLENBQUM7SUFFRCxpQ0FBUSxHQUFSO1FBQUEsaUJBVUM7UUFURyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVsQyw4REFBOEQ7UUFDOUQsOERBQThEO1FBQzlELFVBQVUsQ0FBQyxjQUFRLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELG9DQUFXLEdBQVg7UUFDSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQztJQUVPLG9DQUFXLEdBQW5CLFVBQW9CLGFBQXlCO1FBQ3pDLElBQUksT0FBTyxHQUFZLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDMUUsSUFBSSxVQUFVLEdBQVksT0FBTyxhQUFhLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFL0UsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLElBQUksVUFBVSxFQUFFO2dCQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7WUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNoQztRQUVELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFFTyx1Q0FBYyxHQUF0QjtRQUNJLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDckMsQ0FBQzs7Z0JBakZPLFVBQVU7Z0JBQzJCLGVBQWUsdUJBQXZELE1BQU0sU0FBQyxXQUFXLGNBQUcsUUFBUTtnQkFDVyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVzs7SUFOUDtRQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7bURBQXFCO0lBQzNCO1FBQVIsS0FBSyxFQUFFO29EQUFtQjtJQUxsQixjQUFjO1FBSDFCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxTQUFTO1NBQ3RCLENBQUM7UUFVTyxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFDL0IsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7T0FWZixjQUFjLENBMEYxQjtJQUFELHFCQUFDO0NBQUEsQUExRkQsSUEwRkM7U0ExRlksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgT3B0aW9uYWwsIEluamVjdCwgUExBVEZPUk1fSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0xhZGRhQ29uZmlnLCBMYWRkYUNvbmZpZ0FyZ3MsIGNvbmZpZ0F0dHJpYnV0ZXN9IGZyb20gJy4vbGFkZGEtY29uZmlnJztcclxuaW1wb3J0IHtjcmVhdGUgYXMgY3JlYXRlTGFkZGEsIExhZGRhQnV0dG9ufSBmcm9tICdsYWRkYSc7XHJcblxyXG5leHBvcnQgdHlwZSBsYWRkYVZhbHVlID0gYm9vbGVhbiB8IG51bWJlciB8IHVuZGVmaW5lZCB8IG51bGw7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2xhZGRhXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIExhZGRhRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIGVsOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByaXZhdGUgbGFkZGE6IExhZGRhQnV0dG9uO1xyXG5cclxuICAgIEBJbnB1dCgnbGFkZGEnKSBsb2FkaW5nOiBsYWRkYVZhbHVlO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgQEluamVjdChMYWRkYUNvbmZpZykgQE9wdGlvbmFsKCkgY29uZmlnOiBMYWRkYUNvbmZpZ0FyZ3MsXHJcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmVsID0gZWwubmF0aXZlRWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKCFjb25maWcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYXBwbHkgZGVmYXVsdCBzdHlsZXMgaWYgdGhleSBhcmVuJ3Qgb3ZlcndyaXR0ZW4gYnkgYW4gYXR0cmlidXRlXHJcbiAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIGluIGNvbmZpZ0F0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgbGV0IGNvbmZpZ1ZhbHVlID0gY29uZmlnW2NvbmZpZ0F0dHJpYnV0ZXNbYXR0cmlidXRlXV07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbmZpZ1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gZG9uJ3Qgd2FzdGUgdGltZSByZWFkaW5nIHRoZSBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmVsLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhdHRyaWJ1dGUgaXNuJ3Qgc2V0IC0gYXBwbHkgdGhlIGRlZmF1bHQgY29uZmlnIHZhbHVlXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAodHlwZW9mIGNvbmZpZ1ZhbHVlID09PSBcIm51bWJlclwiKSA/IGNvbmZpZ1ZhbHVlLnRvU3RyaW5nKCkgOiBjb25maWdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoIXRoaXMubGFkZGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuOyAvLyBuZWVkZWQgc2luY2UgbmdPbkNoYW5nZXMgaXMgY2FsbGVkIGJlZm9yZSBuZ09uSW5pdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubG9hZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxhZGRhKGNoYW5nZXMubG9hZGluZy5wcmV2aW91c1ZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGlzYWJsZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGFkZGEgPSBjcmVhdGVMYWRkYSh0aGlzLmVsKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhlIGluaXRpYWwgbG9hZGluZyB2YWx1ZSBpc24ndCBmYWxzZSwgYSB0aW1lb3V0IG9mIDAgbXNcclxuICAgICAgICAvLyBpcyBuZWNlc3NhcnkgZm9yIHRoZSBjYWxjdWxhdGVkIHNwaW5uZXIgc2l6ZSB0byBiZSBjb3JyZWN0LlxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLnVwZGF0ZUxhZGRhKGZhbHNlKTsgfSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGFkZGEpIHtcclxuICAgICAgICAgICAgdGhpcy5sYWRkYS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVMYWRkYShwcmV2aW91c1ZhbHVlOiBsYWRkYVZhbHVlKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGxvYWRpbmc6IGJvb2xlYW4gPSB0eXBlb2YgdGhpcy5sb2FkaW5nID09PSAnbnVtYmVyJyB8fCAhIXRoaXMubG9hZGluZztcclxuICAgICAgICBsZXQgd2FzTG9hZGluZzogYm9vbGVhbiA9IHR5cGVvZiBwcmV2aW91c1ZhbHVlID09PSAnbnVtYmVyJyB8fCAhIXByZXZpb3VzVmFsdWU7XHJcblxyXG4gICAgICAgIGlmICghbG9hZGluZykge1xyXG4gICAgICAgICAgICBpZiAod2FzTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWRkYS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZURpc2FibGVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXdhc0xvYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5sYWRkYS5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxvYWRpbmcgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFkZGEuc2V0UHJvZ3Jlc3ModGhpcy5sb2FkaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVEaXNhYmxlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVsLmRpc2FibGVkID0gdGhpcy5kaXNhYmxlZDtcclxuICAgIH1cclxufVxyXG4iXX0=