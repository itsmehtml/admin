import { __decorate, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID } from '@angular/core';
import { LaddaConfig, LaddaConfigArgs, configAttributes } from './ladda-config';
import { create as createLadda } from 'ladda';
let LaddaDirective = class LaddaDirective {
    constructor(el, config, platformId) {
        this.platformId = platformId;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (let attribute in configAttributes) {
            let configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                let value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    ngOnChanges(changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    }
    ngOnInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(() => { this.updateLadda(false); }, 0);
    }
    ngOnDestroy() {
        if (this.ladda) {
            this.ladda.remove();
        }
    }
    updateLadda(previousValue) {
        let loading = typeof this.loading === 'number' || !!this.loading;
        let wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    }
    updateDisabled() {
        this.el.disabled = this.disabled;
    }
};
LaddaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input('ladda')
], LaddaDirective.prototype, "loading", void 0);
__decorate([
    Input()
], LaddaDirective.prototype, "disabled", void 0);
LaddaDirective = __decorate([
    Directive({
        selector: '[ladda]'
    }),
    __param(1, Inject(LaddaConfig)), __param(1, Optional()),
    __param(2, Inject(PLATFORM_ID))
], LaddaDirective);
export { LaddaDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFkZGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItbGFkZGEvIiwic291cmNlcyI6WyJsaWIvbGFkZGEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZJLE9BQU8sRUFBQyxXQUFXLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUUsT0FBTyxFQUFDLE1BQU0sSUFBSSxXQUFXLEVBQWMsTUFBTSxPQUFPLENBQUM7QUFPekQsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztJQU92QixZQUNJLEVBQWMsRUFDbUIsTUFBdUIsRUFDM0IsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUUvQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFFM0IsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE9BQU87U0FDVjtRQUVELGtFQUFrRTtRQUNsRSxLQUFLLElBQUksU0FBUyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BDLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBRXRELElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2QsU0FBUyxDQUFDLHlDQUF5QzthQUN0RDtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDbEMsdURBQXVEO2dCQUN2RCxJQUFJLEtBQUssR0FBRyxDQUFDLE9BQU8sV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztnQkFDckYsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzFDO1NBQ0o7SUFDTCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTyxDQUFDLHFEQUFxRDtTQUNoRTtRQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVsQyw4REFBOEQ7UUFDOUQsOERBQThEO1FBQzlELFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFFTyxXQUFXLENBQUMsYUFBeUI7UUFDekMsSUFBSSxPQUFPLEdBQVksT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUMxRSxJQUFJLFVBQVUsR0FBWSxPQUFPLGFBQWEsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUUvRSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsSUFBSSxVQUFVLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyQjtZQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdEI7UUFFRCxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVPLGNBQWM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNyQyxDQUFDO0NBQ0osQ0FBQTs7WUFsRlcsVUFBVTtZQUMyQixlQUFlLHVCQUF2RCxNQUFNLFNBQUMsV0FBVyxjQUFHLFFBQVE7WUFDVyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVzs7QUFOUDtJQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7K0NBQXFCO0FBQzNCO0lBQVIsS0FBSyxFQUFFO2dEQUFtQjtBQUxsQixjQUFjO0lBSDFCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxTQUFTO0tBQ3RCLENBQUM7SUFVTyxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7SUFDL0IsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7R0FWZixjQUFjLENBMEYxQjtTQTFGWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSW5qZWN0LCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7TGFkZGFDb25maWcsIExhZGRhQ29uZmlnQXJncywgY29uZmlnQXR0cmlidXRlc30gZnJvbSAnLi9sYWRkYS1jb25maWcnO1xyXG5pbXBvcnQge2NyZWF0ZSBhcyBjcmVhdGVMYWRkYSwgTGFkZGFCdXR0b259IGZyb20gJ2xhZGRhJztcclxuXHJcbmV4cG9ydCB0eXBlIGxhZGRhVmFsdWUgPSBib29sZWFuIHwgbnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbDtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbbGFkZGFdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFkZGFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgZWw6IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBsYWRkYTogTGFkZGFCdXR0b247XHJcblxyXG4gICAgQElucHV0KCdsYWRkYScpIGxvYWRpbmc6IGxhZGRhVmFsdWU7XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBASW5qZWN0KExhZGRhQ29uZmlnKSBAT3B0aW9uYWwoKSBjb25maWc6IExhZGRhQ29uZmlnQXJncyxcclxuICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuZWwgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAoIWNvbmZpZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhcHBseSBkZWZhdWx0IHN0eWxlcyBpZiB0aGV5IGFyZW4ndCBvdmVyd3JpdHRlbiBieSBhbiBhdHRyaWJ1dGVcclxuICAgICAgICBmb3IgKGxldCBhdHRyaWJ1dGUgaW4gY29uZmlnQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICBsZXQgY29uZmlnVmFsdWUgPSBjb25maWdbY29uZmlnQXR0cmlidXRlc1thdHRyaWJ1dGVdXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29uZmlnVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBkb24ndCB3YXN0ZSB0aW1lIHJlYWRpbmcgdGhlIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBpc24ndCBzZXQgLSBhcHBseSB0aGUgZGVmYXVsdCBjb25maWcgdmFsdWVcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICh0eXBlb2YgY29uZmlnVmFsdWUgPT09IFwibnVtYmVyXCIpID8gY29uZmlnVmFsdWUudG9TdHJpbmcoKSA6IGNvbmZpZ1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIGlmICghdGhpcy5sYWRkYSkge1xyXG4gICAgICAgICAgICByZXR1cm47IC8vIG5lZWRlZCBzaW5jZSBuZ09uQ2hhbmdlcyBpcyBjYWxsZWQgYmVmb3JlIG5nT25Jbml0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5sb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFkZGEoY2hhbmdlcy5sb2FkaW5nLnByZXZpb3VzVmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVEaXNhYmxlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5sYWRkYSA9IGNyZWF0ZUxhZGRhKHRoaXMuZWwpO1xyXG5cclxuICAgICAgICAvLyBpZiB0aGUgaW5pdGlhbCBsb2FkaW5nIHZhbHVlIGlzbid0IGZhbHNlLCBhIHRpbWVvdXQgb2YgMCBtc1xyXG4gICAgICAgIC8vIGlzIG5lY2Vzc2FyeSBmb3IgdGhlIGNhbGN1bGF0ZWQgc3Bpbm5lciBzaXplIHRvIGJlIGNvcnJlY3QuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMudXBkYXRlTGFkZGEoZmFsc2UpOyB9LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5sYWRkYSkge1xyXG4gICAgICAgICAgICB0aGlzLmxhZGRhLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUxhZGRhKHByZXZpb3VzVmFsdWU6IGxhZGRhVmFsdWUpOiB2b2lkIHtcclxuICAgICAgICBsZXQgbG9hZGluZzogYm9vbGVhbiA9IHR5cGVvZiB0aGlzLmxvYWRpbmcgPT09ICdudW1iZXInIHx8ICEhdGhpcy5sb2FkaW5nO1xyXG4gICAgICAgIGxldCB3YXNMb2FkaW5nOiBib29sZWFuID0gdHlwZW9mIHByZXZpb3VzVmFsdWUgPT09ICdudW1iZXInIHx8ICEhcHJldmlvdXNWYWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKCFsb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICh3YXNMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhZGRhLnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlRGlzYWJsZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghd2FzTG9hZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLmxhZGRhLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMubG9hZGluZyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGhpcy5sYWRkYS5zZXRQcm9ncmVzcyh0aGlzLmxvYWRpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZURpc2FibGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZWwuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==