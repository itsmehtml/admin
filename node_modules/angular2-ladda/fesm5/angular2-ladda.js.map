{"version":3,"file":"angular2-ladda.js","sources":["angular2-ladda/lib/ladda-config.ts","angular2-ladda/lib/ladda.directive.ts","angular2-ladda/lib/ladda.module.ts","angular2-ladda/public-api.ts","angular2-ladda/angular2-ladda.ts"],"names":["createLadda"],"mappings":";;;;;;;IAOA;AAA6B,KAK5B;AACD,IADA,sBAAC;AAAD,CAAC,IAAA;AACD,IACW,gBAAgB,GAA2C;AACtE,IAAI,YAAY,EAAE,OAAO;AACzB,IAAI,mBAAmB,EAAE,aAAa;AACtC,IAAI,oBAAoB,EAAE,cAAc;AACxC,IAAI,oBAAoB,EAAE,cAAc;AACxC,EAAE;AACF;AAEgC,IAC5B,qBAAY,MAA4B;AAC5C,QADgB,uBAAA,EAAA,WAA4B;AAC5C,QAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpC,KAAK;AACL;AACsD,gBAJ9B,eAAe;AAAG;IAD7B,WAAW,wBADvB,UAAU,EAAE,QACA,WAAW,CAIvB;;;;yEACD;AAAC,IADD,kBAAC;AACA,CALD;AAAK;AAAC;AACJ,ICNE,wBACI,EAAc,EACmB,MAAuB,EAC3B,UAAkB;AACrD,QADmC,eAAU,GAAV,UAAU,CAAQ;AAAC,QAEhD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC;AACnC,QACQ,IAAI,CAAC,MAAM,EAAE;AACrB,YAAY,OAAO;AACnB,SAAS;AACT;AAC0E,QAClE,KAAK,IAAI,SAAS,IAAI,gBAAgB,EAAE;AAChD,YAAY,IAAI,WAAW,GAAG,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;AAClE,YACY,IAAI,CAAC,WAAW,EAAE;AAC9B,gBAAgB,SAAS;AACzB,aAAa;AACb,YACY,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;AAClD;AACA,gBAAgB,IAAI,KAAK,GAAG,CAAC,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,CAAC,QAAQ,EAAE,GAAG,WAAW,CAAC;AACrG,gBAAgB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACvD,aAAa;AACb,SAAS;AACT,KAAK;AACL,IACI,oCAAW,GAAX,UAAY,OAAsB;AACtC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACzB,YAAY,OAAO;AACnB,SAAS;AACT,QACQ,IAAI,OAAO,CAAC,OAAO,EAAE;AAC7B,YAAY,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AAC5D,SAAS;AACT,QACQ,IAAI,OAAO,CAAC,QAAQ,EAAE;AAC9B,YAAY,IAAI,CAAC,cAAc,EAAE,CAAC;AAClC,SAAS;AACT,KAAK;AAEL,IAAI,iCAAQ,GAAR;AACH,QADG,iBAUC;AACL,QAVQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACjD,YAAY,OAAO;AACnB,SAAS;AACT,QACQ,IAAI,CAAC,KAAK,GAAGA,MAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1C;AACsE;AACA,QAC9D,UAAU,CAAC,cAAQ,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1D,KAAK;AAEL,IAAI,oCAAW,GAAX;AAAc,QACV,IAAI,IAAI,CAAC,KAAK,EAAE;AACxB,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AAChC,SAAS;AACT,KAAK;AAEL,IAAY,oCAAW,GAAnB,UAAoB,aAAyB;AAAI,QAC7C,IAAI,OAAO,GAAY,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;AAClF,QAAQ,IAAI,UAAU,GAAY,OAAO,aAAa,KAAK,QAAQ,IAAI,CAAC,CAAC,aAAa,CAAC;AACvF,QACQ,IAAI,CAAC,OAAO,EAAE;AACtB,YAAY,IAAI,UAAU,EAAE;AAC5B,gBAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAClC,aAAa;AACb,YACY,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;AACzC,SAAS;AACT,QACQ,IAAI,CAAC,UAAU,EAAE;AACzB,YAAY,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAC/B,SAAS;AACT,QACQ,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;AAC9C,YAAY,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACjD,SAAS;AACT,KAAK;AAEL,IAAY,uCAAc,GAAtB;AAAc,QACV,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AACzC,KAAK;AACJ;AACyD,gBAnF9C,UAAU;AACpB,gBAA+C,eAAe,uBAAvD,MAAM,SAAC,WAAW,cAAG,QAAQ;AAAO,gBACI,MAAM,uBAA9C,MAAM,SAAC,WAAW;AAAQ;AAAU,IANzB;AAAa,QAA5B,KAAK,CAAC,OAAO,CAAC;AAAC,mDAAoB;AACvC,IAAY;AAAa,QAArB,KAAK,EAAE;AAAC,oDAAkB;AAE/B,IAPa,cAAc,wBAH1B,SAAS,CAAC,cACP,QAAQ,EAAE,SAAS,pDAEf,CASC,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA,EAAE,WAAA,QAAQ,EAAE,CAAA;IAVvC,CAAC,LAUwC,QACjC,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;AAAC,OAVhB,cAAc,CA0F1B;;;;;;;;;;;;;;;;;;;;;oBACD;AAAC,IADD,qBAAC;AACA,CA3FD;AAAK;AAAC;AAA+C,ICFrD;AAAyB,KASxB;AACD,oBAVa,WAAW;AAAE,IACR,mBAAO,GAArB,UAAsB,MAAuB;AAAI,QAC7C,OAAO;AACf,YAAY,QAAQ,EAAE,aAAW;AACjC,YAAY,SAAS,EAAE;AACvB,gBAAgB,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE;AAC1D,aAAa;AACb,SAAS,CAAC;AACV,KAAK;AACJ;IATY,WAAW,wCAJvB,QAAQ,CAAC;WACN,YAAY,EAAE,CAAE,cAAc,CAAE,cAChC,OAAO,EAAO,CAAE,cAAc,CAAE,WACnC,CAAC,QACW,WAAW,CASvB;;;;;;;;gDACD;AAAC,IADD,kBAAC;AACA,CAVD;AAAK;ACRL;AACA;AACA,GAAG;AACH;ACHA;AACA;AACA,GAAG;AACH;AACA;AAC0D","sourcesContent":["import {Injectable} from \"@angular/core\";\r\n\r\nexport type laddaStyle =\r\n    \"expand-left\" | \"expand-right\" | \"expand-up\" | \"expand-down\" |\r\n    \"contract\" | \"contract-overlay\" | \"zoom-in\" | \"zoom-out\" |\r\n    \"slide-left\" | \"slide-right\" | \"slide-up\" | \"slide-down\";\r\n\r\nexport abstract class LaddaConfigArgs {\r\n    style?: laddaStyle;\r\n    spinnerSize?: number;\r\n    spinnerColor?: string;\r\n    spinnerLines?: number;\r\n}\r\n\r\nexport let configAttributes: {[key: string]: keyof LaddaConfigArgs} = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\n\r\n@Injectable()\r\nexport class LaddaConfig implements LaddaConfigArgs {\r\n    constructor(config: LaddaConfigArgs = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n","import {isPlatformBrowser} from '@angular/common';\r\nimport {Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID} from '@angular/core';\r\nimport {LaddaConfig, LaddaConfigArgs, configAttributes} from './ladda-config';\r\nimport {create as createLadda, LaddaButton} from 'ladda';\r\n\r\nexport type laddaValue = boolean | number | undefined | null;\r\n\r\n@Directive({\r\n    selector: '[ladda]'\r\n})\r\nexport class LaddaDirective implements OnInit, OnDestroy, OnChanges {\r\n    private el: HTMLButtonElement;\r\n    private ladda: LaddaButton;\r\n\r\n    @Input('ladda') loading: laddaValue;\r\n    @Input() disabled: boolean;\r\n\r\n    constructor(\r\n        el: ElementRef,\r\n        @Inject(LaddaConfig) @Optional() config: LaddaConfigArgs,\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n    ) {\r\n        this.el = el.nativeElement;\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n\r\n        this.ladda = createLadda(this.el);\r\n\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n\r\n    private updateLadda(previousValue: laddaValue): void {\r\n        let loading: boolean = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading: boolean = typeof previousValue === 'number' || !!previousValue;\r\n\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n\r\n            return this.updateDisabled();\r\n        }\r\n\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n\r\n    private updateDisabled(): void {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\n","import {NgModule, ModuleWithProviders} from '@angular/core';\r\nimport {LaddaDirective} from './ladda.directive';\r\nimport {LaddaConfigArgs, LaddaConfig} from './ladda-config';\r\n\r\n@NgModule({\r\n    declarations: [ LaddaDirective ],\r\n    exports:      [ LaddaDirective ],\r\n})\r\nexport class LaddaModule {\r\n    public static forRoot(config: LaddaConfigArgs): ModuleWithProviders<LaddaModule> {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ladda\r\n */\r\n\r\nexport * from './lib/ladda-config';\r\nexport * from './lib/ladda.directive';\r\nexport * from './lib/ladda.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}