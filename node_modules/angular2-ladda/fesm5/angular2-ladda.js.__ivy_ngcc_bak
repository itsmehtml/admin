import { __decorate, __param } from 'tslib';
import { Injectable, ElementRef, Inject, Optional, PLATFORM_ID, Input, Directive, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { create } from 'ladda';

var LaddaConfigArgs = /** @class */ (function () {
    function LaddaConfigArgs() {
    }
    return LaddaConfigArgs;
}());
var configAttributes = {
    "data-style": "style",
    "data-spinner-size": "spinnerSize",
    "data-spinner-color": "spinnerColor",
    "data-spinner-lines": "spinnerLines",
};
var LaddaConfig = /** @class */ (function () {
    function LaddaConfig(config) {
        if (config === void 0) { config = {}; }
        Object.assign(this, config);
    }
    LaddaConfig.ctorParameters = function () { return [
        { type: LaddaConfigArgs }
    ]; };
    LaddaConfig = __decorate([
        Injectable()
    ], LaddaConfig);
    return LaddaConfig;
}());

var LaddaDirective = /** @class */ (function () {
    function LaddaDirective(el, config, platformId) {
        this.platformId = platformId;
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (var attribute in configAttributes) {
            var configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                var value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    LaddaDirective.prototype.ngOnChanges = function (changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    };
    LaddaDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.ladda = create(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout(function () { _this.updateLadda(false); }, 0);
    };
    LaddaDirective.prototype.ngOnDestroy = function () {
        if (this.ladda) {
            this.ladda.remove();
        }
    };
    LaddaDirective.prototype.updateLadda = function (previousValue) {
        var loading = typeof this.loading === 'number' || !!this.loading;
        var wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    };
    LaddaDirective.prototype.updateDisabled = function () {
        this.el.disabled = this.disabled;
    };
    LaddaDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('ladda')
    ], LaddaDirective.prototype, "loading", void 0);
    __decorate([
        Input()
    ], LaddaDirective.prototype, "disabled", void 0);
    LaddaDirective = __decorate([
        Directive({
            selector: '[ladda]'
        }),
        __param(1, Inject(LaddaConfig)), __param(1, Optional()),
        __param(2, Inject(PLATFORM_ID))
    ], LaddaDirective);
    return LaddaDirective;
}());

var LaddaModule = /** @class */ (function () {
    function LaddaModule() {
    }
    LaddaModule_1 = LaddaModule;
    LaddaModule.forRoot = function (config) {
        return {
            ngModule: LaddaModule_1,
            providers: [
                { provide: LaddaConfig, useValue: config }
            ]
        };
    };
    var LaddaModule_1;
    LaddaModule = LaddaModule_1 = __decorate([
        NgModule({
            declarations: [LaddaDirective],
            exports: [LaddaDirective],
        })
    ], LaddaModule);
    return LaddaModule;
}());

/*
 * Public API Surface of ladda
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes };
//# sourceMappingURL=angular2-ladda.js.map
