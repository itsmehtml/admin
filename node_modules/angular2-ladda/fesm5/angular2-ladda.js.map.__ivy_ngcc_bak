{"version":3,"file":"angular2-ladda.js","sources":["ng://angular2-ladda/lib/ladda-config.ts","ng://angular2-ladda/lib/ladda.directive.ts","ng://angular2-ladda/lib/ladda.module.ts","ng://angular2-ladda/public-api.ts","ng://angular2-ladda/angular2-ladda.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\n\r\nexport type laddaStyle =\r\n    \"expand-left\" | \"expand-right\" | \"expand-up\" | \"expand-down\" |\r\n    \"contract\" | \"contract-overlay\" | \"zoom-in\" | \"zoom-out\" |\r\n    \"slide-left\" | \"slide-right\" | \"slide-up\" | \"slide-down\";\r\n\r\nexport abstract class LaddaConfigArgs {\r\n    style?: laddaStyle;\r\n    spinnerSize?: number;\r\n    spinnerColor?: string;\r\n    spinnerLines?: number;\r\n}\r\n\r\nexport let configAttributes: {[key: string]: keyof LaddaConfigArgs} = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\n\r\n@Injectable()\r\nexport class LaddaConfig implements LaddaConfigArgs {\r\n    constructor(config: LaddaConfigArgs = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n","import {isPlatformBrowser} from '@angular/common';\r\nimport {Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject, PLATFORM_ID} from '@angular/core';\r\nimport {LaddaConfig, LaddaConfigArgs, configAttributes} from './ladda-config';\r\nimport {create as createLadda, LaddaButton} from 'ladda';\r\n\r\nexport type laddaValue = boolean | number | undefined | null;\r\n\r\n@Directive({\r\n    selector: '[ladda]'\r\n})\r\nexport class LaddaDirective implements OnInit, OnDestroy, OnChanges {\r\n    private el: HTMLButtonElement;\r\n    private ladda: LaddaButton;\r\n\r\n    @Input('ladda') loading: laddaValue;\r\n    @Input() disabled: boolean;\r\n\r\n    constructor(\r\n        el: ElementRef,\r\n        @Inject(LaddaConfig) @Optional() config: LaddaConfigArgs,\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n    ) {\r\n        this.el = el.nativeElement;\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return;\r\n        }\r\n\r\n        this.ladda = createLadda(this.el);\r\n\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n\r\n    private updateLadda(previousValue: laddaValue): void {\r\n        let loading: boolean = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading: boolean = typeof previousValue === 'number' || !!previousValue;\r\n\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n\r\n            return this.updateDisabled();\r\n        }\r\n\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n\r\n    private updateDisabled(): void {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\n","import {NgModule, ModuleWithProviders} from '@angular/core';\r\nimport {LaddaDirective} from './ladda.directive';\r\nimport {LaddaConfigArgs, LaddaConfig} from './ladda-config';\r\n\r\n@NgModule({\r\n    declarations: [ LaddaDirective ],\r\n    exports:      [ LaddaDirective ],\r\n})\r\nexport class LaddaModule {\r\n    public static forRoot(config: LaddaConfigArgs): ModuleWithProviders<LaddaModule> {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ladda\r\n */\r\n\r\nexport * from './lib/ladda-config';\r\nexport * from './lib/ladda.directive';\r\nexport * from './lib/ladda.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["createLadda"],"mappings":"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"}